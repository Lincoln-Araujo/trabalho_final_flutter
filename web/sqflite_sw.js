// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.4.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is the priority the
//    library should be loaded with as specified in the code via the
//    load-priority annotation (0: normal, 1: high).
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is the
//    priority the library should be loaded with as specified in the code via
//    the load-priority annotation (0: normal, 1: high).
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    indexOf$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).indexOf$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    substring$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IndexedIterable_IndexedIterable(source, start, $T) {
      return new A.EfficientLengthIndexedIterable(source, start, $T._eval$1("EfficientLengthIndexedIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    ListMapView$(_values, $E) {
      return new A.ListMapView(_values, $E._eval$1("ListMapView<0>"));
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    IndexedIterable: function IndexedIterable(t0, t1, t2) {
      this._source = t0;
      this._start = t1;
      this.$ti = t2;
    },
    EfficientLengthIndexedIterable: function EfficientLengthIndexedIterable(t0, t1, t2) {
      this._source = t0;
      this._start = t1;
      this.$ti = t2;
    },
    IndexedIterator: function IndexedIterator(t0, t1, t2) {
      var _ = this;
      _._source = t0;
      _._start = t1;
      _.__internal$_index = -1;
      _.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable(t0) {
      this._backedList = t0;
    },
    ListMapView: function ListMapView(t0, t1) {
      this.__internal$_values = t0;
      this.$ti = t1;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A._CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    convertMainArgumentList(args) {
      var i,
        result = A._setArrayType([], type$.JSArray_String);
      if (args == null)
        return result;
      if (Array.isArray(args)) {
        for (i = 0; i < args.length; ++i)
          result.push(String(args[i]));
        return result;
      }
      result.push(String(args));
      return result;
    },
    wrapZoneUnaryCallback(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else
        return !J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)).get$isEmpty(0);
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_file_outFlags: function _Record_2_file_outFlags(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has not been initialized."), new Error());
    },
    throwLateFieldADI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1._value = t1;
    },
    _Cell: function _Cell(t0) {
      this._name = t0;
      this._value = null;
    },
    _checkLength($length) {
      return $length;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeInt32List_NativeInt32List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 4);
      return new Int32Array(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = A._createRuntimeType(rti) : t1;
    },
    _createRuntimeType(rti) {
      var starErasedRti, t1,
        s = rti._canonicalRecipe,
        starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      t1 = starErasedRti._cachedRuntimeType;
      return t1 == null ? starErasedRti._cachedRuntimeType = A._createRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, unstarredKind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (t1 === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      unstarred = t1 === 6 ? testRti._primary : testRti;
      unstarredKind = unstarred._kind;
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isDefinitelyTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11) {
        predicate = A.createRecordTypePredicate(unstarred._primary, unstarred._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var kind = testRti._kind,
        t1 = true;
      if (!A.isSoundTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null))));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this,
        unstarred = testRti._kind === 6 ? testRti._primary : testRti;
      return unstarred._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, unstarred)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            t3 = boundRti === t2;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6)
        return A._rtiToString(rti._primary, genericContext);
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isSoundTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isSoundTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isSoundTopType(baseType) || baseType === type$.Object || baseType === type$.legacy_Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 12:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null, false) ? 1 : 0;
        sCache.set(t, result);
      }
      if (0 === result)
        return false;
      if (1 === result)
        return true;
      return true;
    },
    _isSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, sKind, leftTypeVariable, tKind, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isSoundTopType(s))
        return false;
      t1 = s._kind;
      if (t1 === 1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv, false))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv, false);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv, false))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv, false);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv, false);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv, false))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv, false);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv, false);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      t2 = sKind === 11;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv, false) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv, false))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv, false);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv, false);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv, false))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv, false))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv, false);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv, false);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv, isLegacy) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv, false))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv, false))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isSoundTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
      return t1;
    },
    isDefinitelyTopType(t) {
      var t1;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      return t1;
    },
    isSoundTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    Future_Future(computation, $T) {
      var result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(B.Duration_0, new A.Future_Future_closure(computation, result));
      return result;
    },
    Future_Future$sync(computation, $T) {
      var error, stackTrace, future, replacement, exception, t1, result = null;
      try {
        result = computation.call$0();
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1 = $.Zone__current;
        future = new A._Future(t1, $T._eval$1("_Future<0>"));
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null)
          future._asyncCompleteError$2(replacement.error, replacement.stackTrace);
        else
          future._asyncCompleteError$2(error, stackTrace);
        return future;
      }
      return $T._eval$1("Future<0>")._is(result) ? result : A._Future$value(result, $T);
    },
    Future_Future$value($T) {
      var t1;
      $T._as(null);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncComplete$1(null);
      return t1;
    },
    Future_wait(futures, $T) {
      var handleError, future, pos, e, st, t2, t3, exception, error, stackTrace, replacement, _box_0 = {}, cleanUp = null,
        eagerError = false,
        t1 = $T._eval$1("_Future<List<0>>"),
        _future = new A._Future($.Zone__current, t1);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future);
      try {
        for (t2 = J.get$iterator$ax(futures), t3 = type$.Null; t2.moveNext$0();) {
          future = t2.get$current();
          pos = _box_0.remaining;
          future.then$1$2$onError(new A.Future_wait_closure(_box_0, pos, _future, $T, cleanUp, eagerError), handleError, t3);
          ++_box_0.remaining;
        }
        t2 = _box_0.remaining;
        if (t2 === 0) {
          t2 = _future;
          t2._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t2;
        }
        _box_0.values = A.List_List$filled(t2, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || A.boolConversionCheck(eagerError)) {
          error = e;
          stackTrace = st;
          A.checkNotNullable(error, "error", type$.Object);
          t2 = $.Zone__current;
          if (t2 !== B.C__RootZone) {
            replacement = t2.errorCallback$2(error, stackTrace);
            if (replacement != null) {
              error = replacement.error;
              stackTrace = replacement.stackTrace;
            }
          }
          if (stackTrace == null)
            stackTrace = A.AsyncError_defaultStackTrace(error);
          t1 = new A._Future($.Zone__current, t1);
          t1._asyncCompleteError$2(error, stackTrace);
          return t1;
        } else {
          _box_0.error = e;
          _box_0.stackTrace = st;
        }
      }
      return _future;
    },
    _Future$value(value, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFutureSync(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if (source === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, source, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      t1 = t2 | target._state & 1;
      source._state = t1;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__chainCoreFutureAsync(source, target) {
      var t2, t3, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      if ((t3 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(t1);
        _box_0.source._prependListeners$1(listeners);
        return;
      }
      if ((t3 & 16) === 0 && target._resultOrListeners == null) {
        target._cloneResult$1(t1);
        return;
      }
      target._state ^= 2;
      target._zone.scheduleMicrotask$1(new A._Future__chainCoreFutureAsync_closure(_box_0, target));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t5._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFutureSync(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    StreamIterator_StreamIterator(stream, $T) {
      return new A._StreamIterator(A.checkNotNullable(stream, "stream", type$.Object), $T._eval$1("_StreamIterator<0>"));
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createTimer$2(duration, callback);
      return t1.createTimer$2(duration, t1.bindCallbackGuarded$1(callback));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("0()")._as(f);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Future_Future_closure: function Future_Future_closure(t0, t1) {
      this.computation = t0;
      this.result = t1;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.T = t3;
      _.cleanUp = t4;
      _.eagerError = t5;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__chainCoreFutureAsync_closure: function _Future__chainCoreFutureAsync_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._async$_hasValue = false;
      _.$ti = t1;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedList: function LinkedList(t0) {
      var _ = this;
      _._collection$_length = _._modificationCount = 0;
      _._collection$_first = null;
      _.$ti = t0;
    },
    _LinkedListIterator: function _LinkedListIterator(t0, t1, t2, t3) {
      var _ = this;
      _._list = t0;
      _._modificationCount = t1;
      _._collection$_current = null;
      _._collection$_next = t2;
      _._visitedFirst = false;
      _.$ti = t3;
    },
    LinkedListEntry: function LinkedListEntry() {
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, t1, i, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    BigInt_parse(source) {
      var result = A._BigIntImpl__tryParse(source, null);
      if (result == null)
        A.throwExpression(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl_parse(source, radix) {
      var result = A._BigIntImpl__tryParse(source, radix);
      if (result == null)
        throw A.wrapException(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch;
      if (source === "")
        return null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      if (decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (hexMatch != null)
        return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
      return null;
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods.$shr(digit, carryBitShift);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl((digit & bitMask) >>> 0, bitShift);
      }
      if (!(digitShift >= 0 && digitShift < t2))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i, t2,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.length, i = digitsShift; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t2 = resultUsed - 1;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(resultDigits, t2);
      if (resultDigits[t2] === 0)
        resultUsed = t2;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods.$shr(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.length, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods.$shr(digit, bitShift);
      }
      if (!(last >= 0 && last < t2))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      if (!(used >= 0 && used < t3))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, c, i0, t3, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t3 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t3 + accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      var result = A.List_List$from(elements, false, $E);
      result.fixed$length = Array;
      result.immutable$list = Array;
      return result;
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var maxLength, t1;
      A.RangeError_checkNotNegative(start, "start");
      if (end != null) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      t1 = A.String__stringFromUint8List(charCodes, start, end);
      return t1;
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, caseSensitive) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, false));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable) {
      var t1 = indexable._typed_buffer$_length;
      return new A.IndexError(t1, true, invalidValue, null, "Index out of range");
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    IndexError_check(index, $length, indexable, message, $name) {
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$withLength(index, $length, indexable, message, $name == null ? "index" : $name));
      return index;
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = B.JSInt_methods.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = B.JSInt_methods.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = B.JSInt_methods.get$hashCode(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    print(object) {
      var toZone = $.printToZone;
      if (toZone == null)
        A.printString(object);
      else
        toZone.call$1(object);
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, port, userInfoStart, userInfo, host, portNumber, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        if (4 >= end)
          return A.ioore(uri, 4);
        delta = ((uri.charCodeAt(4) ^ 58) * 3 | uri.charCodeAt(0) ^ 100 | uri.charCodeAt(1) ^ 97 | uri.charCodeAt(2) ^ 116 | uri.charCodeAt(3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      B.JSArray_methods.$indexSet(indices, 1, -1);
      B.JSArray_methods.$indexSet(indices, 2, -1);
      B.JSArray_methods.$indexSet(indices, 7, -1);
      B.JSArray_methods.$indexSet(indices, 3, 0);
      B.JSArray_methods.$indexSet(indices, 4, 0);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      scheme = _null;
      if (isSimple) {
        isSimple = false;
        if (!(hostStart > schemeEnd + 3)) {
          t1 = portStart > 0;
          if (!(t1 && portStart + 1 === pathStart)) {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > 0)
                t2 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t2 = false;
            else
              t2 = true;
            if (!t2) {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t2 = true;
              if (!t2)
                if (schemeEnd === 4) {
                  if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                    if (hostStart <= 0) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      queryStart += delta;
                      fragmentStart += delta;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                    if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = "http";
                  }
                } else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                  if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "https";
                }
              isSimple = !t2;
            }
          }
        }
      }
      if (isSimple)
        return new A._SimpleUri(end < uri.length ? B.JSString_methods.substring$2(uri, 0, end) : uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      port = _null;
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        }
      } else {
        host = _null;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host),
        t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (J.contains$1$asx(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      t1 = host.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t1 = start + 1;
        index = A._Uri__checkZoneID(host, t1, t2);
        if (index < t2) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t2, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t1, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(host, i);
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, t3, sourceLength, tail, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t3 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t3 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_piR, t2);
            t2 = (B.List_piR[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            sourceLength = 1;
            if ((char & 64512) === 55296 && index + 1 < end) {
              t2 = index + 1;
              if (!(t2 < t1))
                return A.ioore(host, t2);
              tail = host.charCodeAt(t2);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              }
            }
            slice = B.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t2._contents += slice;
            t3 = A._Uri__escapeChar(char);
            t2._contents += t3;
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, t3, sourceLength, tail;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          t3 = buffer._contents += slice;
          sourceLength = 3;
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          }
          buffer._contents = t3 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_4AN, t2);
            t2 = (B.List_4AN[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t2 = char >>> 4;
              if (!(t2 < 8))
                return A.ioore(B.List_VOY, t2);
              t2 = (B.List_VOY[t2] & 1 << (char & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              A._Uri__fail(host, index, "Invalid character");
            else {
              sourceLength = 1;
              if ((char & 64512) === 55296 && index + 1 < end) {
                t2 = index + 1;
                if (!(t2 < t1))
                  return A.ioore(host, t2);
                tail = host.charCodeAt(t2);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                }
              }
              slice = B.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new A.StringBuffer("");
                t2 = buffer;
              } else
                t2 = buffer;
              t2._contents += slice;
              t3 = A._Uri__escapeChar(char);
              t2._contents += t3;
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        if (!isNormalized)
          slice = slice.toLowerCase();
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit, t2;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (!(start < t1))
        return A.ioore(scheme, start);
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (codeUnit < 128) {
          t2 = codeUnit >>> 4;
          if (!(t2 < 8))
            return A.ioore(B.List_GVy, t2);
          t2 = (B.List_GVy[t2] & 1 << (codeUnit & 15)) !== 0;
        } else
          t2 = false;
        if (!t2)
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_2jN, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null)
        return isFile ? "/" : "";
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_M2I, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_42A, true, false);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_42A, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(value, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_piR, t1);
        t1 = (B.List_piR[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, flag, encodedBytes, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        t1 = char >>> 4;
        if (!(t1 < 16))
          return A.ioore(_s16_, t1);
        codeUnits[1] = _s16_.charCodeAt(t1);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = byte >>> 4;
          if (!(t3 < 16))
            return A.ioore(_s16_, t3);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = _s16_.charCodeAt(t3);
          t3 = index + 2;
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1, t2, index, sectionStart, buffer, char, t3, sourceLength, replacement, tail, t4, _null = null;
      for (t1 = !escapeDelimiters, t2 = component.length, index = start, sectionStart = index, buffer = _null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127) {
          t3 = char >>> 4;
          if (!(t3 < 8))
            return A.ioore(charTable, t3);
          t3 = (charTable[t3] & 1 << (char & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          ++index;
        else {
          sourceLength = 1;
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement)
              replacement = "%25";
            else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash)
            replacement = "/";
          else {
            t3 = false;
            if (t1)
              if (char <= 93) {
                t3 = char >>> 4;
                if (!(t3 < 8))
                  return A.ioore(B.List_VOY, t3);
                t3 = (B.List_VOY[t3] & 1 << (char & 15)) !== 0;
              }
            if (t3) {
              A._Uri__fail(component, index, "Invalid character");
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t3 = index + 1;
                if (t3 < end) {
                  if (!(t3 < t2))
                    return A.ioore(component, t3);
                  tail = component.charCodeAt(t3);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  }
                }
              }
              replacement = A._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t4 = t3._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t3._contents = t4 + A.S(replacement);
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end) {
        t1 = B.JSString_methods.substring$2(component, sectionStart, end);
        buffer._contents += t1;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment) {
          appendSlash = output.length !== 0 && B.JSArray_methods.get$last(output) !== "..";
          if (appendSlash) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
          } else
            B.JSArray_methods.add$1(output, "..");
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_GVy, t2);
            t2 = (B.List_GVy[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var t1, byte, i, t2, charCode;
      for (t1 = s.length, byte = 0, i = 0; i < 2; ++i) {
        t2 = pos + i;
        if (!(t2 < t1))
          return A.ioore(s, t2);
        charCode = s.charCodeAt(t2);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = text.length,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        if (!(i < t1))
          return A.ioore(text, i);
        codeUnit = text.charCodeAt(i);
        if (codeUnit <= 127)
          t2 = codeUnit === 37;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (B.C_Utf8Codec === encoding)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          if (!(i < t1))
            return A.ioore(text, i);
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_42A, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    _createTables() {
      var _i, t1, t2, t3, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "\\", _s1_3 = "?", _s1_4 = "#", _s2_ = "/\\",
        tables = J.JSArray_JSArray$allocateGrowable(22, type$.Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 227);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_2, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_2, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_3, 12);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_3, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var t1, i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (t1 = uri.length, i = start; i < end; ++i) {
        if (!(state >= 0 && state < tables.length))
          return A.ioore(tables, state);
        table = tables[state];
        if (!(i < t1))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _FinalizationRegistryWrapper: function _FinalizationRegistryWrapper(t0, t1) {
      this._registry = t0;
      this.$ti = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando(t0, t1) {
      this._jsWeakMap = t0;
      this.$ti = t1;
    },
    _functionToJS1(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS2(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2) {
          return _call(f, arg1, arg2, arguments.length);
        };
      }(A._callDartFunctionFast2, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS3(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3) {
          return _call(f, arg1, arg2, arg3, arguments.length);
        };
      }(A._callDartFunctionFast3, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS4(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3, arg4) {
          return _call(f, arg1, arg2, arg3, arg4, arguments.length);
        };
      }(A._callDartFunctionFast4, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS5(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3, arg4, arg5) {
          return _call(f, arg1, arg2, arg3, arg4, arg5, arguments.length);
        };
      }(A._callDartFunctionFast5, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast2(callback, arg1, arg2, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast3(callback, arg1, arg2, arg3, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast4(callback, arg1, arg2, arg3, arg4, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 4)
        return callback.call$4(arg1, arg2, arg3, arg4);
      if ($length === 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast5(callback, arg1, arg2, arg3, arg4, arg5, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 5)
        return callback.call$5(arg1, arg2, arg3, arg4, arg5);
      if ($length === 4)
        return callback.call$4(arg1, arg2, arg3, arg4);
      if ($length === 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    callMethod(o, method, args, $T) {
      return $T._as(o[method].apply(o, args));
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    _JSSecureRandom: function _JSSecureRandom(t0) {
      this._math$_buffer = t0;
    },
    NonGrowableListMixin: function NonGrowableListMixin() {
    },
    UnmodifiableMapMixin: function UnmodifiableMapMixin() {
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0) {
      this.style = t0;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, t2, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t2 = style.isSeparator$1(path.charCodeAt(0));
      } else
        t2 = false;
      if (t2) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    Style__getPlatformStyle() {
      var userInfo, host, query, fragment, port, t1, hasAuthority, path, _null = null;
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      if (!B.JSString_methods.endsWith$1(A.Uri_base().get$path(), "/"))
        return $.$get$Style_url();
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(_null, 0, 0, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, "");
      if (host == null)
        if (userInfo.length === 0)
          t1 = port != null;
        else
          t1 = true;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath("a/b", 0, 3, _null, "", hasAuthority);
      if (t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      if (A._Uri$_internal("", userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    _argumentToStringTruncate(argument) {
      var text;
      if (argument == null)
        return null;
      text = J.toString$0$(argument);
      if (text.length > 50)
        return B.JSString_methods.substring$2(text, 0, 50) + "...";
      return text;
    },
    argumentToString(argument) {
      if (type$.Uint8List._is(argument))
        return "Blob(" + argument.length + ")";
      return A._argumentToStringTruncate(argument);
    },
    argumentsToString($arguments) {
      var t1 = $arguments.$ti;
      return "[" + new A.MappedListIterable($arguments, t1._eval$1("String?(ListBase.E)")._as(new A.argumentsToString_closure()), t1._eval$1("MappedListIterable<ListBase.E,String?>")).join$1(0, ", ") + "]";
    },
    argumentsToString_closure: function argumentsToString_closure() {
    },
    DatabaseException: function DatabaseException() {
    },
    SqfliteDatabaseException: function SqfliteDatabaseException() {
    },
    SqfliteDatabaseException_getResultCode_closure: function SqfliteDatabaseException_getResultCode_closure(t0) {
      this.$this = t0;
    },
    SqfliteDatabaseException_getResultCode_closure_findCode: function SqfliteDatabaseException_getResultCode_closure_findCode(t0) {
      this.message = t0;
    },
    DatabaseTracker: function DatabaseTracker() {
    },
    FfiMethodCall_fromDataMap(map) {
      var method = map.$index(0, "method"),
        $arguments = map.$index(0, "arguments");
      if (method != null)
        return new A.FfiMethodCall(A._asString(method), $arguments);
      return null;
    },
    FfiMethodCall: function FfiMethodCall(t0, t1) {
      this.method = t0;
      this.$arguments = t1;
    },
    FfiMethodResponse: function FfiMethodResponse(t0, t1) {
      this.__FfiMethodResponse_result_F = t0;
      this.__FfiMethodResponse_error_F = t1;
    },
    SqfliteFfiException$(code, details, message, resultCode) {
      var t1 = new A.SqfliteFfiException(code, details, details, message);
      t1._resultCode = resultCode;
      return t1;
    },
    SqfliteFfiException: function SqfliteFfiException(t0, t1, t2, t3) {
      var _ = this;
      _.sqlArguments = _.sql = _.database = null;
      _.code = t0;
      _.details = t1;
      _._resultCode = null;
      _.result = t2;
      _._transactionClosed = null;
      _._exception$_message = t3;
    },
    SqfliteFfiHandler: function SqfliteFfiHandler() {
    },
    SqfliteFfiHandlerNonImplementedMixin: function SqfliteFfiHandlerNonImplementedMixin() {
    },
    _ffiWrapSqliteException(e) {
      var t1 = e.toString$0(0);
      return A.SqfliteFfiException$("sqlite_error", null, t1, e.extendedResultCode);
    },
    _ffiWrapAnyException(e, database, sql, sqlArguments) {
      var t1, t2, t3, t4;
      if (e instanceof A.SqfliteFfiException) {
        t1 = e.database;
        if (t1 == null)
          t1 = e.database = database;
        t2 = e.sql;
        if (t2 == null)
          t2 = e.sql = sql;
        t3 = e.sqlArguments;
        if (t3 == null)
          t3 = e.sqlArguments = sqlArguments;
        t4 = t1 == null;
        if (!t4 || t2 != null || t3 != null)
          if (e.details == null) {
            t2 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Object);
            if (!t4)
              t2.$indexSet(0, "database", t1.toDebugMap$0());
            t1 = e.sql;
            if (t1 != null)
              t2.$indexSet(0, "sql", t1);
            t1 = e.sqlArguments;
            if (t1 != null)
              t2.$indexSet(0, "arguments", t1);
            e.set$details(t2);
          }
        return e;
      } else if (e instanceof A.SqliteException)
        return A._ffiWrapAnyException(A._ffiWrapSqliteException(e), database, sql, sqlArguments);
      else
        return A._ffiWrapAnyException(A.SqfliteFfiException$("error", null, J.toString$0$(e), null), database, sql, sqlArguments);
    },
    SqfliteFfiMethodCallHandler_handleImpl(_this) {
      return A.SqfliteFfiMethodCallHandler_handleImpl$body(_this);
    },
    SqfliteFfiMethodCallHandler_handleImpl$body(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, result, e, ffiException, exception, t1, t2, $async$exception;
      var $async$SqfliteFfiMethodCallHandler_handleImpl = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler_rawHandle(_this), $async$SqfliteFfiMethodCallHandler_handleImpl);
            case 7:
              // returning from await.
              result = $async$result;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              A.getTraceFromException($async$exception);
              t1 = A.SqfliteFfiMethodCallHandler_getDatabase(_this);
              t2 = A.SqfliteFfiMethodCallHandler__getParam(_this, "sql", type$.String);
              ffiException = A._ffiWrapAnyException(e, t1, t2, A.SqfliteFfiMethodCallHandler_getSqlArguments(_this));
              throw A.wrapException(ffiException);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleImpl, $async$completer);
    },
    SqfliteFfiMethodCallHandler__wrapSqlHandler(_this, handler) {
      var database = A.SqfliteFfiMethodCallHandler_getDatabaseOrThrow(_this);
      return database.handleTransactionId$2(A._asIntQ(type$.Map_dynamic_dynamic._as(_this.$arguments).$index(0, "transactionId")), new A.SqfliteFfiMethodCallHandler__wrapSqlHandler_closure(handler, database));
    },
    SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, handler) {
      return $.$get$_globalHandlerLock().synchronized$1$1(new A.SqfliteFfiMethodCallHandler__wrapGlobalHandler_closure(handler), type$.dynamic);
    },
    SqfliteFfiMethodCallHandler_rawHandle(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, t1;
      var $async$SqfliteFfiMethodCallHandler_rawHandle = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = _this.method;
            case 3:
              // switch
              switch (t1) {
                case "openDatabase":
                  // goto case
                  $async$goto = 5;
                  break;
                case "closeDatabase":
                  // goto case
                  $async$goto = 6;
                  break;
                case "query":
                  // goto case
                  $async$goto = 7;
                  break;
                case "queryCursorNext":
                  // goto case
                  $async$goto = 8;
                  break;
                case "execute":
                  // goto case
                  $async$goto = 9;
                  break;
                case "insert":
                  // goto case
                  $async$goto = 10;
                  break;
                case "update":
                  // goto case
                  $async$goto = 11;
                  break;
                case "batch":
                  // goto case
                  $async$goto = 12;
                  break;
                case "getDatabasesPath":
                  // goto case
                  $async$goto = 13;
                  break;
                case "deleteDatabase":
                  // goto case
                  $async$goto = 14;
                  break;
                case "databaseExists":
                  // goto case
                  $async$goto = 15;
                  break;
                case "options":
                  // goto case
                  $async$goto = 16;
                  break;
                case "writeDatabaseBytes":
                  // goto case
                  $async$goto = 17;
                  break;
                case "readDatabaseBytes":
                  // goto case
                  $async$goto = 18;
                  break;
                case "debugMode":
                  // goto case
                  $async$goto = 19;
                  break;
                default:
                  // goto default
                  $async$goto = 20;
                  break;
              }
              break;
            case 5:
              // case
              $async$goto = 21;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleOpenDatabase(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 21:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 6:
              // case
              $async$goto = 22;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleCloseDatabase(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 22:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // case
              $async$goto = 23;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapSqlHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleQuery(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 23:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // case
              $async$goto = 24;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapSqlHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleQueryCursorNext(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 24:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 9:
              // case
              $async$goto = 25;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapSqlHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleExecute(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 25:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 10:
              // case
              $async$goto = 26;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapSqlHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleInsert(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 26:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 11:
              // case
              $async$goto = 27;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapSqlHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleUpdate(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 27:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 12:
              // case
              $async$goto = 28;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapSqlHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleBatch(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 28:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 13:
              // case
              $async$goto = 29;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleGetDatabasesPath(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 29:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 14:
              // case
              $async$goto = 30;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleDeleteDatabase(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 30:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 15:
              // case
              $async$goto = 31;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleDatabaseExists(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 31:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 16:
              // case
              $async$goto = 32;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleOptions(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 32:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 17:
              // case
              $async$goto = 33;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleWriteDatabaseBytes(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 33:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 18:
              // case
              $async$goto = 34;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__wrapGlobalHandler(_this, A.SqfliteFfiMethodCallHandler_get_handleReadDatabaseBytes(_this)), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 34:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 19:
              // case
              $async$goto = 35;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler_handleDebugMode(_this), $async$SqfliteFfiMethodCallHandler_rawHandle);
            case 35:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 20:
              // default
              throw A.wrapException(A.ArgumentError$("Invalid method " + t1 + " " + _this.toString$0(0), null));
            case 4:
              // after switch
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_rawHandle, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleOpenDatabase(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleOpenDatabase_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleOpenDatabase(_this) {
      return A.SqfliteFfiMethodCallHandler_handleOpenDatabase$body(_this);
    },
    SqfliteFfiMethodCallHandler_handleOpenDatabase$body(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_dynamic_dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, ffiDb, e, database, t4, exception, id, t1, path, t2, t3, singleInstance, $async$exception;
      var $async$SqfliteFfiMethodCallHandler_handleOpenDatabase = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Map_dynamic_dynamic._as(_this.$arguments);
              path = A._asString(t1.$index(0, "path"));
              t2 = new A.SqfliteFfiMethodCallHandler_handleOpenDatabase_wrapDbId();
              t3 = A._asBoolQ(t1.$index(0, "singleInstance"));
              singleInstance = t3 === true;
              t3 = A._asBoolQ(t1.$index(0, "readOnly"));
              if (singleInstance) {
                database = $.ffiSingleInstanceDbs.$index(0, path);
                if (database != null) {
                  if ($.logLevel >= 2)
                    database.logResult$1$result("Reopening existing single database " + database.toString$0(0));
                  $async$returnValue = t2.call$1(database.id);
                  // goto return
                  $async$goto = 1;
                  break;
                }
              }
              ffiDb = null;
              $async$handler = 4;
              t4 = $._sqfliteFfiHandler;
              $async$goto = 7;
              return A._asyncAwait((t4 == null ? $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo() : t4).openPlatform$1(t1), $async$SqfliteFfiMethodCallHandler_handleOpenDatabase);
            case 7:
              // returning from await.
              ffiDb = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.SqliteException) {
                e = t1;
                t1 = e;
                t2 = t1.toString$0(0);
                throw A.wrapException(A.SqfliteFfiException$("sqlite_error", null, "open_failed: " + t2, t1.extendedResultCode));
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              id = $._lastFfiId = $._lastFfiId + 1;
              t1 = ffiDb;
              t4 = $.logLevel;
              database = new A.SqfliteFfiDatabase(A._setArrayType([], type$.JSArray__QueuedHandler), A.Lock_Lock(), id, singleInstance, path, t3 === true, t1, t4, A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._SqfliteFfiCursorInfo), A.Lock_Lock());
              $.ffiDbs.$indexSet(0, id, database);
              database.logResult$1$result("Opening database " + database.toString$0(0));
              if (singleInstance)
                $.ffiSingleInstanceDbs.$indexSet(0, path, database);
              $async$returnValue = t2.call$1(id);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleOpenDatabase, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleCloseDatabase(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleCloseDatabase_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleCloseDatabase(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        database;
      var $async$SqfliteFfiMethodCallHandler_handleCloseDatabase = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              database = A.SqfliteFfiMethodCallHandler_getDatabaseOrThrow(_this);
              if (database.singleInstance) {
                $.ffiSingleInstanceDbs.remove$1(0, database.path);
                if ($._tracker == null)
                  $._tracker = new A.DatabaseTracker();
              }
              database.close$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleCloseDatabase, $async$completer);
    },
    SqfliteFfiMethodCallHandler_getDatabaseOrThrow(_this) {
      var database = A.SqfliteFfiMethodCallHandler_getDatabase(_this);
      if (database == null)
        throw A.wrapException(A.StateError$("Database " + A.S(A.SqfliteFfiMethodCallHandler_getDatabaseId(_this)) + " not found"));
      return database;
    },
    SqfliteFfiMethodCallHandler_getDatabase(_this) {
      var id = A.SqfliteFfiMethodCallHandler_getDatabaseId(_this);
      if (id != null)
        return $.ffiDbs.$index(0, id);
      return null;
    },
    SqfliteFfiMethodCallHandler_getDatabaseId(_this) {
      var t1 = _this.$arguments;
      if (type$.Map_dynamic_dynamic._is(t1))
        return A._asIntQ(t1.$index(0, "id"));
      return null;
    },
    SqfliteFfiMethodCallHandler__getParam(_this, key, $T) {
      var t1 = _this.$arguments;
      if (type$.Map_dynamic_dynamic._is(t1))
        return $T._eval$1("0?")._as(t1.$index(0, key));
      return null;
    },
    SqfliteFfiMethodCallHandler_hasNullTransactionId(_this) {
      var _s13_ = "transactionId",
        t1 = _this.$arguments;
      if (type$.Map_dynamic_dynamic._is(t1))
        return t1.containsKey$1(_s13_) && t1.$index(0, _s13_) == null;
      return false;
    },
    SqfliteFfiMethodCallHandler_getPath(_this) {
      var t1, parts,
        path = A.SqfliteFfiMethodCallHandler__getParam(_this, "path", type$.String);
      if (path != null && path !== ":memory:" && $.$get$context().style.rootLength$1(path) <= 0) {
        if ($._sqfliteFfiHandler == null)
          $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo();
        t1 = $.$get$context();
        parts = A._setArrayType(["/", path, null, null, null, null, null, null, null, null, null, null, null, null, null, null], type$.JSArray_nullable_String);
        A._validateArgList("join", parts);
        path = t1.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
      }
      return path;
    },
    SqfliteFfiMethodCallHandler_getSqlArguments(_this) {
      var t1, t2, argument,
        sqlArguments = A.SqfliteFfiMethodCallHandler__getParam(_this, "arguments", type$.List_dynamic);
      if (sqlArguments != null)
        for (t1 = J.get$iterator$ax(sqlArguments), t2 = type$.Uint8List; t1.moveNext$0();) {
          argument = t1.get$current();
          if (argument != null)
            if (typeof argument != "number")
              if (typeof argument != "string")
                if (!t2._is(argument))
                  if (!(argument instanceof A._BigIntImpl))
                    throw A.wrapException(A.ArgumentError$("Invalid sql argument type '" + J.get$runtimeType$(argument).toString$0(0) + "': " + A.S(argument), null));
        }
      return sqlArguments == null ? null : J.cast$1$0$ax(sqlArguments, type$.nullable_Object);
    },
    SqfliteFfiMethodCallHandler_getOperations(_this) {
      var operations = A._setArrayType([], type$.JSArray_SqfliteFfiOperation),
        t1 = type$.Map_dynamic_dynamic;
      t1 = J.cast$1$0$ax(type$.List_dynamic._as(t1._as(_this.$arguments).$index(0, "operations")), t1);
      t1.forEach$1(t1, new A.SqfliteFfiMethodCallHandler_getOperations_closure(operations));
      return operations;
    },
    SqfliteFfiMethodCallHandler_get_handleQuery(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleQuery_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleQuery(_this, database) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, sqlArguments, t1;
      var $async$SqfliteFfiMethodCallHandler_handleQuery = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.SqfliteFfiMethodCallHandler__getParam(_this, "sql", type$.String);
              t1.toString;
              sqlArguments = A.SqfliteFfiMethodCallHandler_getSqlArguments(_this);
              $async$returnValue = database.handleQuery$3$pageSize$sql$sqlArguments(A._asIntQ(type$.Map_dynamic_dynamic._as(_this.$arguments).$index(0, "cursorPageSize")), t1, sqlArguments);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleQuery, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleQueryCursorNext(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleQueryCursorNext_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleQueryCursorNext(_this, database) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, t1, cursorId;
      var $async$SqfliteFfiMethodCallHandler_handleQueryCursorNext = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              database = A.SqfliteFfiMethodCallHandler_getDatabaseOrThrow(_this);
              t1 = type$.Map_dynamic_dynamic._as(_this.$arguments);
              cursorId = A._asInt(t1.$index(0, "cursorId"));
              $async$returnValue = database.handleQueryCursorNext$2$cancel$cursorId(A._asBoolQ(t1.$index(0, "cancel")), cursorId);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleQueryCursorNext, $async$completer);
    },
    SqfliteFfiMethodCallHandler__handleExecute(_this, database) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Object),
        $async$returnValue, t1;
      var $async$SqfliteFfiMethodCallHandler__handleExecute = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              database = A.SqfliteFfiMethodCallHandler_getDatabaseOrThrow(_this);
              t1 = A.SqfliteFfiMethodCallHandler__getParam(_this, "sql", type$.String);
              t1.toString;
              $async$goto = 3;
              return A._asyncAwait(database.handleExecute$2$sql$sqlArguments(t1, A.SqfliteFfiMethodCallHandler_getSqlArguments(_this)), $async$SqfliteFfiMethodCallHandler__handleExecute);
            case 3:
              // returning from await.
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler__handleExecute, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleExecute(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleExecute_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleExecute(_this, database) {
      return A.SqfliteFfiMethodCallHandler_handleExecute$body(_this, database);
    },
    SqfliteFfiMethodCallHandler_handleExecute$body(_this, database) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Object),
        $async$returnValue, $async$handler = 2, $async$currentError, exception, t1, enteringTransaction, $async$exception;
      var $async$SqfliteFfiMethodCallHandler_handleExecute = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.SqfliteFfiMethodCallHandler__getParam(_this, "inTransaction", type$.bool);
              enteringTransaction = t1 === true && A.SqfliteFfiMethodCallHandler_hasNullTransactionId(_this);
              if (A.boolConversionCheck(enteringTransaction))
                database._currentTransactionId = ++database._lastTransactionId;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler__handleExecute(_this, database), $async$SqfliteFfiMethodCallHandler_handleExecute);
            case 7:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (A.boolConversionCheck(enteringTransaction))
                database._currentTransactionId = null;
              throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              if (A.boolConversionCheck(enteringTransaction)) {
                $async$returnValue = A.LinkedHashMap_LinkedHashMap$_literal(["transactionId", database._currentTransactionId], type$.String, type$.nullable_Object);
                // goto return
                $async$goto = 1;
                break;
              } else if (t1 === false)
                database._currentTransactionId = null;
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleExecute, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleOptions(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleOptions_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleOptions(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, t2, t1;
      var $async$SqfliteFfiMethodCallHandler_handleOptions = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = _this.$arguments;
              $async$goto = type$.Map_dynamic_dynamic._is(t1) ? 3 : 4;
              break;
            case 3:
              // then
              if (t1.containsKey$1("logLevel")) {
                t2 = A._asIntQ(t1.$index(0, "logLevel"));
                $.logLevel = t2 == null ? 0 : t2;
              }
              t2 = $._sqfliteFfiHandler;
              $async$goto = 5;
              return A._asyncAwait((t2 == null ? $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo() : t2).handleOptionsPlatform$1(t1), $async$SqfliteFfiMethodCallHandler_handleOptions);
            case 5:
              // returning from await.
            case 4:
              // join
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleOptions, $async$completer);
    },
    SqfliteFfiMethodCallHandler_handleDebugMode(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue;
      var $async$SqfliteFfiMethodCallHandler_handleDebugMode = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (J.$eq$(_this.$arguments, true))
                $.logLevel = 2;
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleDebugMode, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleInsert(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleInsert_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleInsert(_this, database) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_int),
        $async$returnValue, t1;
      var $async$SqfliteFfiMethodCallHandler_handleInsert = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.SqfliteFfiMethodCallHandler__getParam(_this, "sql", type$.String);
              t1.toString;
              $async$returnValue = database.handleInsert$2$sql$sqlArguments(t1, A.SqfliteFfiMethodCallHandler_getSqlArguments(_this));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleInsert, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleUpdate(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleUpdate_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleUpdate(_this, database) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, t1;
      var $async$SqfliteFfiMethodCallHandler_handleUpdate = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.SqfliteFfiMethodCallHandler__getParam(_this, "sql", type$.String);
              t1.toString;
              $async$returnValue = database.handleUpdate$2$sql$sqlArguments(t1, A.SqfliteFfiMethodCallHandler_getSqlArguments(_this));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleUpdate, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleBatch(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleBatch_closure(_this);
    },
    SqfliteFfiMethodCallHandler_get_handleGetDatabasesPath(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleGetDatabasesPath_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleGetDatabasesPath(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue;
      var $async$SqfliteFfiMethodCallHandler_handleGetDatabasesPath = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($._sqfliteFfiHandler == null)
                $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo();
              $async$returnValue = "/";
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleGetDatabasesPath, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleDeleteDatabase(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleDeleteDatabase_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleDeleteDatabase(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, t1, t2, exception, path, singleInstanceDatabase, $async$exception;
      var $async$SqfliteFfiMethodCallHandler_handleDeleteDatabase = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              path = A.SqfliteFfiMethodCallHandler_getPath(_this);
              singleInstanceDatabase = $.ffiSingleInstanceDbs.$index(0, path);
              if (singleInstanceDatabase != null) {
                singleInstanceDatabase.close$0();
                $.ffiSingleInstanceDbs.remove$1(0, path);
              }
              $async$handler = 3;
              t1 = $._sqfliteFfiHandler;
              if (t1 == null)
                t1 = $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo();
              t2 = path;
              t2.toString;
              $async$goto = 6;
              return A._asyncAwait(t1.deleteDatabasePlatform$1(t2), $async$SqfliteFfiMethodCallHandler_handleDeleteDatabase);
            case 6:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleDeleteDatabase, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleDatabaseExists(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleDatabaseExists_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleDatabaseExists(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, path, t1;
      var $async$SqfliteFfiMethodCallHandler_handleDatabaseExists = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              path = A.SqfliteFfiMethodCallHandler_getPath(_this);
              t1 = $._sqfliteFfiHandler;
              if (t1 == null)
                t1 = $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo();
              path.toString;
              $async$returnValue = t1.handleDatabaseExistsPlatform$1(path);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleDatabaseExists, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleReadDatabaseBytes(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleReadDatabaseBytes_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleReadDatabaseBytes(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_dynamic_dynamic),
        $async$returnValue, path, t1, $async$temp1;
      var $async$SqfliteFfiMethodCallHandler_handleReadDatabaseBytes = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              path = A.SqfliteFfiMethodCallHandler_getPath(_this);
              t1 = $._sqfliteFfiHandler;
              if (t1 == null)
                t1 = $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo();
              path.toString;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(t1.readDatabaseBytesPlatform$1(path), $async$SqfliteFfiMethodCallHandler_handleReadDatabaseBytes);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal(["bytes", $async$result], type$.String, type$.nullable_Object);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleReadDatabaseBytes, $async$completer);
    },
    SqfliteFfiMethodCallHandler_get_handleWriteDatabaseBytes(_this) {
      return new A.SqfliteFfiMethodCallHandler_get_handleWriteDatabaseBytes_closure(_this);
    },
    SqfliteFfiMethodCallHandler_handleWriteDatabaseBytes(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, path, bytes, t1;
      var $async$SqfliteFfiMethodCallHandler_handleWriteDatabaseBytes = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              path = A.SqfliteFfiMethodCallHandler_getPath(_this);
              bytes = A.SqfliteFfiMethodCallHandler__getParam(_this, "bytes", type$.Uint8List);
              t1 = $._sqfliteFfiHandler;
              if (t1 == null)
                t1 = $._sqfliteFfiHandler = A.sqfliteFfiHandlerIo();
              path.toString;
              bytes.toString;
              $async$returnValue = t1.writeDatabaseBytesPlatform$2(path, bytes);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SqfliteFfiMethodCallHandler_handleWriteDatabaseBytes, $async$completer);
    },
    SqfliteFfiOperation: function SqfliteFfiOperation() {
      this.sqlArguments = this.sql = this.method = null;
    },
    _SqfliteFfiCursorInfo: function _SqfliteFfiCursorInfo(t0, t1, t2, t3) {
      var _ = this;
      _.id = t0;
      _.statement = t1;
      _.pageSize = t2;
      _.cursor = t3;
      _.atEnd = false;
    },
    _QueuedHandler: function _QueuedHandler(t0, t1) {
      this.handler = t0;
      this._completer = t1;
    },
    SqfliteFfiDatabase: function SqfliteFfiDatabase(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._lastTransactionId = 0;
      _._currentTransactionId = null;
      _._noTransactionHandlerQueue = t0;
      _._handlerLock = t1;
      _.id = t2;
      _.singleInstance = t3;
      _.path = t4;
      _.readOnly = t5;
      _._ffiDb = t6;
      _.logLevel = t7;
      _._cursors = t8;
      _._lastCursorId = 0;
      _._queuedHandlerLock = t9;
    },
    SqfliteFfiDatabase_handleExecute_closure: function SqfliteFfiDatabase_handleExecute_closure(t0, t1, t2) {
      this.$this = t0;
      this.sql = t1;
      this.sqlArguments = t2;
    },
    SqfliteFfiDatabase__runQueuedHandlers_closure: function SqfliteFfiDatabase__runQueuedHandlers_closure(t0) {
      this.$this = t0;
    },
    SqfliteFfiDatabase__cancelQueuedHandlers_closure: function SqfliteFfiDatabase__cancelQueuedHandlers_closure(t0) {
      this.$this = t0;
    },
    SqfliteFfiDatabase_handleInsert_closure: function SqfliteFfiDatabase_handleInsert_closure(t0, t1, t2) {
      this.$this = t0;
      this.sql = t1;
      this.sqlArguments = t2;
    },
    SqfliteFfiDatabase_handleUpdate_closure: function SqfliteFfiDatabase_handleUpdate_closure(t0, t1, t2) {
      this.$this = t0;
      this.sql = t1;
      this.sqlArguments = t2;
    },
    SqfliteFfiDatabase_handleQuery_closure: function SqfliteFfiDatabase_handleQuery_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.pageSize = t1;
      _.sqlArguments = t2;
      _.sql = t3;
    },
    SqfliteFfiDatabase_handleQueryCursorNext_closure: function SqfliteFfiDatabase_handleQueryCursorNext_closure(t0, t1, t2) {
      this.$this = t0;
      this.cursorId = t1;
      this.cancel = t2;
    },
    SqfliteFfiDatabase_handleBatch_closure: function SqfliteFfiDatabase_handleBatch_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.operations = t1;
      _.noResult = t2;
      _.continueOnError = t3;
    },
    SqfliteFfiDatabase__handleBatch_getErrorMap: function SqfliteFfiDatabase__handleBatch_getErrorMap() {
    },
    SqfliteFfiDatabase__handleBatch_addResult: function SqfliteFfiDatabase__handleBatch_addResult(t0, t1) {
      this._box_0 = t0;
      this.noResult = t1;
    },
    SqfliteFfiDatabase__handleBatch_addError: function SqfliteFfiDatabase__handleBatch_addError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.operation = t2;
      _.continueOnError = t3;
      _.noResult = t4;
      _.getErrorMap = t5;
    },
    SqfliteFfiDatabase__handleBatch_addError_wrap: function SqfliteFfiDatabase__handleBatch_addError_wrap(t0, t1) {
      this.$this = t0;
      this.operation = t1;
    },
    SqfliteFfiMethodCallHandler__wrapSqlHandler_closure: function SqfliteFfiMethodCallHandler__wrapSqlHandler_closure(t0, t1) {
      this.handler = t0;
      this.database = t1;
    },
    SqfliteFfiMethodCallHandler__wrapGlobalHandler_closure: function SqfliteFfiMethodCallHandler__wrapGlobalHandler_closure(t0) {
      this.handler = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleOpenDatabase_closure: function SqfliteFfiMethodCallHandler_get_handleOpenDatabase_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_handleOpenDatabase_wrapDbId: function SqfliteFfiMethodCallHandler_handleOpenDatabase_wrapDbId() {
    },
    SqfliteFfiMethodCallHandler_get_handleCloseDatabase_closure: function SqfliteFfiMethodCallHandler_get_handleCloseDatabase_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_getOperations_closure: function SqfliteFfiMethodCallHandler_getOperations_closure(t0) {
      this.operations = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleQuery_closure: function SqfliteFfiMethodCallHandler_get_handleQuery_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleQueryCursorNext_closure: function SqfliteFfiMethodCallHandler_get_handleQueryCursorNext_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleExecute_closure: function SqfliteFfiMethodCallHandler_get_handleExecute_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleOptions_closure: function SqfliteFfiMethodCallHandler_get_handleOptions_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleInsert_closure: function SqfliteFfiMethodCallHandler_get_handleInsert_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleUpdate_closure: function SqfliteFfiMethodCallHandler_get_handleUpdate_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleBatch_closure: function SqfliteFfiMethodCallHandler_get_handleBatch_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleGetDatabasesPath_closure: function SqfliteFfiMethodCallHandler_get_handleGetDatabasesPath_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleDeleteDatabase_closure: function SqfliteFfiMethodCallHandler_get_handleDeleteDatabase_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleDatabaseExists_closure: function SqfliteFfiMethodCallHandler_get_handleDatabaseExists_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleReadDatabaseBytes_closure: function SqfliteFfiMethodCallHandler_get_handleReadDatabaseBytes_closure(t0) {
      this._this = t0;
    },
    SqfliteFfiMethodCallHandler_get_handleWriteDatabaseBytes_closure: function SqfliteFfiMethodCallHandler_get_handleWriteDatabaseBytes_closure(t0) {
      this._this = t0;
    },
    SqfliteDatabaseFileSystemFfiWeb: function SqfliteDatabaseFileSystemFfiWeb(t0) {
      this.fs = t0;
    },
    SqfliteFfiHandlerWeb: function SqfliteFfiHandlerWeb(t0) {
      var _ = this;
      _.context = t0;
      _.__SqfliteFfiHandlerWeb__dbFs_FI = $;
      _._fs = _._sqlite3 = null;
    },
    _SqfliteFfiHandlerWeb_SqfliteFfiHandler_SqfliteFfiHandlerNonImplementedMixin: function _SqfliteFfiHandlerWeb_SqfliteFfiHandler_SqfliteFfiHandlerNonImplementedMixin() {
    },
    _handleMessageEvent($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, port, command, data, key, value, data0, key0, value0, ffiMethodCall, postResponse, result, e, st, e0, st0, exception, t2, t3, error, t1, rawData, $async$exception, $async$exception1;
      var $async$_handleMessageEvent = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $event.data;
              rawData = t1 == null ? null : A.SqfliteWebDartifyExtension_dartifyValueStrict(t1);
              t1 = type$.JSArray_nullable_Object._as($event.ports);
              port = J.get$first$ax(type$.List_JSObject._is(t1) ? t1 : new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("CastList<1,JSObject>")));
              $async$handler = 3;
              $async$goto = typeof rawData == "string" ? 6 : 8;
              break;
            case 6:
              // then
              port.postMessage(rawData);
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$goto = type$.List_dynamic._is(rawData) ? 9 : 11;
              break;
            case 9:
              // then
              command = J.$index$asx(rawData, 0);
              if (J.$eq$(command, "varSet")) {
                data = type$.Map_dynamic_dynamic._as(J.$index$asx(rawData, 1));
                key = A._asString(J.$index$asx(data, "key"));
                value = J.$index$asx(data, "value");
                A.print($._shw + " " + A.S(command) + " " + A.S(key) + ": " + A.S(value));
                $.swGlobals.$indexSet(0, key, value);
                port.postMessage(null);
              } else if (J.$eq$(command, "varGet")) {
                data0 = type$.Map_dynamic_dynamic._as(J.$index$asx(rawData, 1));
                key0 = A._asString(J.$index$asx(data0, "key"));
                value0 = $.swGlobals.$index(0, key0);
                A.print($._shw + " " + A.S(command) + " " + A.S(key0) + ": " + A.S(value0));
                t1 = type$.String;
                port.postMessage(A.SqfliteWebJsifyExtension_jsifyValueStrict(A.LinkedHashMap_LinkedHashMap$_literal(["result", A.LinkedHashMap_LinkedHashMap$_literal(["key", key0, "value", value0], t1, type$.nullable_Object)], t1, type$.Map_of_String_and_nullable_Object)));
              } else {
                A.print($._shw + " " + A.S(command) + " unknown");
                port.postMessage(null);
              }
              // goto join
              $async$goto = 10;
              break;
            case 11:
              // else
              $async$goto = type$.Map_dynamic_dynamic._is(rawData) ? 12 : 14;
              break;
            case 12:
              // then
              ffiMethodCall = A.FfiMethodCall_fromDataMap(rawData);
              $async$goto = ffiMethodCall != null ? 15 : 17;
              break;
            case 15:
              // then
              ffiMethodCall = new A.FfiMethodCall(ffiMethodCall.method, A._dataFromEncodable(ffiMethodCall.$arguments));
              $async$goto = $._swContext == null ? 18 : 19;
              break;
            case 18:
              // then
              $async$goto = 20;
              return A._asyncAwait(A.sqfliteFfiWebLoadSqlite3Wasm(new A.SqfliteFfiWebOptions(), true), $async$_handleMessageEvent);
            case 20:
              // returning from await.
              t1 = $async$result;
              $._swContext = t1;
              t1.toString;
              $._sqfliteFfiHandler = new A.SqfliteFfiHandlerWeb(t1);
            case 19:
              // join
              postResponse = new A._handleMessageEvent_postResponse(port);
              $async$handler = 22;
              $async$goto = 25;
              return A._asyncAwait(A.SqfliteFfiMethodCallHandler_handleImpl(ffiMethodCall), $async$_handleMessageEvent);
            case 25:
              // returning from await.
              result = $async$result;
              result = A._dataToEncodable(result);
              postResponse.call$1(new A.FfiMethodResponse(result, null));
              $async$handler = 3;
              // goto after finally
              $async$goto = 24;
              break;
            case 22:
              // catch
              $async$handler = 21;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              t1 = e;
              t2 = st;
              t3 = new A.FfiMethodResponse($, $);
              error = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Object);
              if (t1 instanceof A.SqfliteFfiException) {
                error.$indexSet(0, "code", t1.code);
                error.$indexSet(0, "details", t1.details);
                error.$indexSet(0, "message", t1._exception$_message);
                error.$indexSet(0, "resultCode", t1.getResultCode$0());
                t1 = t1._transactionClosed;
                error.$indexSet(0, "transactionClosed", t1 === true);
              } else
                error.$indexSet(0, "message", J.toString$0$(t1));
              t1 = $._isRelease;
              if (!(t1 == null ? $._isRelease = true : t1) && t2 != null)
                error.$indexSet(0, "stackTrace", t2.toString$0(0));
              t3.__FfiMethodResponse_error_F = error;
              t3.__FfiMethodResponse_result_F = null;
              postResponse.call$1(t3);
              // goto after finally
              $async$goto = 24;
              break;
            case 21:
              // uncaught
              // goto catch
              $async$goto = 3;
              break;
            case 24:
              // after finally
              // goto join
              $async$goto = 16;
              break;
            case 17:
              // else
              A.print($._shw + " " + A.S(rawData) + " unknown");
              port.postMessage(null);
            case 16:
              // join
              // goto join
              $async$goto = 13;
              break;
            case 14:
              // else
              A.print($._shw + " " + A.S(rawData) + " map unknown");
              port.postMessage(null);
            case 13:
              // join
            case 10:
              // join
            case 7:
              // join
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception1 = $async$currentError;
              e0 = A.unwrapException($async$exception1);
              st0 = A.getTraceFromException($async$exception1);
              A.print($._shw + " error caught " + A.S(e0) + " " + A.S(st0));
              port.postMessage(null);
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleMessageEvent, $async$completer);
    },
    mainSharedWorker(args) {
      var scope, scopeName, e, scope0, e0, exception,
        zone = $.Zone__current;
      try {
        scope = type$.JSObject._as(self);
        try {
          scopeName = A._asString(scope.name);
        } catch (exception) {
          e = A.unwrapException(exception);
        }
        scope.onconnect = A._functionToJS1(new A.mainSharedWorker_closure(zone));
      } catch (exception) {
      }
      scope0 = type$.JSObject._as(self);
      try {
        scope0.onmessage = A._functionToJS1(new A.mainSharedWorker_closure0(zone));
      } catch (exception) {
        e0 = A.unwrapException(exception);
      }
    },
    _handleMessageEvent_postResponse: function _handleMessageEvent_postResponse(t0) {
      this.port = t0;
    },
    mainSharedWorker_closure: function mainSharedWorker_closure(t0) {
      this.zone = t0;
    },
    mainSharedWorker__closure0: function mainSharedWorker__closure0(t0, t1) {
      this.event = t0;
      this.zone = t1;
    },
    mainSharedWorker___closure: function mainSharedWorker___closure(t0) {
      this.zone = t0;
    },
    mainSharedWorker____closure: function mainSharedWorker____closure(t0) {
      this.event = t0;
    },
    mainSharedWorker_closure0: function mainSharedWorker_closure0(t0) {
      this.zone = t0;
    },
    mainSharedWorker__closure: function mainSharedWorker__closure(t0) {
      this.event = t0;
    },
    _isBasicTypeOrNull(value) {
      if (value == null)
        return true;
      else if (typeof value == "number" || typeof value == "string" || A._isBool(value))
        return true;
      return false;
    },
    _looksLikeCustomType(map) {
      var key;
      if (map.get$length(map) === 1) {
        key = J.get$first$ax(map.get$keys());
        if (typeof key == "string")
          return B.JSString_methods.startsWith$1(key, "@");
        throw A.wrapException(A.ArgumentError$value(key, null, null));
      }
      return false;
    },
    _dataToEncodable(valueOrNull) {
      var t1, _i, adapter, t2, clone, i, item, converted, _box_0 = {};
      if (A._isBasicTypeOrNull(valueOrNull))
        return valueOrNull;
      valueOrNull.toString;
      for (t1 = $.$get$_adapters(), _i = 0; _i < 1; ++_i) {
        adapter = t1[_i];
        t2 = A._instanceType(adapter)._eval$1("_TypeAdapter.T");
        if (t2._is(valueOrNull))
          return A.LinkedHashMap_LinkedHashMap$_literal(["@" + adapter.tag, type$.BigInt._as(t2._as(valueOrNull)).toString$0(0)], type$.String, type$.nullable_Object);
      }
      if (type$.Map_dynamic_dynamic._is(valueOrNull)) {
        if (A._looksLikeCustomType(valueOrNull))
          return A.LinkedHashMap_LinkedHashMap$_literal(["@", valueOrNull], type$.String, type$.nullable_Object);
        _box_0.clone = null;
        valueOrNull.forEach$1(0, new A._dataToEncodable_closure(_box_0, valueOrNull));
        t1 = _box_0.clone;
        if (t1 == null)
          t1 = valueOrNull;
        return t1;
      } else if (type$.List_dynamic._is(valueOrNull)) {
        for (t1 = J.getInterceptor$asx(valueOrNull), t2 = type$.dynamic, clone = null, i = 0; i < t1.get$length(valueOrNull); ++i) {
          item = t1.$index(valueOrNull, i);
          converted = A._dataToEncodable(item);
          if (converted == null ? item != null : converted !== item) {
            if (clone == null)
              clone = A.List_List$from(valueOrNull, true, t2);
            B.JSArray_methods.$indexSet(clone, i, converted);
          }
        }
        if (clone == null)
          t1 = valueOrNull;
        else
          t1 = clone;
        return t1;
      } else
        throw A.wrapException(A.UnsupportedError$("Unsupported value type " + J.get$runtimeType$(valueOrNull).toString$0(0) + " for " + A.S(valueOrNull)));
    },
    _dataFromEncodable(valueOrNull) {
      var adapter, encodedValue, e, tag, t1, exception, t2, clone, i, item, converted, _box_0 = {};
      if (A._isBasicTypeOrNull(valueOrNull))
        return valueOrNull;
      valueOrNull.toString;
      if (type$.Map_dynamic_dynamic._is(valueOrNull)) {
        if (A._looksLikeCustomType(valueOrNull)) {
          tag = B.JSString_methods.substring$1(A._asString(J.get$first$ax(valueOrNull.get$keys())), 1);
          if (tag === "") {
            t1 = J.get$first$ax(valueOrNull.get$values());
            return t1 == null ? type$.Object._as(t1) : t1;
          }
          adapter = $.$get$_adaptersByTag().$index(0, tag);
          if (adapter != null) {
            encodedValue = J.get$first$ax(valueOrNull.get$values());
            if (encodedValue == null)
              return null;
            try {
              t1 = adapter.decode$1(encodedValue);
              if (t1 == null)
                t1 = type$.Object._as(t1);
              return t1;
            } catch (exception) {
              e = A.unwrapException(exception);
              A.print(A.S(e) + " - ignoring " + A.S(encodedValue) + " " + J.get$runtimeType$(encodedValue).toString$0(0));
            }
          }
        }
        _box_0.clone = null;
        valueOrNull.forEach$1(0, new A._dataFromEncodable_closure(_box_0, valueOrNull));
        t1 = _box_0.clone;
        if (t1 == null)
          t1 = valueOrNull;
        return t1;
      } else if (type$.List_dynamic._is(valueOrNull)) {
        for (t1 = J.getInterceptor$asx(valueOrNull), t2 = type$.dynamic, clone = null, i = 0; i < t1.get$length(valueOrNull); ++i) {
          item = t1.$index(valueOrNull, i);
          converted = A._dataFromEncodable(item);
          if (converted == null ? item != null : converted !== item) {
            if (clone == null)
              clone = A.List_List$from(valueOrNull, true, t2);
            B.JSArray_methods.$indexSet(clone, i, converted);
          }
        }
        if (clone == null)
          t1 = valueOrNull;
        else
          t1 = clone;
        return t1;
      } else
        throw A.wrapException(A.UnsupportedError$("Unsupported value type " + J.get$runtimeType$(valueOrNull).toString$0(0) + " for " + A.S(valueOrNull)));
    },
    _TypeAdapter: function _TypeAdapter() {
    },
    _BigIntAdapter: function _BigIntAdapter(t0) {
      this.tag = t0;
    },
    _adaptersByTag_closure: function _adaptersByTag_closure() {
    },
    _dataToEncodable_closure: function _dataToEncodable_closure(t0, t1) {
      this._box_0 = t0;
      this.map = t1;
    },
    _dataFromEncodable_closure: function _dataFromEncodable_closure(t0, t1) {
      this._box_0 = t0;
      this.map = t1;
    },
    SqfliteWebDartifyExtension_dartifyValueStrict(_this) {
      var jsObject, object, keys, key, e, jsArray, _length, list, index, t1, t2, t3, exception,
        value = _this;
      if (value != null && typeof value === "string")
        return A._asString(value);
      else if (value != null && typeof value === "number")
        return A._asDouble(value);
      else if (value != null && typeof value === "boolean")
        return A._asBool(value);
      else if (value != null && A.JSAnyUtilityExtension_instanceOfString(value, "Uint8Array"))
        return type$.NativeUint8List._as(value);
      else if (value != null && A.JSAnyUtilityExtension_instanceOfString(value, "Array")) {
        jsArray = type$.JSArray_nullable_Object._as(value);
        _length = A._asInt(jsArray.length);
        list = J.JSArray_JSArray$allocateGrowable(_length, type$.nullable_Object);
        for (index = 0; index < _length; ++index) {
          t1 = jsArray[index];
          list[index] = t1 == null ? null : A.SqfliteWebDartifyExtension_dartifyValueStrict(t1);
        }
        return list;
      }
      try {
        jsObject = type$.JSObject._as(value);
        object = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Object);
        t1 = type$.JSArray_nullable_Object._as(self.Object.keys(jsObject));
        keys = t1;
        for (t1 = J.get$iterator$ax(keys); t1.moveNext$0();) {
          key = t1.get$current();
          t2 = A._asString(key);
          t3 = jsObject[key];
          t3 = t3 == null ? null : A.SqfliteWebDartifyExtension_dartifyValueStrict(t3);
          J.$indexSet$ax(object, t2, t3);
        }
        return object;
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.UnsupportedError$("Unsupported value: " + A.S(value) + " (type: " + J.get$runtimeType$(value).toString$0(0) + ") (" + A.S(e) + ")");
        throw A.wrapException(t1);
      }
    },
    SqfliteWebJsifyExtension_jsifyValueStrict(_this) {
      var _this0, jsArray, t1, t2, t3, t4, item, t5;
      if (typeof _this == "string")
        return _this;
      else if (typeof _this == "number")
        return _this;
      else if (type$.Map_dynamic_dynamic._is(_this)) {
        _this0 = {};
        _this.forEach$1(0, new A.SqfliteWebJsifyExtension_jsifyValueStrict_closure(_this0));
        return _this0;
      } else if (type$.List_dynamic._is(_this)) {
        if (type$.Uint8List._is(_this))
          return _this;
        jsArray = type$.JSArray_nullable_Object._as(new self.Array(J.get$length$asx(_this)));
        for (t1 = A.IndexedIterable_IndexedIterable(_this, 0, type$.dynamic), t2 = J.get$iterator$ax(t1._source), t3 = t1._start, t1 = new A.IndexedIterator(t2, t3, A._instanceType(t1)._eval$1("IndexedIterator<1>")); t1.moveNext$0();) {
          t4 = t1.__internal$_index;
          t4 = t4 >= 0 ? new A._Record_2(t3 + t4, t2.get$current()) : A.throwExpression(A.IterableElementError_noElement());
          item = t4._1;
          t5 = item == null ? null : A.SqfliteWebJsifyExtension_jsifyValueStrict(item);
          jsArray[t4._0] = t5;
        }
        return jsArray;
      } else if (A._isBool(_this))
        return _this;
      throw A.wrapException(A.UnsupportedError$("Unsupported value: " + A.S(_this) + " (type: " + J.get$runtimeType$(_this).toString$0(0) + ")"));
    },
    SqfliteWebJsifyExtension_jsifyValueStrict_closure: function SqfliteWebJsifyExtension_jsifyValueStrict_closure(t0) {
      this.jsObject = t0;
    },
    SqfliteFfiWebOptions: function SqfliteFfiWebOptions() {
    },
    SqfliteFfiWebContext: function SqfliteFfiWebContext() {
    },
    sqfliteFfiWebLoadSqlite3FileSystem(options) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SqfliteFfiWebContext),
        $async$returnValue, $async$temp1;
      var $async$sqfliteFfiWebLoadSqlite3FileSystem = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.IndexedDbFileSystem_open("sqflite_databases"), $async$sqfliteFfiWebLoadSqlite3FileSystem);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.SqfliteFfiWebContextImpl$($async$result, options, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$sqfliteFfiWebLoadSqlite3FileSystem, $async$completer);
    },
    sqfliteFfiWebLoadSqlite3Wasm(options, fromWebWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.SqfliteFfiWebContext),
        $async$returnValue, uri, fs, wasmSqlite3, t1, $name, t2, id, ptr, context;
      var $async$sqfliteFfiWebLoadSqlite3Wasm = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.sqfliteFfiWebLoadSqlite3FileSystem(options), $async$sqfliteFfiWebLoadSqlite3Wasm);
            case 3:
              // returning from await.
              context = $async$result;
              context = context;
              uri = $.$get$_defaultSqlite3WasmUri();
              fs = type$.SqfliteFfiWebContextImpl._as(context).fs;
              $async$goto = 4;
              return A._asyncAwait(A.WasmSqlite3_loadFromUrl(uri), $async$sqfliteFfiWebLoadSqlite3Wasm);
            case 4:
              // returning from await.
              wasmSqlite3 = $async$result;
              t1 = wasmSqlite3.bindings;
              t1 = t1.bindings;
              $name = t1.allocateBytes$2$additionalLength(B.C_Utf8Encoder.convert$1(fs.name), 1);
              t2 = t1.callbacks.registeredVfs;
              id = t2.__js_helper$_length;
              t2.$indexSet(0, id, fs);
              ptr = A._asInt(A._asDouble(t1._register_vfs.call(null, $name, id, 1)));
              t1 = $.$get$DartCallbacks_sqliteVfsPointer();
              t1.$ti._eval$1("1?")._as(ptr);
              t1._jsWeakMap.set(fs, ptr);
              $async$returnValue = A.SqfliteFfiWebContextImpl$(fs, options, wasmSqlite3);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$sqfliteFfiWebLoadSqlite3Wasm, $async$completer);
    },
    SqfliteFfiWebContextImpl$(fs, options, wasmSqlite3) {
      return new A.SqfliteFfiWebContextImpl(fs, wasmSqlite3);
    },
    SqfliteFfiWebContextImpl: function SqfliteFfiWebContextImpl(t0, t1) {
      this.fs = t0;
      this.wasmSqlite3 = t1;
      this.__SqfliteFfiWebContextImpl_rawMessageSender_F = $;
    },
    SqliteException: function SqliteException(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.message = t0;
      _.explanation = t1;
      _.extendedResultCode = t2;
      _.operation = t3;
      _.causingStatement = t4;
      _.parametersToStatement = t5;
    },
    SqliteException_toString_closure: function SqliteException_toString_closure() {
    },
    RawSqliteBindings: function RawSqliteBindings() {
    },
    SqliteResult: function SqliteResult(t0, t1, t2) {
      this.resultCode = t0;
      this.result = t1;
      this.$ti = t2;
    },
    RawSqliteDatabase: function RawSqliteDatabase() {
    },
    RawStatementCompiler: function RawStatementCompiler() {
    },
    RawSqliteStatement: function RawSqliteStatement() {
    },
    RawSqliteContext: function RawSqliteContext() {
    },
    RawSqliteValue: function RawSqliteValue() {
    },
    FinalizableDatabase: function FinalizableDatabase(t0, t1, t2) {
      this.bindings = t0;
      this.database = t1;
      this._statements = t2;
    },
    DatabaseImplementation: function DatabaseImplementation(t0, t1, t2, t3) {
      var _ = this;
      _.bindings = t0;
      _.database = t1;
      _.finalizable = t2;
      _._updateListeners = t3;
      _._isClosed = false;
    },
    DatabaseImplementation__prepareInternal_freeIntermediateResults: function DatabaseImplementation__prepareInternal_freeIntermediateResults(t0, t1) {
      this.compiler = t0;
      this.createdStatements = t1;
    },
    FinalizablePart: function FinalizablePart() {
    },
    disposeFinalizer_closure: function disposeFinalizer_closure() {
    },
    Sqlite3Implementation: function Sqlite3Implementation() {
    },
    FinalizableStatement: function FinalizableStatement(t0) {
      this.statement = t0;
      this._inResetState = true;
      this._closed = false;
    },
    StatementImplementation: function StatementImplementation(t0, t1, t2, t3) {
      var _ = this;
      _.statement = t0;
      _.database = t1;
      _.finalizable = t2;
      _.sql = t3;
      _._currentCursor = _._latestArguments = null;
    },
    _ActiveCursorIterator: function _ActiveCursorIterator(t0, t1, t2) {
      var _ = this;
      _.statement = t0;
      _.columnCount = -1;
      _.___ActiveCursorIterator_current_A = $;
      _._hasReliableColumnNames = false;
      _._columnNames = t1;
      _._calculatedIndexes = t2;
    },
    InMemoryFileSystem$(random) {
      var t1 = $.$get$Random__secureRandom();
      return new A.InMemoryFileSystem(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Uint8Buffer), t1, "dart-memory");
    },
    InMemoryFileSystem: function InMemoryFileSystem(t0, t1, t2) {
      this.fileData = t0;
      this.random = t1;
      this.name = t2;
    },
    _InMemoryFile: function _InMemoryFile(t0, t1, t2) {
      var _ = this;
      _.vfs = t0;
      _.path = t1;
      _.deleteOnClose = t2;
      _._lockMode = 0;
    },
    Cursor: function Cursor() {
    },
    IteratingCursor: function IteratingCursor() {
    },
    ResultSet: function ResultSet(t0, t1, t2) {
      this.rows = t0;
      this._columnNames = t1;
      this._calculatedIndexes = t2;
    },
    Row: function Row(t0, t1) {
      this._result = t0;
      this._data = t1;
    },
    _ResultIterator: function _ResultIterator(t0) {
      this.result = t0;
      this.index = -1;
    },
    _ResultSet_Cursor_ListMixin: function _ResultSet_Cursor_ListMixin() {
    },
    _ResultSet_Cursor_ListMixin_NonGrowableListMixin: function _ResultSet_Cursor_ListMixin_NonGrowableListMixin() {
    },
    _Row_Object_UnmodifiableMapMixin: function _Row_Object_UnmodifiableMapMixin() {
    },
    _Row_Object_UnmodifiableMapMixin_MapMixin: function _Row_Object_UnmodifiableMapMixin_MapMixin() {
    },
    OpenMode: function OpenMode(t0) {
      this._core$_name = t0;
    },
    CommonPreparedStatement: function CommonPreparedStatement() {
    },
    IndexedParameters: function IndexedParameters(t0) {
      this.parameters = t0;
    },
    VfsException$(returnCode) {
      return new A.VfsException(returnCode);
    },
    VfsException: function VfsException(t0) {
      this.returnCode = t0;
    },
    Sqlite3Filename: function Sqlite3Filename(t0) {
      this.path = t0;
    },
    VirtualFileSystem: function VirtualFileSystem() {
    },
    BaseVirtualFileSystem: function BaseVirtualFileSystem() {
    },
    BaseVfsFile: function BaseVfsFile() {
    },
    WasmSqliteBindings: function WasmSqliteBindings(t0) {
      this.bindings = t0;
    },
    WasmDatabase: function WasmDatabase(t0, t1) {
      this.bindings = t0;
      this.db = t1;
    },
    WasmStatementCompiler: function WasmStatementCompiler(t0, t1, t2, t3) {
      var _ = this;
      _.database = t0;
      _.sql = t1;
      _.stmtOut = t2;
      _.pzTail = t3;
    },
    WasmStatement: function WasmStatement(t0, t1, t2) {
      this.stmt = t0;
      this.bindings = t1;
      this._allocatedArguments = t2;
    },
    WasmContext: function WasmContext() {
    },
    WasmValue: function WasmValue() {
    },
    WasmValueList: function WasmValueList(t0, t1, t2) {
      this.bindings = t0;
      this.length = t1;
      this.value = t2;
    },
    CompleteIdbRequest_complete(_this, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._SyncCompleter(t1, $T._eval$1("_SyncCompleter<0>")),
        t2 = type$.nullable_void_Function_JSObject,
        t3 = type$.JSObject;
      A._EventStreamSubscription$(_this, "success", t2._as(new A.CompleteIdbRequest_complete_closure(completer, _this, $T)), false, t3);
      A._EventStreamSubscription$(_this, "error", t2._as(new A.CompleteIdbRequest_complete_closure0(completer, _this)), false, t3);
      return t1;
    },
    CompleteOpenIdbRequest_completeOrBlocked(_this, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._SyncCompleter(t1, $T._eval$1("_SyncCompleter<0>")),
        t2 = type$.nullable_void_Function_JSObject,
        t3 = type$.JSObject;
      A._EventStreamSubscription$(_this, "success", t2._as(new A.CompleteOpenIdbRequest_completeOrBlocked_closure(completer, _this, $T)), false, t3);
      A._EventStreamSubscription$(_this, "error", t2._as(new A.CompleteOpenIdbRequest_completeOrBlocked_closure0(completer, _this)), false, t3);
      A._EventStreamSubscription$(_this, "blocked", t2._as(new A.CompleteOpenIdbRequest_completeOrBlocked_closure1(completer, _this)), false, t3);
      return t1;
    },
    _CursorReader: function _CursorReader(t0, t1) {
      var _ = this;
      _._onError = _._onSuccess = _._cursor = null;
      _._cursorRequest = t0;
      _.$ti = t1;
    },
    _CursorReader_moveNext_closure: function _CursorReader_moveNext_closure(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    _CursorReader_moveNext_closure0: function _CursorReader_moveNext_closure0(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    CompleteIdbRequest_complete_closure: function CompleteIdbRequest_complete_closure(t0, t1, t2) {
      this.completer = t0;
      this._this = t1;
      this.T = t2;
    },
    CompleteIdbRequest_complete_closure0: function CompleteIdbRequest_complete_closure0(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    CompleteOpenIdbRequest_completeOrBlocked_closure: function CompleteOpenIdbRequest_completeOrBlocked_closure(t0, t1, t2) {
      this.completer = t0;
      this._this = t1;
      this.T = t2;
    },
    CompleteOpenIdbRequest_completeOrBlocked_closure0: function CompleteOpenIdbRequest_completeOrBlocked_closure0(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    CompleteOpenIdbRequest_completeOrBlocked_closure1: function CompleteOpenIdbRequest_completeOrBlocked_closure1(t0, t1) {
      this.completer = t0;
      this._this = t1;
    },
    WasmInstance_load(response, imports) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmInstance),
        $async$returnValue, t1, native, exports, t2, _this;
      var $async$WasmInstance_load = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _this = {};
              imports.forEach$1(0, new A.WasmInstance_load_closure(_this));
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1._as(self.WebAssembly.instantiateStreaming(response, _this)), t1), $async$WasmInstance_load);
            case 3:
              // returning from await.
              native = $async$result;
              exports = t1._as(t1._as(native.instance).exports);
              if ("_initialize" in exports)
                type$.JavaScriptFunction._as(exports._initialize).call();
              t2 = type$.String;
              t2 = new A.WasmInstance(A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.JavaScriptFunction), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1));
              t2.WasmInstance$_$1(t1._as(native.instance));
              $async$returnValue = t2;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmInstance_load, $async$completer);
    },
    WasmInstance: function WasmInstance(t0, t1) {
      this.functions = t0;
      this.globals = t1;
    },
    WasmInstance_load_closure: function WasmInstance_load_closure(t0) {
      this.importsJs = t0;
    },
    WasmInstance_load__closure: function WasmInstance_load__closure(t0) {
      this.moduleJs = t0;
    },
    WasmSqlite3_loadFromUrl(uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmSqlite3),
        $async$returnValue, t1, jsUri, $async$temp1;
      var $async$WasmSqlite3_loadFromUrl = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              jsUri = uri.get$isAbsolute() ? t1._as(new self.URL(uri.toString$0(0))) : t1._as(new self.URL(uri.toString$0(0), A.Uri_base().toString$0(0)));
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1._as(self.fetch(jsUri, null)), t1), $async$WasmSqlite3_loadFromUrl);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.WasmSqlite3__load($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmSqlite3_loadFromUrl, $async$completer);
    },
    WasmSqlite3__load(fetchResponse) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmSqlite3),
        $async$returnValue, $async$temp1, $async$temp2;
      var $async$WasmSqlite3__load = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$temp2 = A;
              $async$goto = 3;
              return A._asyncAwait(A.WasmBindings_instantiateAsync(fetchResponse), $async$WasmSqlite3__load);
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.WasmSqlite3(new $async$temp2.WasmSqliteBindings($async$result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmSqlite3__load, $async$completer);
    },
    WasmSqlite3: function WasmSqlite3(t0) {
      this.bindings = t0;
    },
    IndexedDbFileSystem_open(dbName) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.IndexedDbFileSystem),
        $async$returnValue, t1, t2, t3, t4, fs;
      var $async$IndexedDbFileSystem_open = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.String;
              t2 = new A.AsynchronousIndexedDbFileSystem(dbName);
              t3 = A.InMemoryFileSystem$(null);
              t4 = $.$get$Random__secureRandom();
              fs = new A.IndexedDbFileSystem(t2, t3, new A.LinkedList(type$.LinkedList__IndexedDbWorkItem), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.int), t4, "indexeddb");
              $async$goto = 3;
              return A._asyncAwait(t2.open$0(), $async$IndexedDbFileSystem_open);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(fs._readFiles$0(), $async$IndexedDbFileSystem_open);
            case 4:
              // returning from await.
              $async$returnValue = fs;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$IndexedDbFileSystem_open, $async$completer);
    },
    AsynchronousIndexedDbFileSystem: function AsynchronousIndexedDbFileSystem(t0) {
      this._database = null;
      this._dbName = t0;
      this._storeBlobs = true;
    },
    AsynchronousIndexedDbFileSystem_open_closure: function AsynchronousIndexedDbFileSystem_open_closure(t0) {
      this.openRequest = t0;
    },
    AsynchronousIndexedDbFileSystem__readFile_closure: function AsynchronousIndexedDbFileSystem__readFile_closure(t0) {
      this.fileId = t0;
    },
    AsynchronousIndexedDbFileSystem_readFully_closure: function AsynchronousIndexedDbFileSystem_readFully_closure(t0, t1, t2, t3) {
      var _ = this;
      _.row = t0;
      _.result = t1;
      _.rowOffset = t2;
      _.length = t3;
    },
    AsynchronousIndexedDbFileSystem__write_writeBlock: function AsynchronousIndexedDbFileSystem__write_writeBlock(t0, t1, t2) {
      this.$this = t0;
      this.blocks = t1;
      this.fileId = t2;
    },
    AsynchronousIndexedDbFileSystem__write_closure: function AsynchronousIndexedDbFileSystem__write_closure(t0, t1) {
      this.writeBlock = t0;
      this.writes = t1;
    },
    _FileWriteRequest: function _FileWriteRequest(t0, t1, t2) {
      this.originalContent = t0;
      this.replacedBlocks = t1;
      this.newFileLength = t2;
    },
    _FileWriteRequest__updateBlock_closure: function _FileWriteRequest__updateBlock_closure(t0, t1) {
      this.$this = t0;
      this.blockOffset = t1;
    },
    _OffsetAndBuffer: function _OffsetAndBuffer(t0, t1) {
      this.offset = t0;
      this.buffer = t1;
    },
    IndexedDbFileSystem: function IndexedDbFileSystem(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._asynchronous = t0;
      _._currentWorkItem = null;
      _._memory = t1;
      _._pendingWork = t2;
      _._inMemoryOnlyFiles = t3;
      _._knownFileIds = t4;
      _.random = t5;
      _.name = t6;
    },
    IndexedDbFileSystem__startWorkingIfNeeded_closure: function IndexedDbFileSystem__startWorkingIfNeeded_closure(t0) {
      this.$this = t0;
    },
    IndexedDbFileSystem_flush_closure: function IndexedDbFileSystem_flush_closure() {
    },
    _IndexedDbFile: function _IndexedDbFile(t0, t1, t2) {
      this.vfs = t0;
      this.memoryFile = t1;
      this.path = t2;
    },
    _IndexedDbFile_xTruncate_closure: function _IndexedDbFile_xTruncate_closure(t0, t1) {
      this.$this = t0;
      this.size = t1;
    },
    _IndexedDbWorkItem: function _IndexedDbWorkItem() {
    },
    _FunctionWorkItem: function _FunctionWorkItem(t0, t1) {
      var _ = this;
      _.work = t0;
      _.completer = t1;
      _._collection$_previous = _._collection$_next = _._list = null;
    },
    _DeleteFileWorkItem: function _DeleteFileWorkItem(t0, t1, t2) {
      var _ = this;
      _.fileSystem = t0;
      _.path = t1;
      _.completer = t2;
      _._collection$_previous = _._collection$_next = _._list = null;
    },
    _CreateFileWorkItem: function _CreateFileWorkItem(t0, t1, t2) {
      var _ = this;
      _.fileSystem = t0;
      _.path = t1;
      _.completer = t2;
      _._collection$_previous = _._collection$_next = _._list = null;
    },
    _WriteFileWorkItem: function _WriteFileWorkItem(t0, t1, t2, t3, t4) {
      var _ = this;
      _.fileSystem = t0;
      _.path = t1;
      _.originalContent = t2;
      _.writes = t3;
      _.completer = t4;
      _._collection$_previous = _._collection$_next = _._list = null;
    },
    WasmBindings_instantiateAsync(response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WasmBindings),
        $async$returnValue, instance, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, injected, t1;
      var $async$WasmBindings_instantiateAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              injected = A._InjectedValues$();
              t1 = injected.___InjectedValues_injectedValues_A;
              t1 === $ && A.throwLateFieldNI("injectedValues");
              $async$goto = 3;
              return A._asyncAwait(A.WasmInstance_load(response, t1), $async$WasmBindings_instantiateAsync);
            case 3:
              // returning from await.
              instance = $async$result;
              t1 = injected.___InjectedValues_memory_A;
              t1 === $ && A.throwLateFieldNI("memory");
              t2 = instance.functions;
              t3 = t2.$index(0, "dart_sqlite3_malloc");
              t3.toString;
              t4 = t2.$index(0, "dart_sqlite3_free");
              t4.toString;
              t2.$index(0, "dart_sqlite3_create_scalar_function").toString;
              t2.$index(0, "dart_sqlite3_create_aggregate_function").toString;
              t2.$index(0, "dart_sqlite3_create_window_function").toString;
              t2.$index(0, "dart_sqlite3_create_collation").toString;
              t5 = t2.$index(0, "dart_sqlite3_register_vfs");
              t5.toString;
              t2.$index(0, "sqlite3_vfs_unregister").toString;
              t6 = t2.$index(0, "dart_sqlite3_updates");
              t6.toString;
              t2.$index(0, "sqlite3_libversion").toString;
              t2.$index(0, "sqlite3_sourceid").toString;
              t2.$index(0, "sqlite3_libversion_number").toString;
              t7 = t2.$index(0, "sqlite3_open_v2");
              t7.toString;
              t8 = t2.$index(0, "sqlite3_close_v2");
              t8.toString;
              t9 = t2.$index(0, "sqlite3_extended_errcode");
              t9.toString;
              t10 = t2.$index(0, "sqlite3_errmsg");
              t10.toString;
              t11 = t2.$index(0, "sqlite3_errstr");
              t11.toString;
              t12 = t2.$index(0, "sqlite3_extended_result_codes");
              t12.toString;
              t13 = t2.$index(0, "sqlite3_exec");
              t13.toString;
              t2.$index(0, "sqlite3_free").toString;
              t14 = t2.$index(0, "sqlite3_prepare_v3");
              t14.toString;
              t15 = t2.$index(0, "sqlite3_bind_parameter_count");
              t15.toString;
              t16 = t2.$index(0, "sqlite3_column_count");
              t16.toString;
              t17 = t2.$index(0, "sqlite3_column_name");
              t17.toString;
              t18 = t2.$index(0, "sqlite3_reset");
              t18.toString;
              t19 = t2.$index(0, "sqlite3_step");
              t19.toString;
              t20 = t2.$index(0, "sqlite3_finalize");
              t20.toString;
              t21 = t2.$index(0, "sqlite3_column_type");
              t21.toString;
              t22 = t2.$index(0, "sqlite3_column_int64");
              t22.toString;
              t23 = t2.$index(0, "sqlite3_column_double");
              t23.toString;
              t24 = t2.$index(0, "sqlite3_column_bytes");
              t24.toString;
              t25 = t2.$index(0, "sqlite3_column_blob");
              t25.toString;
              t26 = t2.$index(0, "sqlite3_column_text");
              t26.toString;
              t27 = t2.$index(0, "sqlite3_bind_null");
              t27.toString;
              t28 = t2.$index(0, "sqlite3_bind_int64");
              t28.toString;
              t29 = t2.$index(0, "sqlite3_bind_double");
              t29.toString;
              t30 = t2.$index(0, "sqlite3_bind_text");
              t30.toString;
              t31 = t2.$index(0, "sqlite3_bind_blob64");
              t31.toString;
              t32 = t2.$index(0, "sqlite3_bind_parameter_index");
              t32.toString;
              t33 = t2.$index(0, "sqlite3_changes");
              t33.toString;
              t34 = t2.$index(0, "sqlite3_last_insert_rowid");
              t34.toString;
              t35 = t2.$index(0, "sqlite3_user_data");
              t35.toString;
              t2.$index(0, "sqlite3_result_null").toString;
              t2.$index(0, "sqlite3_result_int64").toString;
              t2.$index(0, "sqlite3_result_double").toString;
              t2.$index(0, "sqlite3_result_text").toString;
              t2.$index(0, "sqlite3_result_blob64").toString;
              t2.$index(0, "sqlite3_result_error").toString;
              t2.$index(0, "sqlite3_value_type").toString;
              t2.$index(0, "sqlite3_value_int64").toString;
              t2.$index(0, "sqlite3_value_double").toString;
              t2.$index(0, "sqlite3_value_bytes").toString;
              t2.$index(0, "sqlite3_value_text").toString;
              t2.$index(0, "sqlite3_value_blob").toString;
              t2.$index(0, "sqlite3_aggregate_context").toString;
              t36 = t2.$index(0, "sqlite3_get_autocommit");
              t36.toString;
              t2.$index(0, "sqlite3_stmt_isexplain").toString;
              t2.$index(0, "sqlite3_stmt_readonly").toString;
              t2 = t2.$index(0, "dart_sqlite3_db_config_int");
              instance.globals.$index(0, "sqlite3_temp_directory").toString;
              $async$returnValue = injected.___InjectedValues_bindings_A = new A.WasmBindings(t1, injected.callbacks, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t21, t22, t23, t24, t26, t25, t27, t28, t29, t30, t31, t32, t20, t33, t34, t35, t36, t2);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$WasmBindings_instantiateAsync, $async$completer);
    },
    _runVfs(body) {
      var e, exception, t1;
      try {
        body.call$0();
        return 0;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.VfsException) {
          e = t1;
          return e.returnCode;
        } else
          return 1;
      }
    },
    WrappedMemory_strlen(_this, address) {
      var bytes = A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(_this.buffer), address, null),
        t1 = bytes.length,
        $length = 0;
      while (true) {
        if (!($length < t1))
          return A.ioore(bytes, $length);
        if (!(bytes[$length] !== 0))
          break;
        ++$length;
      }
      return $length;
    },
    WrappedMemory_readString(_this, address) {
      var t1 = type$.NativeByteBuffer._as(_this.buffer),
        t2 = A.WrappedMemory_strlen(_this, address);
      return B.C_Utf8Codec.decode$1(A.NativeUint8List_NativeUint8List$view(t1, address, t2));
    },
    WrappedMemory_readNullableString(_this, address, $length) {
      var t1;
      if (address === 0)
        return null;
      t1 = type$.NativeByteBuffer._as(_this.buffer);
      return B.C_Utf8Codec.decode$1(A.NativeUint8List_NativeUint8List$view(t1, address, $length == null ? A.WrappedMemory_strlen(_this, address) : $length));
    },
    _InjectedValues$() {
      var t1 = type$.int;
      t1 = new A._InjectedValues(new A.DartCallbacks(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.RegisteredFunctionSet), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AggregateContext_nullable_Object), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.VirtualFileSystem), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.VirtualFileSystemFile)));
      t1._InjectedValues$0();
      return t1;
    },
    WasmBindings: function WasmBindings(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36) {
      var _ = this;
      _.memory = t0;
      _.callbacks = t1;
      _._malloc = t2;
      _._free = t3;
      _._register_vfs = t4;
      _._update_hooks = t5;
      _._sqlite3_open_v2 = t6;
      _._sqlite3_close_v2 = t7;
      _._sqlite3_extended_errcode = t8;
      _._sqlite3_errmsg = t9;
      _._sqlite3_errstr = t10;
      _._sqlite3_extended_result_codes = t11;
      _._sqlite3_exec = t12;
      _._sqlite3_prepare_v3 = t13;
      _._sqlite3_bind_parameter_count = t14;
      _._sqlite3_column_count = t15;
      _._sqlite3_column_name = t16;
      _._sqlite3_reset = t17;
      _._sqlite3_step = t18;
      _._sqlite3_column_type = t19;
      _._sqlite3_column_int64 = t20;
      _._sqlite3_column_double = t21;
      _._sqlite3_column_bytes = t22;
      _._sqlite3_column_text = t23;
      _._sqlite3_column_blob = t24;
      _._sqlite3_bind_null = t25;
      _._sqlite3_bind_int64 = t26;
      _._sqlite3_bind_double = t27;
      _._sqlite3_bind_text = t28;
      _._sqlite3_bind_blob64 = t29;
      _._sqlite3_bind_parameter_index = t30;
      _._sqlite3_finalize = t31;
      _._sqlite3_changes = t32;
      _._sqlite3_last_insert_rowid = t33;
      _._sqlite3_user_data = t34;
      _._sqlite3_get_autocommit = t35;
      _._sqlite3_db_config = t36;
    },
    _InjectedValues: function _InjectedValues(t0) {
      var _ = this;
      _.___InjectedValues_memory_A = _.___InjectedValues_injectedValues_A = _.___InjectedValues_bindings_A = $;
      _.callbacks = t0;
    },
    _InjectedValues_closure: function _InjectedValues_closure(t0) {
      this.memory = t0;
    },
    _InjectedValues_closure0: function _InjectedValues_closure0(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure13: function _InjectedValues__closure13(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.vfs = t1;
      _.path = t2;
      _.flags = t3;
      _.memory = t4;
      _.dartFdPtr = t5;
      _.pOutFlags = t6;
    },
    _InjectedValues_closure1: function _InjectedValues_closure1(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure12: function _InjectedValues__closure12(t0, t1, t2) {
      this.vfs = t0;
      this.path = t1;
      this.syncDir = t2;
    },
    _InjectedValues_closure2: function _InjectedValues_closure2(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure11: function _InjectedValues__closure11(t0, t1, t2, t3, t4) {
      var _ = this;
      _.vfs = t0;
      _.path = t1;
      _.flags = t2;
      _.memory = t3;
      _.pResOut = t4;
    },
    _InjectedValues_closure3: function _InjectedValues_closure3(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure10: function _InjectedValues__closure10(t0, t1, t2, t3, t4) {
      var _ = this;
      _.vfs = t0;
      _.path = t1;
      _.nOut = t2;
      _.memory = t3;
      _.zOut = t4;
    },
    _InjectedValues_closure4: function _InjectedValues_closure4(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure9: function _InjectedValues__closure9(t0, t1, t2, t3) {
      var _ = this;
      _.vfs = t0;
      _.memory = t1;
      _.zOut = t2;
      _.nByte = t3;
    },
    _InjectedValues_closure5: function _InjectedValues_closure5(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure8: function _InjectedValues__closure8(t0, t1) {
      this.vfs = t0;
      this.micros = t1;
    },
    _InjectedValues_closure6: function _InjectedValues_closure6(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues_closure7: function _InjectedValues_closure7(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure8: function _InjectedValues_closure8(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure7: function _InjectedValues__closure7(t0, t1, t2) {
      this.$this = t0;
      this.file = t1;
      this.fd = t2;
    },
    _InjectedValues_closure9: function _InjectedValues_closure9(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure6: function _InjectedValues__closure6(t0, t1, t2, t3, t4) {
      var _ = this;
      _.file = t0;
      _.memory = t1;
      _.target = t2;
      _.amount = t3;
      _.offset = t4;
    },
    _InjectedValues_closure10: function _InjectedValues_closure10(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure5: function _InjectedValues__closure5(t0, t1, t2, t3, t4) {
      var _ = this;
      _.file = t0;
      _.memory = t1;
      _.source = t2;
      _.amount = t3;
      _.offset = t4;
    },
    _InjectedValues_closure11: function _InjectedValues_closure11(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure4: function _InjectedValues__closure4(t0, t1) {
      this.file = t0;
      this.size = t1;
    },
    _InjectedValues_closure12: function _InjectedValues_closure12(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure3: function _InjectedValues__closure3(t0, t1) {
      this.file = t0;
      this.flags = t1;
    },
    _InjectedValues_closure13: function _InjectedValues_closure13(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure2: function _InjectedValues__closure2(t0, t1, t2) {
      this.file = t0;
      this.memory = t1;
      this.sizePtr = t2;
    },
    _InjectedValues_closure14: function _InjectedValues_closure14(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure1: function _InjectedValues__closure1(t0, t1) {
      this.file = t0;
      this.flags = t1;
    },
    _InjectedValues_closure15: function _InjectedValues_closure15(t0) {
      this.$this = t0;
    },
    _InjectedValues__closure0: function _InjectedValues__closure0(t0, t1) {
      this.file = t0;
      this.flags = t1;
    },
    _InjectedValues_closure16: function _InjectedValues_closure16(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues__closure: function _InjectedValues__closure(t0, t1, t2) {
      this.file = t0;
      this.memory = t1;
      this.pResOut = t2;
    },
    _InjectedValues_closure17: function _InjectedValues_closure17(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure18: function _InjectedValues_closure18(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure19: function _InjectedValues_closure19(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure20: function _InjectedValues_closure20(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure21: function _InjectedValues_closure21(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure22: function _InjectedValues_closure22(t0) {
      this.$this = t0;
    },
    _InjectedValues_closure23: function _InjectedValues_closure23(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    _InjectedValues_closure24: function _InjectedValues_closure24(t0, t1) {
      this.$this = t0;
      this.memory = t1;
    },
    DartCallbacks: function DartCallbacks(t0, t1, t2, t3) {
      var _ = this;
      _.functions = t0;
      _.aggregateContexts = t1;
      _.registeredVfs = t2;
      _.openedFiles = t3;
      _.installedUpdateHook = null;
    },
    BasicLock: function BasicLock() {
      this.last = null;
    },
    BasicLock_synchronized_complete: function BasicLock_synchronized_complete(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    TypedDataBuffer: function TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    Uint8Buffer: function Uint8Buffer(t0, t1) {
      this._typed_buffer$_buffer = t0;
      this._typed_buffer$_length = t1;
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1 = A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.JSObject);
      t1 = t1 == null ? null : A._functionToJS1(t1);
      t1 = new A._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    ListToJSArray_get_toJS(_this, $T) {
      return _this;
    },
    JSAnyUtilityExtension_instanceOfString(_this, constructorName) {
      var parts, $constructor, t1, t2, _i, part;
      if (constructorName.length === 0)
        return false;
      parts = constructorName.split(".");
      $constructor = type$.JSObject._as(self);
      for (t1 = parts.length, t2 = type$.nullable_JSObject, _i = 0; _i < t1; ++_i) {
        part = parts[_i];
        $constructor = t2._as($constructor[part]);
        if ($constructor == null)
          return false;
      }
      return _this instanceof type$.JavaScriptFunction._as($constructor);
    },
    JSObjectUnsafeUtilExtension__callMethod(_this, method, arg1, arg2, arg3, arg4) {
      var t1 = _this[method](arg1, arg2, arg3);
      return t1;
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    driveLetterEnd(path, index) {
      var t2, t3, _null = null,
        t1 = path.length,
        index0 = index + 2;
      if (t1 < index0)
        return _null;
      if (!(index >= 0 && index < t1))
        return A.ioore(path, index);
      if (!A.isAlphabetic(path.charCodeAt(index)))
        return _null;
      t2 = index + 1;
      if (!(t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 58) {
        t3 = index + 4;
        if (t1 < t3)
          return _null;
        if (B.JSString_methods.substring$2(path, t2, t3).toLowerCase() !== "%3a")
          return _null;
        index = index0;
      }
      t2 = index + 2;
      if (t1 === t2)
        return t2;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return _null;
      return index + 3;
    },
    sqfliteFfiHandlerIo() {
      return A.throwExpression(A.UnsupportedError$("sqfliteFfiHandlerIo Web not supported"));
    },
    createExceptionRaw(bindings, db, returnCode, operation, previousStatement, statementArgs) {
      var t1 = db.bindings,
        _this = db.db,
        extendedCode = A._asInt(A._asDouble(t1._sqlite3_extended_errcode.call(null, _this))),
        t2 = bindings.bindings;
      return new A.SqliteException(A.WrappedMemory_readString(t1.memory, A._asInt(A._asDouble(t1._sqlite3_errmsg.call(null, _this)))), A.WrappedMemory_readString(t2.memory, A._asInt(A._asDouble(t2._sqlite3_errstr.call(null, extendedCode)))) + " (code " + extendedCode + ")", returnCode, operation, previousStatement, statementArgs);
    },
    throwException(db, returnCode, operation, previousStatement, statementArgs) {
      throw A.wrapException(A.createExceptionRaw(db.bindings, db.database, returnCode, operation, previousStatement, statementArgs));
    },
    GenerateFilename_randomFileName(_this, prefix) {
      var t1, i, t2,
        _s61_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012346789";
      for (t1 = prefix, i = 0; i < 16; ++i, t1 = t2) {
        t2 = _this.nextInt$1(61);
        if (!(t2 < 61))
          return A.ioore(_s61_, t2);
        t2 = t1 + A.Primitives_stringFromCharCode(_s61_.charCodeAt(t2));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ReadBlob_byteBuffer(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ByteBuffer),
        $async$returnValue;
      var $async$ReadBlob_byteBuffer = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(type$.JSObject._as(_this.arrayBuffer()), type$.NativeByteBuffer), $async$ReadBlob_byteBuffer);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$ReadBlob_byteBuffer, $async$completer);
    },
    Lock_Lock() {
      return new A.BasicLock();
    },
    main(args) {
      A.mainSharedWorker(args);
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_0ua;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insertAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    remove$1(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("clear"));
      receiver.length = 0;
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      undefineds = 0;
      if (t1._precomputed1._is(null))
        for (i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    sort$0(receiver) {
      return this.sort$1(receiver, null);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    lastIndexOf$1(receiver, element) {
      var i,
        t1 = receiver.length,
        start = t1 - 1;
      if (start < 0)
        return -1;
      start >= t1;
      for (i = start; i >= 0; --i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    allMatches$1(receiver, string) {
      return new A._StringAllMatchesIterable(string, receiver, 0);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return receiver.substring(0, start) + replacement + receiver.substring(e);
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1(receiver, pattern) {
      return this.startsWith$2(receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), A._instanceType(this)._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(iterable), t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.CastMap.prototype = {
    containsKey$1(key) {
      return this._source.containsKey$1(key);
    },
    $index(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.$index(0, key));
    },
    forEach$1(_, f) {
      this._source.forEach$1(0, new A.CastMap_forEach_closure(this, this.$ti._eval$1("~(3,4)")._as(f)));
    },
    get$keys() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$keys(), t1._precomputed1, t1._rest[2]);
    },
    get$values() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$values(), t1._rest[1], t1._rest[3]);
    },
    get$length(_) {
      var t1 = this._source;
      return t1.get$length(t1);
    },
    get$entries() {
      return this._source.get$entries().map$1$1(0, new A.CastMap_entries_closure(this), this.$ti._eval$1("MapEntry<3,4>"));
    }
  };
  A.CastMap_forEach_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this.f.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1,2)");
    }
  };
  A.CastMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti;
      t1._eval$1("MapEntry<1,2>")._as(e);
      return new A.MapEntry(t1._rest[2]._as(e.key), t1._rest[3]._as(e.value), t1._eval$1("MapEntry<3,4>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<3,4>(MapEntry<1,2>)");
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      var t1 = this.__internal$_string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, A._instanceType(this)._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.IndexedIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    get$first(_) {
      return new A._Record_2(this._start, J.get$first$ax(this._source));
    },
    elementAt$1(_, index) {
      return new A._Record_2(index + this._start, J.elementAt$1$ax(this._source, index));
    },
    contains$1(_, element) {
      return false;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.IndexedIterable(J.skip$1$ax(this._source, count), count + this._start, A._instanceType(this)._eval$1("IndexedIterable<1>"));
    },
    get$iterator(_) {
      return new A.IndexedIterator(J.get$iterator$ax(this._source), this._start, A._instanceType(this)._eval$1("IndexedIterator<1>"));
    }
  };
  A.EfficientLengthIndexedIterable.prototype = {
    contains$1(_, element) {
      return false;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthIndexedIterable(J.skip$1$ax(this._source, count), this._start + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.IndexedIterator.prototype = {
    moveNext$0() {
      if (++this.__internal$_index >= 0 && this._source.moveNext$0())
        return true;
      this.__internal$_index = -2;
      return false;
    },
    get$current() {
      var t1 = this.__internal$_index;
      return t1 >= 0 ? new A._Record_2(this._start + t1, this._source.get$current()) : A.throwExpression(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {};
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A._ListIndicesIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._backedList);
    },
    elementAt$1(_, index) {
      A.IndexError_check(index, J.get$length$asx(this._backedList), this, null, null);
      return index;
    }
  };
  A.ListMapView.prototype = {
    $index(_, key) {
      return this.containsKey$1(key) ? J.$index$asx(this.__internal$_values, A._asInt(key)) : null;
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_values);
    },
    get$values() {
      return A.SubListIterable$(this.__internal$_values, 0, null, this.$ti._precomputed1);
    },
    get$keys() {
      return new A._ListIndicesIterable(this.__internal$_values);
    },
    containsKey$1(key) {
      return A._isInt(key) && key >= 0 && key < J.get$length$asx(this.__internal$_values);
    },
    forEach$1(_, f) {
      var t1, t2, $length, i;
      this.$ti._eval$1("~(int,1)")._as(f);
      t1 = this.__internal$_values;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i) {
        f.call$2(i, t2.$index(t1, i));
        if ($length !== t2.get$length(t1))
          throw A.wrapException(A.ConcurrentModificationError$(t1));
      }
    }
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A._Record_2_file_outFlags.prototype = {$recipe: "+file,outFlags(1,2)", $shape: 2};
  A.ConstantMap.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    get$entries() {
      return new A._SyncStarIterable(this.entries$body$ConstantMap(), A._instanceType(this)._eval$1("_SyncStarIterable<MapEntry<1,2>>"));
    },
    entries$body$ConstantMap() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys(), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = new A.MapEntry(key, t4 == null ? t3._as(t4) : t4, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._values.length;
    },
    get$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$_keys();
      values = this._values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys() {
      return new A._KeysOrValues(this.get$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    },
    get$values() {
      return new A._KeysOrValues(this._values, this.$ti._eval$1("_KeysOrValues<2>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this.__js_helper$_length) {
        _this.set$__js_helper$_current(null);
        return false;
      }
      _this.set$__js_helper$_current(_this._elements[t1]);
      ++_this.__js_helper$_index;
      return true;
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isNotEmpty(_) {
      return this.__js_helper$_length !== 0;
    },
    get$keys() {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 67
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 63
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 33
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$1(_, string) {
      return new A._AllMatchesIterable(this, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {$isMatch: 1, $isRegExpMatch: 1};
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, t4, nextIndex, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          t1 = match._match;
          t4 = t1.index;
          nextIndex = t4 + t1[0].length;
          if (t4 === nextIndex) {
            t1 = false;
            if (t3._nativeRegExp.unicode) {
              t3 = _this._nextIndex;
              t4 = t3 + 1;
              if (t4 < t2) {
                if (!(t3 >= 0 && t3 < t2))
                  return A.ioore(string, t3);
                t3 = string.charCodeAt(t3);
                if (t3 >= 55296 && t3 <= 56319) {
                  if (!(t4 >= 0))
                    return A.ioore(string, t4);
                  t1 = string.charCodeAt(t4);
                  t1 = t1 >= 56320 && t1 <= 57343;
                }
              }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {$isMatch: 1};
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readField$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this._name));
      return t1;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_EOZ;
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_mF8;
    },
    _getUint32$2(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(byteOffset, littleEndian);
    },
    _setUint32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(byteOffset, value, littleEndian);
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_Ymk;
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_Ymk;
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_cot;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_m1p;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_woc;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2mh;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2mh;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_9Bb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isTypedDataList: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_CSc;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isTypedDataList: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 16
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 59
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 4
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 4
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 6
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 27
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 32
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, _null = null, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this.set$_async$_current(nestedIterator.get$current());
              return true;
            } else
              _this.set$_nestedIterator(_null);
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this.set$_nestedIterator(_null);
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this.set$_async$_current(_null);
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this.set$_async$_current(_null);
            _this._body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._body);
        _this._body = t1;
        return 2;
      } else {
        _this.set$_nestedIterator(J.get$iterator$ax(iterable));
        return 2;
      }
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A.Future_Future_closure.prototype = {
    call$0() {
      var e, s, exception, error, stackTrace, replacement, computationResult = null;
      try {
        computationResult = this.computation.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        error = e;
        stackTrace = s;
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        } else if (stackTrace == null)
          stackTrace = A.AsyncError_defaultStackTrace(error);
        this.result._completeError$2(error, stackTrace);
        return;
      }
      this.result._complete$1(computationResult);
    },
    $signature: 0
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        t1.error = theError;
        t1.stackTrace = theStackTrace;
        if (t2 === 0 || _this.eagerError)
          _this._future._completeError$2(theError, theStackTrace);
      } else if (t2 === 0 && !_this.eagerError) {
        t2 = t1.error;
        t2.toString;
        t1 = t1.stackTrace;
        t1.toString;
        _this._future._completeError$2(t2, t1);
      }
    },
    $signature: 39
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var remainingResults, valueList, t1, value0, t3, t4, _i, t5, _this = this,
        t2 = _this.T;
      t2._as(value);
      t3 = _this._box_0;
      remainingResults = --t3.remaining;
      valueList = t3.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (J.$eq$(remainingResults, 0)) {
          t1 = A._setArrayType([], t2._eval$1("JSArray<0>"));
          for (t3 = valueList, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
            value0 = t3[_i];
            t5 = value0;
            if (t5 == null)
              t5 = t2._as(t5);
            J.add$1$ax(t1, t5);
          }
          _this._future._completeWithValue$1(t1);
        }
      } else if (J.$eq$(remainingResults, 0) && !_this.eagerError) {
        t1 = t3.error;
        t1.toString;
        t3 = t3.stackTrace;
        t3.toString;
        _this._future._completeError$2(t1, t3);
      }
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var replacement;
      A.checkNotNullable(error, "error", type$.Object);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeError$2(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    _setChained$1(source) {
      this._state = this._state & 1 | 4;
      this._resultOrListeners = source;
    },
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFutureSync(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      _this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1(value) {
      var t1 = this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        A._Future__chainCoreFutureAsync(value, this);
        return;
      }
      this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 16
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 68
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__chainCoreFutureAsync_closure.prototype = {
    call$0() {
      A._Future__chainCoreFutureSync(this._box_0.source, this.target);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 56
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$length(_) {
      var t2, t3, _this = this, t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      t2 = _this.$ti;
      t3 = t2._eval$1("~(1)?")._as(new A.Stream_length_closure(t1, _this));
      type$.nullable_void_Function._as(new A.Stream_length_closure0(t1, future));
      A._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2._precomputed1);
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      this.$this.$ti._precomputed1._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A._StreamIterator.prototype = {};
  A._ZoneFunction.prototype = {};
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    get$_scheduleMicrotask() {
      return B._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    handleUncaughtError$2(error, stackTrace) {
      A._rootHandleError(error, type$.StackTrace._as(stackTrace));
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2(error, stackTrace) {
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1(f) {
      A._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    },
    createTimer$2(duration, f) {
      return A.Timer__createTimer(duration, type$.void_Function._as(f));
    }
  };
  A._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, _this.$ti._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    contains$1(_, object) {
      var strings, t1;
      if (object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else {
        t1 = this._contains$1(object);
        return t1;
      }
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[B.JSString_methods.get$hashCode(object) & 1073741823], object) >= 0;
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return this.$ti._precomputed1._as(first._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      _this.$ti._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      _this.$ti._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = J.get$hashCode$(element) & 1073741823;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var t1;
      if (object !== "__proto__")
        return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
      else {
        t1 = this._remove$1(object);
        return t1;
      }
    },
    _remove$1(object) {
      var hash, bucket, index, cell,
        rest = this._collection$_rest;
      if (rest == null)
        return false;
      hash = B.JSString_methods.get$hashCode(object) & 1073741823;
      bucket = rest[hash];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      this._collection$_unlinkCell$1(cell);
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      this.$ti._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$.nullable__LinkedHashSetCell._as(table[element]);
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(_this.$ti._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 8
  };
  A.LinkedList.prototype = {
    remove$1(_, entry) {
      this.$ti._precomputed1._as(entry);
      if (entry._list !== this)
        return false;
      this._unlink$1(entry);
      return true;
    },
    contains$1(_, entry) {
      return false;
    },
    get$iterator(_) {
      var _this = this;
      return new A._LinkedListIterator(_this, _this._modificationCount, _this._collection$_first, _this.$ti._eval$1("_LinkedListIterator<1>"));
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$first(_) {
      var t1;
      if (this._collection$_length === 0)
        throw A.wrapException(A.StateError$("No such element"));
      t1 = this._collection$_first;
      t1.toString;
      return t1;
    },
    get$last(_) {
      var t1;
      if (this._collection$_length === 0)
        throw A.wrapException(A.StateError$("No such element"));
      t1 = this._collection$_first._collection$_previous;
      t1.toString;
      return t1;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    _insertBefore$3$updateFirst(entry, newEntry, updateFirst) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("1?")._as(entry);
      t1._precomputed1._as(newEntry);
      if (newEntry._list != null)
        throw A.wrapException(A.StateError$("LinkedListEntry is already in a LinkedList"));
      ++_this._modificationCount;
      newEntry.set$_list(_this);
      if (_this._collection$_length === 0) {
        newEntry.set$_collection$_next(newEntry);
        newEntry.set$_collection$_previous(newEntry);
        _this.set$_collection$_first(newEntry);
        ++_this._collection$_length;
        return;
      }
      t1 = entry._collection$_previous;
      t1.toString;
      newEntry.set$_collection$_previous(t1);
      newEntry.set$_collection$_next(entry);
      t1.set$_collection$_next(newEntry);
      entry.set$_collection$_previous(newEntry);
      ++_this._collection$_length;
    },
    _unlink$1(entry) {
      var t1, next, _this = this, _null = null;
      _this.$ti._precomputed1._as(entry);
      ++_this._modificationCount;
      entry._collection$_next.set$_collection$_previous(entry._collection$_previous);
      t1 = entry._collection$_previous;
      next = entry._collection$_next;
      t1.set$_collection$_next(next);
      --_this._collection$_length;
      entry.set$_collection$_previous(_null);
      entry.set$_collection$_next(_null);
      entry.set$_list(_null);
      if (_this._collection$_length === 0)
        _this.set$_collection$_first(_null);
      else if (entry === _this._collection$_first)
        _this.set$_collection$_first(next);
    },
    set$_collection$_first(_first) {
      this._collection$_first = this.$ti._eval$1("1?")._as(_first);
    }
  };
  A._LinkedListIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this._list;
      if (_this._modificationCount !== t1._modificationCount)
        throw A.wrapException(A.ConcurrentModificationError$(_this));
      if (t1._collection$_length !== 0)
        t1 = _this._visitedFirst && _this._collection$_next === t1.get$first(0);
      else
        t1 = true;
      if (t1) {
        _this.set$_collection$_current(null);
        return false;
      }
      _this._visitedFirst = true;
      _this.set$_collection$_current(_this._collection$_next);
      _this.set$_collection$_next(_this._collection$_next._collection$_next);
      return true;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_collection$_next(_next) {
      this._collection$_next = this.$ti._eval$1("1?")._as(_next);
    },
    $isIterator: 1
  };
  A.LinkedListEntry.prototype = {
    get$previous() {
      var t1 = this._list;
      if (t1 == null || this === t1.get$first(0))
        return null;
      return this._collection$_previous;
    },
    set$_list(_list) {
      this._list = A._instanceType(this)._eval$1("LinkedList<LinkedListEntry.E>?")._as(_list);
    },
    set$_collection$_next(_next) {
      this._collection$_next = A._instanceType(this)._eval$1("LinkedListEntry.E?")._as(_next);
    },
    set$_collection$_previous(_previous) {
      this._collection$_previous = A._instanceType(this)._eval$1("LinkedListEntry.E?")._as(_previous);
    }
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1(receiver, action) {
      var $length, i;
      A.instanceType(receiver)._eval$1("~(ListBase.E)")._as(action);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListBase.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      A.instanceType(receiver)._eval$1("ListBase.E?")._as(fill);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListBase.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    setAll$2(receiver, index, iterable) {
      var t1, index0;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      if (type$.List_dynamic._is(iterable))
        this.setRange$3(receiver, index, index + iterable.length, iterable);
      else
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
          index0 = index + 1;
          this.$indexSet(receiver, index, t1.get$current());
        }
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys()), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    get$entries() {
      return J.map$1$1$ax(this.get$keys(), new A.MapBase_entries_closure(this), A._instanceType(this)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = J.get$iterator$ax(this.get$keys()), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    containsKey$1(key) {
      return J.contains$1$asx(this.get$keys(), key);
    },
    get$length(_) {
      return J.get$length$asx(this.get$keys());
    },
    get$values() {
      return new A._MapBaseValueIterable(this, A._instanceType(this)._eval$1("_MapBaseValueIterable<MapBase.K,MapBase.V>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t2 = t1._contents += t2;
      t1._contents = t2 + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 66
  };
  A.UnmodifiableMapBase.prototype = {};
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$first(_) {
      var t1 = this._collection$_map;
      t1 = t1.$index(0, J.get$first$ax(t1.get$keys()));
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    get$iterator(_) {
      var t1 = this._collection$_map;
      return new A._MapBaseValueIterator(J.get$iterator$ax(t1.get$keys()), t1, this.$ti._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._collection$_keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(_this._collection$_map.$index(0, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A._UnmodifiableMapMixin.prototype = {};
  A.SetBase.prototype = {
    map$1$1(_, f, $T) {
      var t1 = this.$ti;
      return new A.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, this.$ti._precomputed1);
    },
    get$first(_) {
      var t1,
        it = A._LinkedHashSetIterator$(this, this._collection$_modifications, this.$ti._precomputed1);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = it._collection$_current;
      return t1 == null ? it.$ti._precomputed1._as(t1) : t1;
    },
    elementAt$1(_, index) {
      var iterator, skipCount, t1, _this = this;
      A.RangeError_checkNotNegative(index, "index");
      iterator = A._LinkedHashSetIterator$(_this, _this._collection$_modifications, _this.$ti._precomputed1);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0) {
          t1 = iterator._collection$_current;
          return t1 == null ? iterator.$ti._precomputed1._as(t1) : t1;
        }
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, _this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 21
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 21
  };
  A.Base64Codec.prototype = {
    normalize$3(source, start, end) {
      var inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, t3, digit2, char0, value, t4, endLength, $length,
        _s64_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        _s31_ = "Invalid base64 encoding length ",
        t1 = source.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t2 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            if (!(i0 < t1))
              return A.ioore(source, i0);
            digit1 = A.hexDigitValue(source.charCodeAt(i0));
            t3 = i0 + 1;
            if (!(t3 < t1))
              return A.ioore(source, t3);
            digit2 = A.hexDigitValue(source.charCodeAt(t3));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t2))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer._contents.length;
                if (t3 == null)
                  t3 = 0;
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t4 = A.Primitives_stringFromCharCode(char);
            t3._contents += t4;
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = B.JSString_methods.substring$2(source, sliceStart, end);
        t1 = buffer._contents += t1;
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {};
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.Utf8Codec.prototype = {
    decode$1(codeUnits) {
      type$.List_int._as(codeUnits);
      return new A._Utf8Decoder(false)._convertGeneral$4(codeUnits, 0, null, true);
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var t1, t2, encoder, t3,
        stringLength = string.length,
        end = A.RangeError_checkValidRange(0, null, stringLength);
      if (end === 0)
        return new Uint8Array(0);
      t1 = end * 3;
      t2 = new Uint8Array(t1);
      encoder = new A._Utf8Encoder(t2);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t3 = end - 1;
        if (!(t3 >= 0 && t3 < stringLength))
          return A.ioore(string, t3);
        encoder._writeReplacementCharacter$0();
      }
      return new Uint8Array(t2.subarray(0, A._checkValidRange(0, encoder._bufferIndex, t1)));
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, t5, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t3))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t4 = _this._bufferIndex;
          if (t4 >= t2)
            break;
          _this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else {
          t4 = codeUnit & 64512;
          if (t4 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            t4 = stringIndex + 1;
            if (!(t4 < t3))
              return A.ioore(str, t4);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t4)))
              stringIndex = t4;
          } else if (t4 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t4 = _this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            _this._bufferIndex = t5;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t5 + 1;
            t1[t5] = codeUnit & 63 | 128;
          } else {
            t4 = _this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 12 | 224;
            t4 = _this._bufferIndex = t5 + 1;
            if (!(t5 < t2))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A._Utf8Decoder.prototype = {
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!t1)
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              t3 = A.Primitives_stringFromCharCode(char);
              buffer._contents += t3;
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    break;
                  case 65:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    --i;
                    break;
                  default:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    t3 = buffer._contents += t3;
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                t3 = A.Primitives_stringFromCharCode(bytes[m]);
                buffer._contents += t3;
              }
            else {
              t3 = A.String_String$fromCharCodes(bytes, i, markEnd);
              buffer._contents += t3;
            }
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2) {
          t1 = A.Primitives_stringFromCharCode(_65533);
          buffer._contents += t1;
        } else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) >>> 0 !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, t2, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.length;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t2 = yUsed0 + 2;
      nyDigits = new Uint16Array(t2);
      if (!(yUsed0 >= 0 && yUsed0 < t2))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits._value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed._value = resultUsed1;
      $._BigIntImpl____lastRemUsed._value = yUsed0;
      $._BigIntImpl____lastRem_nsh._value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 1
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 11
  };
  A._FinalizationRegistryWrapper.prototype = {
    detach$1(detachToken) {
      var t1 = this._registry;
      if (t1 != null)
        t1.unregister(detachToken);
    }
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, prefix, postfix, end, start,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        prefix = "";
        if (lineEnd - lineStart > 78) {
          postfix = "...";
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
            }
            prefix = "...";
          }
        } else {
          end = lineEnd;
          start = lineStart;
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 58
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 28
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 1
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwLateFieldADI("_text");
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, t1, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        t1 = pathToSplit.length;
        if (t1 !== 0) {
          if (0 >= t1)
            return A.ioore(pathToSplit, 0);
          t1 = pathToSplit.charCodeAt(0) === 47;
        } else
          t1 = false;
        if (t1)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwLateFieldADI("pathSegments");
        _this.set$___Uri_pathSegments_FI(result);
        value = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$isAbsolute() {
      if (this.scheme !== "") {
        var t1 = this._fragment;
        t1 = (t1 == null ? "" : t1) === "";
      } else
        t1 = false;
      return t1;
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      if (_this._host != null && _this.get$host() !== "")
        A.throwExpression(A.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      pathSegments = _this.get$pathSegments();
      A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
      t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      t1 = false;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port() === other.get$port())
                  if (_this.path === other.get$path()) {
                    t2 = _this._query;
                    t3 = t2 == null;
                    if (!t3 === other.get$hasQuery()) {
                      if (t3)
                        t2 = "";
                      if (t2 === other.get$query()) {
                        t2 = _this._fragment;
                        t3 = t2 == null;
                        if (!t3 === other.get$hasFragment()) {
                          t1 = t3 ? "" : t2;
                          t1 = t1 === other.get$fragment();
                        }
                      }
                    }
                  }
      return t1;
    },
    set$___Uri_pathSegments_FI(___Uri_pathSegments_FI) {
      this.___Uri_pathSegments_FI = type$.List_String._as(___Uri_pathSegments_FI);
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, B.List_42A, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, B.List_M2I, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables;
      if (!(state < t1.length))
        return A.ioore(t1, state);
      t1 = t1[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 31
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = chars.charCodeAt(i) ^ 96;
        if (!(t2 < 96))
          return A.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 17
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n,
        t1 = range.length;
      if (0 >= t1)
        return A.ioore(range, 0);
      i = range.charCodeAt(0);
      if (1 >= t1)
        return A.ioore(range, 1);
      n = range.charCodeAt(1);
      for (; i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (!(t1 < 96))
          return A.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 17
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$isAbsolute() {
      return this._schemeEnd > 0 && this._fragmentStart >= this._uri.length;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path() {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.Expando.prototype = {
    toString$0(_) {
      return "Expando:null";
    }
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 6
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 6
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    }
  };
  A._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    nextInt$1(max) {
      var byteCount, t1, start, randomLimit, t2, t3, t4, random, result, _null = null;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(new A.RangeError(_null, _null, false, _null, _null, "max must be in range 0 < max \u2264 2^32, was " + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      B.NativeByteData_methods._setUint32$3(t1, 0, 0, false);
      start = 4 - byteCount;
      randomLimit = A._asInt(Math.pow(256, byteCount));
      for (t2 = max - 1, t3 = (max & t2) === 0; true;) {
        t4 = t1.buffer;
        t4 = new Uint8Array(t4, start, byteCount);
        crypto.getRandomValues(t4);
        random = B.NativeByteData_methods._getUint32$2(t1, 0, false);
        if (t3)
          return (random & t2) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    },
    $isRandom: 1
  };
  A.NonGrowableListMixin.prototype = {};
  A.UnmodifiableMapMixin.prototype = {};
  A.Context.prototype = {
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(0), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = "" + parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var t2, i, start, previous, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (t2 = path.length, i = 0; i < root; ++i) {
            if (!(i < t2))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 47)
              return true;
          }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        if (!(i >= 0))
          return A.ioore(t2, i);
        codeUnit = t2.charCodeAt(i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 36
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 57
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    }
  };
  A.ParsedPath.prototype = {
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        t1 = _this.parts;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0() {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t3 = J.getInterceptor$(part);
        if (!(t3.$eq(part, ".") || t3.$eq(part, "")))
          if (t3.$eq(part, "..")) {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      t1 = _this.style;
      _this.set$separators(A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String));
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows()) {
        t2.toString;
        _this.root = A.stringReplaceAllUnchecked(t2, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var i, t2, t3, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (i = 0; t2 = _this.parts, i < t2.length; ++i, t1 = t2) {
        t3 = _this.separators;
        if (!(i < t3.length))
          return A.ioore(t3, i);
        t2 = t1 + t3[i] + A.S(t2[i]);
      }
      t1 += B.JSArray_methods.get$last(_this.separators);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name();
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(path, t2);
        t2 = path.charCodeAt(t2) !== 47;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      if (t1)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = path.charCodeAt(i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          t1 = A.driveLetterEnd(path, index + 1);
          return t1 == null ? index : t1;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      return t1;
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      t2 = path.charCodeAt(t2);
      return !(t2 === 47 || t2 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      if (path.charCodeAt(0) === 92) {
        if (t1 >= 2) {
          if (1 >= t1)
            return A.ioore(path, 1);
          t2 = path.charCodeAt(1) !== 92;
        } else
          t2 = true;
        if (t2)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(path.charCodeAt(0)))
        return 0;
      if (path.charCodeAt(1) !== 58)
        return 0;
      t1 = path.charCodeAt(2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.argumentsToString_closure.prototype = {
    call$1(e) {
      return A.argumentToString(e);
    },
    $signature: 61
  };
  A.DatabaseException.prototype = {
    toString$0(_) {
      return "DatabaseException(" + this._exception$_message + ")";
    }
  };
  A.SqfliteDatabaseException.prototype = {
    toString$0(_) {
      return this.super$DatabaseException$toString(0);
    },
    getResultCode$0() {
      var t1 = this._resultCode;
      if (t1 == null) {
        t1 = new A.SqfliteDatabaseException_getResultCode_closure(this).call$0();
        this.set$_resultCode(t1);
      }
      return t1;
    },
    set$_resultCode(_resultCode) {
      this._resultCode = A._asIntQ(_resultCode);
    }
  };
  A.SqfliteDatabaseException_getResultCode_closure.prototype = {
    call$0() {
      var t1 = new A.SqfliteDatabaseException_getResultCode_closure_findCode(this.$this._exception$_message.toLowerCase()),
        code = t1.call$1("(sqlite code ");
      if (code != null)
        return code;
      code = t1.call$1("(code ");
      if (code != null)
        return code;
      code = t1.call$1("code=");
      if (code != null)
        return code;
      return null;
    },
    $signature: 25
  };
  A.SqfliteDatabaseException_getResultCode_closure_findCode.prototype = {
    call$1(patternPrefix) {
      var code, endIndex, resultCode, t2, exception,
        t1 = this.message,
        index = B.JSString_methods.indexOf$1(t1, patternPrefix);
      if (!J.$eq$(index, -1))
        try {
          t2 = index;
          if (typeof t2 !== "number")
            return t2.$add();
          t2 = B.JSString_methods.trim$0(B.JSString_methods.substring$1(t1, t2 + patternPrefix.length)).split(" ");
          if (0 >= t2.length)
            return A.ioore(t2, 0);
          code = t2[0];
          endIndex = J.indexOf$1$s(code, ")");
          if (!J.$eq$(endIndex, -1))
            code = J.substring$2$s(code, 0, endIndex);
          resultCode = A.Primitives_parseInt(code, null);
          if (resultCode != null)
            return resultCode;
        } catch (exception) {
        }
      return null;
    },
    $signature: 26
  };
  A.DatabaseTracker.prototype = {};
  A.FfiMethodCall.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + "(" + this.method + ", " + A.S(this.$arguments) + ")";
    }
  };
  A.FfiMethodResponse.prototype = {};
  A.SqfliteFfiException.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = type$.String,
        t2 = type$.nullable_Object,
        map = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2),
        t3 = _this.details;
      if (t3 != null) {
        t1 = A.LinkedHashMap_LinkedHashMap$from(t3, t1, t2);
        t2 = A._instanceType(t1);
        t3 = t2._eval$1("Object?");
        t3._as(t1.remove$1(0, "arguments"));
        t3._as(t1.remove$1(0, "sql"));
        if (t1.get$isNotEmpty(0))
          map.$indexSet(0, "details", new A.CastMap(t1, t2._eval$1("CastMap<MapBase.K,MapBase.V,String,Object?>")));
      }
      t1 = _this.getResultCode$0() == null ? "" : ": " + A.S(_this.getResultCode$0()) + ", ";
      t1 = "" + ("SqfliteFfiException(" + _this.code + t1 + ", " + _this._exception$_message + "})");
      t2 = _this.sql;
      if (t2 != null) {
        t1 += " sql " + t2;
        t2 = _this.sqlArguments;
        t2 = t2 == null ? null : !t2.get$isEmpty(t2);
        if (t2 === true) {
          t2 = _this.sqlArguments;
          t2.toString;
          t2 = t1 + (" args " + A.argumentsToString(t2));
          t1 = t2;
        }
      } else
        t1 += " " + _this.super$SqfliteDatabaseException$toString(0);
      if (map.__js_helper$_length !== 0)
        t1 += " " + map.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$details(details) {
      this.details = type$.nullable_Map_of_String_and_nullable_Object._as(details);
    }
  };
  A.SqfliteFfiHandler.prototype = {};
  A.SqfliteFfiHandlerNonImplementedMixin.prototype = {};
  A.SqfliteFfiOperation.prototype = {
    toString$0(_) {
      var t1 = this.method,
        t2 = this.sql,
        t3 = this.sqlArguments,
        t4 = t3 == null ? null : !t3.get$isEmpty(t3);
      if (t4 === true) {
        t3.toString;
        t3 = " " + A.argumentsToString(t3);
      } else
        t3 = "";
      return A.S(t1) + " " + (A.S(t2) + t3);
    },
    set$sqlArguments(sqlArguments) {
      this.sqlArguments = type$.nullable_List_nullable_Object._as(sqlArguments);
    }
  };
  A._SqfliteFfiCursorInfo.prototype = {};
  A._QueuedHandler.prototype = {
    run$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$self = this, result, e, exception, $async$exception;
      var $async$run$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.handler.call$0(), $async$run$0);
            case 6:
              // returning from await.
              result = $async$result;
              $async$self._completer.complete$1(result);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              $async$self._completer.completeError$1(e);
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$0, $async$completer);
    }
  };
  A.SqfliteFfiDatabase.prototype = {
    toDebugMap$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["path", _this.path, "id", _this.id, "readOnly", _this.readOnly, "singleInstance", _this.singleInstance], type$.String, type$.nullable_Object);
    },
    _getLastInsertId$0() {
      var t1, _this0, id, _this = this;
      if (_this._getUpdatedRows$0() === 0)
        return null;
      t1 = _this._ffiDb.database;
      _this0 = type$.JavaScriptBigInt._as(t1.bindings._sqlite3_last_insert_rowid.call(null, t1.db));
      id = A._asInt(A._asDouble(self.Number(_this0)));
      if (_this.logLevel >= 1)
        A.print("[sqflite-" + _this.id + "] Inserted " + id);
      return id;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this.toDebugMap$0());
    },
    close$0() {
      var _this = this;
      _this._cancelQueuedHandlers$0();
      _this.logResult$1$result("Closing database " + _this.toString$0(0));
      _this._ffiDb.dispose$0();
    },
    _ffiArguments$1(sqlArguments) {
      var t1 = sqlArguments == null ? null : new A.CastList(sqlArguments._source, sqlArguments.$ti._eval$1("CastList<1,Object?>"));
      return t1 == null ? B.List_empty0 : t1;
    },
    handleExecute$2$sql$sqlArguments(sql, sqlArguments) {
      return this._handlerLock.synchronized$1$1(new A.SqfliteFfiDatabase_handleExecute_closure(this, sql, sqlArguments), type$.void);
    },
    _handleExecute$2$sql$sqlArguments(sql, sqlArguments) {
      return this._handleExecute$body$SqfliteFfiDatabase(sql, sqlArguments);
    },
    _handleExecute$body$SqfliteFfiDatabase(sql, sqlArguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$next = [], $async$self = this, preparedStatement, t1, t2, resultDML;
      var $async$_handleExecute$2$sql$sqlArguments = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.logSql$2$sql$sqlArguments(sql, sqlArguments);
              if (B.JSString_methods.startsWith$1(sql, "PRAGMA sqflite -- ")) {
                if (sql === "PRAGMA sqflite -- db_config_defensive_off") {
                  t1 = $async$self._ffiDb;
                  t2 = t1.database;
                  resultDML = t2.bindings.sqlite3_db_config$3(t2.db, 1010, 0);
                  if (resultDML !== 0)
                    A.throwException(t1, resultDML, null, null, null);
                }
              } else {
                t1 = sqlArguments == null ? null : !sqlArguments.get$isEmpty(sqlArguments);
                t2 = $async$self._ffiDb;
                if (t1 === true) {
                  preparedStatement = t2.prepare$1(sql);
                  try {
                    preparedStatement.executeWith$1(new A.IndexedParameters($async$self._ffiArguments$1(sqlArguments)));
                    // goto return
                    $async$goto = 1;
                    break;
                  } finally {
                    preparedStatement.dispose$0();
                  }
                } else
                  t2.execute$1(sql);
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleExecute$2$sql$sqlArguments, $async$completer);
    },
    logResult$1$result(result) {
      if (result != null && this.logLevel >= 1)
        A.print("[sqflite-" + this.id + "] " + A.S(result));
    },
    logSql$2$sql$sqlArguments(sql, sqlArguments) {
      var t1;
      if (this.logLevel >= 1) {
        t1 = sqlArguments == null ? null : !sqlArguments.get$isEmpty(sqlArguments);
        t1 = t1 === true ? " " + A.S(sqlArguments) : "";
        A.print("[sqflite-" + this.id + "] " + sql + t1);
        this.logResult$1$result(null);
      }
    },
    _runQueuedHandlers$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_runQueuedHandlers$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self._noTransactionHandlerQueue.length !== 0 ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait($async$self._queuedHandlerLock.synchronized$1$1(new A.SqfliteFfiDatabase__runQueuedHandlers_closure($async$self), type$.Null), $async$_runQueuedHandlers$0);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runQueuedHandlers$0, $async$completer);
    },
    _cancelQueuedHandlers$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_cancelQueuedHandlers$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = $async$self._noTransactionHandlerQueue.length !== 0 ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait($async$self._queuedHandlerLock.synchronized$1$1(new A.SqfliteFfiDatabase__cancelQueuedHandlers_closure($async$self), type$.Null), $async$_cancelQueuedHandlers$0);
            case 4:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_cancelQueuedHandlers$0, $async$completer);
    },
    handleTransactionId$2(transactionId, handler) {
      return this.handleTransactionId$body$SqfliteFfiDatabase(transactionId, type$.Future_dynamic_Function._as(handler));
    },
    handleTransactionId$body$SqfliteFfiDatabase(transactionId, handler) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, transactionClosed, exception, transactionClosed0, exception0, t1, $async$exception;
      var $async$handleTransactionId$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._currentTransactionId;
              $async$goto = t1 == null ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return A._asyncAwait(handler.call$0(), $async$handleTransactionId$2);
            case 6:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = transactionId === t1 || transactionId === -1 ? 7 : 9;
              break;
            case 7:
              // then
              $async$handler = 11;
              $async$goto = 14;
              return A._asyncAwait(handler.call$0(), $async$handleTransactionId$2);
            case 14:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 12;
              break;
              $async$next.push(13);
              // goto finally
              $async$goto = 12;
              break;
            case 11:
              // catch
              $async$handler = 10;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.SqliteException) {
                e = t1;
                transactionClosed = false;
                try {
                  if ($async$self._currentTransactionId != null) {
                    t1 = $async$self._ffiDb.database;
                    transactionClosed0 = A._asInt(A._asDouble(t1.bindings._sqlite3_get_autocommit.call(null, t1.db))) !== 0;
                  } else
                    transactionClosed0 = false;
                  transactionClosed = transactionClosed0;
                } catch (exception0) {
                }
                if (A.boolConversionCheck(transactionClosed)) {
                  $async$self._currentTransactionId = null;
                  t1 = A._ffiWrapSqliteException(e);
                  t1._transactionClosed = true;
                  throw A.wrapException(t1);
                } else
                  throw $async$exception;
              } else
                throw $async$exception;
              $async$next.push(13);
              // goto finally
              $async$goto = 12;
              break;
            case 10:
              // uncaught
              $async$next = [2];
            case 12:
              // finally
              $async$handler = 2;
              if ($async$self._currentTransactionId == null)
                $async$self._runQueuedHandlers$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 13:
              // after finally
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              t1 = new A._Future($.Zone__current, type$._Future_void);
              B.JSArray_methods.add$1($async$self._noTransactionHandlerQueue, new A._QueuedHandler(handler, new A._AsyncCompleter(t1, type$._AsyncCompleter_void)));
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // join
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleTransactionId$2, $async$completer);
    },
    handleInsert$2$sql$sqlArguments(sql, sqlArguments) {
      return this._handlerLock.synchronized$1$1(new A.SqfliteFfiDatabase_handleInsert_closure(this, sql, sqlArguments), type$.nullable_int);
    },
    _handleInsert$2$sql$sqlArguments(sql, sqlArguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_int),
        $async$returnValue, $async$self = this, id;
      var $async$_handleInsert$2$sql$sqlArguments = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.readOnly)
                A.throwExpression(A.SqfliteFfiException$("sqlite_error", null, "Database readonly", null));
              $async$goto = 3;
              return A._asyncAwait($async$self._handleExecute$2$sql$sqlArguments(sql, sqlArguments), $async$_handleInsert$2$sql$sqlArguments);
            case 3:
              // returning from await.
              id = $async$self._getLastInsertId$0();
              if ($async$self.logLevel >= 1)
                A.print("[sqflite-" + $async$self.id + "] Inserted id " + A.S(id));
              $async$returnValue = id;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleInsert$2$sql$sqlArguments, $async$completer);
    },
    handleUpdate$2$sql$sqlArguments(sql, sqlArguments) {
      return this._handlerLock.synchronized$1$1(new A.SqfliteFfiDatabase_handleUpdate_closure(this, sql, sqlArguments), type$.int);
    },
    _handleUpdate$2$sql$sqlArguments(sql, sqlArguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$self = this;
      var $async$_handleUpdate$2$sql$sqlArguments = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.readOnly)
                A.throwExpression(A.SqfliteFfiException$("sqlite_error", null, "Database readonly", null));
              $async$goto = 3;
              return A._asyncAwait($async$self._handleExecute$2$sql$sqlArguments(sql, sqlArguments), $async$_handleUpdate$2$sql$sqlArguments);
            case 3:
              // returning from await.
              $async$returnValue = $async$self._getUpdatedRows$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleUpdate$2$sql$sqlArguments, $async$completer);
    },
    handleQuery$3$pageSize$sql$sqlArguments(pageSize, sql, sqlArguments) {
      return this._handlerLock.synchronized$1$1(new A.SqfliteFfiDatabase_handleQuery_closure(this, pageSize, sqlArguments, sql), type$.dynamic);
    },
    _handleQuery$2$sql$sqlArguments(sql, sqlArguments) {
      return this._handleQuery$body$SqfliteFfiDatabase(sql, sqlArguments);
    },
    _handleQuery$body$SqfliteFfiDatabase(sql, sqlArguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$next = [], $async$self = this, result, t1, t2, preparedStatement;
      var $async$_handleQuery$2$sql$sqlArguments = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              preparedStatement = $async$self._ffiDb.prepare$1(sql);
              try {
                $async$self.logSql$2$sql$sqlArguments(sql, sqlArguments);
                t1 = preparedStatement;
                t2 = $async$self._ffiArguments$1(sqlArguments);
                if (t1.finalizable._closed)
                  A.throwExpression(A.StateError$(string$.Tried_));
                t1._reset$0();
                t1._bindParams$1(new A.IndexedParameters(t2));
                result = t1._selectResults$0();
                $async$self.logResult$1$result("Found " + result.rows.length + " rows");
                t1 = result;
                t1 = A.LinkedHashMap_LinkedHashMap$_literal(["columns", t1._columnNames, "rows", t1.rows], type$.String, type$.nullable_Object);
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              } finally {
                preparedStatement.dispose$0();
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleQuery$2$sql$sqlArguments, $async$completer);
    },
    _resultFromCursor$1(cursorInfo) {
      var cursor, columns, rows, row, pack, t1, t2, exception,
        cursorId0 = cursorInfo.id,
        cursorId = cursorId0;
      try {
        cursor = cursorInfo.cursor;
        columns = cursor._columnNames;
        rows = A._setArrayType([], type$.JSArray_List_nullable_Object);
        for (t1 = cursorInfo.pageSize; true;) {
          if (cursor.moveNext$0()) {
            t2 = cursor.___ActiveCursorIterator_current_A;
            t2 === $ && A.throwLateFieldNI("current");
            row = t2;
            J.add$1$ax(rows, row._data);
          } else {
            cursorInfo.atEnd = true;
            break;
          }
          if (J.get$length$asx(rows) >= t1)
            break;
        }
        pack = A.LinkedHashMap_LinkedHashMap$_literal(["columns", columns, "rows", rows], type$.String, type$.nullable_Object);
        if (!cursorInfo.atEnd)
          J.$indexSet$ax(pack, "cursorId", cursorId0);
        return pack;
      } catch (exception) {
        this._closeCursor$1(cursorId);
        throw exception;
      } finally {
        if (cursorInfo.atEnd)
          this._closeCursor$1(cursorId);
      }
    },
    _handleQueryByPage$3$pageSize$sql$sqlArguments(pageSize, sql, sqlArguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Object),
        $async$returnValue, $async$self = this, t1, t2, cursor, cursorInfo, preparedStatement;
      var $async$_handleQueryByPage$3$pageSize$sql$sqlArguments = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              preparedStatement = $async$self._ffiDb.prepare$1(sql);
              $async$self.logSql$2$sql$sqlArguments(sql, sqlArguments);
              t1 = $async$self._ffiArguments$1(sqlArguments);
              t2 = preparedStatement.finalizable;
              if (t2._closed)
                A.throwExpression(A.StateError$(string$.Tried_));
              preparedStatement._reset$0();
              preparedStatement._bindParams$1(new A.IndexedParameters(t1));
              t1 = preparedStatement.get$_statement$_columnNames();
              preparedStatement.get$_tableNames();
              cursor = new A._ActiveCursorIterator(preparedStatement, t1, B.Map_empty);
              cursor._calculateIndexes$0();
              t2._inResetState = false;
              preparedStatement._currentCursor = cursor;
              t2 = ++$async$self._lastCursorId;
              cursorInfo = new A._SqfliteFfiCursorInfo(t2, preparedStatement, pageSize, cursor);
              $async$self._cursors.$indexSet(0, t2, cursorInfo);
              $async$returnValue = $async$self._resultFromCursor$1(cursorInfo);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleQueryByPage$3$pageSize$sql$sqlArguments, $async$completer);
    },
    handleQueryCursorNext$2$cancel$cursorId(cancel, cursorId) {
      return this._handlerLock.synchronized$1$1(new A.SqfliteFfiDatabase_handleQueryCursorNext_closure(this, cursorId, cancel), type$.dynamic);
    },
    _handleQueryCursorNext$2$cancel$cursorId(cancel, cursorId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Object),
        $async$returnValue, $async$self = this, t1, cursorInfo;
      var $async$_handleQueryCursorNext$2$cancel$cursorId = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.logLevel >= 2) {
                t1 = cancel === true ? " (cancel)" : "";
                $async$self.logResult$1$result("queryCursorNext " + cursorId + t1);
              }
              cursorInfo = $async$self._cursors.$index(0, cursorId);
              if (cancel === true) {
                $async$self._closeCursor$1(cursorId);
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if (cursorInfo == null)
                throw A.wrapException(A.StateError$("Cursor " + cursorId + " not found"));
              $async$returnValue = $async$self._resultFromCursor$1(cursorInfo);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleQueryCursorNext$2$cancel$cursorId, $async$completer);
    },
    _closeCursor$1(cursorId) {
      var info = this._cursors.remove$1(0, cursorId);
      if (info != null) {
        if (this.logLevel >= 2)
          this.logResult$1$result("Closing cursor " + cursorId);
        info.statement.dispose$0();
      }
    },
    _getUpdatedRows$0() {
      var t1 = this._ffiDb.database,
        rowCount = A._asInt(A._asDouble(t1.bindings._sqlite3_changes.call(null, t1.db)));
      if (this.logLevel >= 1)
        A.print("[sqflite-" + this.id + "] Modified " + rowCount + " rows");
      return rowCount;
    },
    handleBatch$3$continueOnError$noResult$operations(continueOnError, noResult, operations) {
      return this._handlerLock.synchronized$1$1(new A.SqfliteFfiDatabase_handleBatch_closure(this, type$.List_SqfliteFfiOperation._as(operations), noResult, continueOnError), type$.dynamic);
    },
    _handleBatch$3$continueOnError$noResult$operations(continueOnError, noResult, operations) {
      return this._handleBatch$body$SqfliteFfiDatabase(continueOnError, noResult, type$.List_SqfliteFfiOperation._as(operations));
    },
    _handleBatch$body$SqfliteFfiDatabase(continueOnError, noResult, operations) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, operation, addResult, addError, e, st, e0, result, e1, e2, t1, t2, t3, t4, _this, t5, _i, t6, exception, rowCount, line, toZone, _box_0, $async$exception, $async$exception1, $async$exception2, $async$exception3;
      var $async$_handleBatch$3$continueOnError$noResult$operations = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              _box_0.results = null;
              t1 = !noResult;
              if (t1)
                _box_0.results = A._setArrayType([], type$.JSArray_Map_of_String_and_nullable_Object);
              t2 = operations.length, t3 = $async$self.logLevel >= 1, t4 = $async$self._ffiDb.database, _this = t4.db, t4 = t4.bindings._sqlite3_changes, t5 = "[sqflite-" + $async$self.id + "] Modified ", _i = 0;
            case 3:
              // for condition
              if (!(_i < operations.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              operation = operations[_i];
              addResult = new A.SqfliteFfiDatabase__handleBatch_addResult(_box_0, noResult);
              addError = new A.SqfliteFfiDatabase__handleBatch_addError(_box_0, $async$self, operation, continueOnError, noResult, new A.SqfliteFfiDatabase__handleBatch_getErrorMap());
            case 6:
              // switch
              switch (operation.method) {
                case "insert":
                  // goto case
                  $async$goto = 8;
                  break;
                case "execute":
                  // goto case
                  $async$goto = 9;
                  break;
                case "query":
                  // goto case
                  $async$goto = 10;
                  break;
                case "update":
                  // goto case
                  $async$goto = 11;
                  break;
                default:
                  // goto default
                  $async$goto = 12;
                  break;
              }
              break;
            case 8:
              // case
              $async$handler = 14;
              t6 = operation.sql;
              t6.toString;
              $async$goto = 17;
              return A._asyncAwait($async$self._handleExecute$2$sql$sqlArguments(t6, operation.sqlArguments), $async$_handleBatch$3$continueOnError$noResult$operations);
            case 17:
              // returning from await.
              if (t1)
                addResult.call$1($async$self._getLastInsertId$0());
              $async$handler = 2;
              // goto after finally
              $async$goto = 16;
              break;
            case 14:
              // catch
              $async$handler = 13;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              addError.call$2(e, st);
              // goto after finally
              $async$goto = 16;
              break;
            case 13:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 16:
              // after finally
              // goto after switch
              $async$goto = 7;
              break;
            case 9:
              // case
              $async$handler = 19;
              t6 = operation.sql;
              t6.toString;
              $async$goto = 22;
              return A._asyncAwait($async$self._handleExecute$2$sql$sqlArguments(t6, operation.sqlArguments), $async$_handleBatch$3$continueOnError$noResult$operations);
            case 22:
              // returning from await.
              addResult.call$1(null);
              $async$handler = 2;
              // goto after finally
              $async$goto = 21;
              break;
            case 19:
              // catch
              $async$handler = 18;
              $async$exception1 = $async$currentError;
              e0 = A.unwrapException($async$exception1);
              addError.call$1(e0);
              // goto after finally
              $async$goto = 21;
              break;
            case 18:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 21:
              // after finally
              // goto after switch
              $async$goto = 7;
              break;
            case 10:
              // case
              $async$handler = 24;
              t6 = operation.sql;
              t6.toString;
              $async$goto = 27;
              return A._asyncAwait($async$self._handleQuery$2$sql$sqlArguments(t6, operation.sqlArguments), $async$_handleBatch$3$continueOnError$noResult$operations);
            case 27:
              // returning from await.
              result = $async$result;
              addResult.call$1(result);
              $async$handler = 2;
              // goto after finally
              $async$goto = 26;
              break;
            case 24:
              // catch
              $async$handler = 23;
              $async$exception2 = $async$currentError;
              e1 = A.unwrapException($async$exception2);
              addError.call$1(e1);
              // goto after finally
              $async$goto = 26;
              break;
            case 23:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 26:
              // after finally
              // goto after switch
              $async$goto = 7;
              break;
            case 11:
              // case
              $async$handler = 29;
              t6 = operation.sql;
              t6.toString;
              $async$goto = 32;
              return A._asyncAwait($async$self._handleExecute$2$sql$sqlArguments(t6, operation.sqlArguments), $async$_handleBatch$3$continueOnError$noResult$operations);
            case 32:
              // returning from await.
              if (t1) {
                rowCount = A._asInt(A._asDouble(t4.call(null, _this)));
                if (t3) {
                  line = t5 + rowCount + " rows";
                  toZone = $.printToZone;
                  if (toZone == null)
                    A.printString(line);
                  else
                    toZone.call$1(line);
                }
                addResult.call$1(rowCount);
              }
              $async$handler = 2;
              // goto after finally
              $async$goto = 31;
              break;
            case 29:
              // catch
              $async$handler = 28;
              $async$exception3 = $async$currentError;
              e2 = A.unwrapException($async$exception3);
              addError.call$1(e2);
              // goto after finally
              $async$goto = 31;
              break;
            case 28:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 31:
              // after finally
              // goto after switch
              $async$goto = 7;
              break;
            case 12:
              // default
              throw A.wrapException("batch operation " + A.S(operation.method) + " not supported");
            case 7:
              // after switch
            case 4:
              // for update
              operations.length === t2 || (0, A.throwConcurrentModificationError)(operations), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = _box_0.results;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleBatch$3$continueOnError$noResult$operations, $async$completer);
    }
  };
  A.SqfliteFfiDatabase_handleExecute_closure.prototype = {
    call$0() {
      return this.$this._handleExecute$2$sql$sqlArguments(this.sql, this.sqlArguments);
    },
    $signature: 2
  };
  A.SqfliteFfiDatabase__runQueuedHandlers_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, queuedHandler;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this, t2 = t1._noTransactionHandlerQueue;
            case 2:
              // for condition
              // trivial condition
              $async$goto = t2.length !== 0 ? 4 : 6;
              break;
            case 4:
              // then
              queuedHandler = B.JSArray_methods.get$first(t2);
              if (t1._currentTransactionId != null) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 7;
              return A._asyncAwait(queuedHandler.run$0(), $async$call$0);
            case 7:
              // returning from await.
              B.JSArray_methods.removeAt$1(t2, 0);
              // goto join
              $async$goto = 5;
              break;
            case 6:
              // else
              // goto after for
              $async$goto = 3;
              break;
            case 5:
              // join
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 19
  };
  A.SqfliteFfiDatabase__cancelQueuedHandlers_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, _i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              for (t1 = $async$self.$this._noTransactionHandlerQueue, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
                t1[_i]._completer.completeError$1(new A.StateError("Database has been closed"));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 19
  };
  A.SqfliteFfiDatabase_handleInsert_closure.prototype = {
    call$0() {
      return this.$this._handleInsert$2$sql$sqlArguments(this.sql, this.sqlArguments);
    },
    $signature: 29
  };
  A.SqfliteFfiDatabase_handleUpdate_closure.prototype = {
    call$0() {
      return this.$this._handleUpdate$2$sql$sqlArguments(this.sql, this.sqlArguments);
    },
    $signature: 30
  };
  A.SqfliteFfiDatabase_handleQuery_closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.pageSize,
        t2 = _this.$this,
        t3 = _this.sqlArguments,
        t4 = _this.sql;
      if (t1 == null)
        return t2._handleQuery$2$sql$sqlArguments(t4, t3);
      else
        return t2._handleQueryByPage$3$pageSize$sql$sqlArguments(t1, t4, t3);
    },
    $signature: 20
  };
  A.SqfliteFfiDatabase_handleQueryCursorNext_closure.prototype = {
    call$0() {
      return this.$this._handleQueryCursorNext$2$cancel$cursorId(this.cancel, this.cursorId);
    },
    $signature: 20
  };
  A.SqfliteFfiDatabase_handleBatch_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._handleBatch$3$continueOnError$noResult$operations(_this.continueOnError, _this.noResult, _this.operations);
    },
    $signature: 5
  };
  A.SqfliteFfiDatabase__handleBatch_getErrorMap.prototype = {
    call$1(e) {
      var t4, t5,
        t1 = type$.String,
        t2 = type$.nullable_Object,
        t3 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      t3.$indexSet(0, "message", e.toString$0(0));
      t4 = e.sql;
      if (t4 != null || e.sqlArguments != null) {
        t5 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        t5.$indexSet(0, "sql", t4);
        t4 = e.sqlArguments;
        if (t4 != null)
          t5.$indexSet(0, "arguments", t4);
        t3.$indexSet(0, "data", t5);
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["error", t3], t1, t2);
    },
    $signature: 24
  };
  A.SqfliteFfiDatabase__handleBatch_addResult.prototype = {
    call$1(result) {
      var t1;
      if (!this.noResult) {
        t1 = this._box_0.results;
        t1.toString;
        B.JSArray_methods.add$1(t1, A.LinkedHashMap_LinkedHashMap$_literal(["result", result], type$.String, type$.nullable_Object));
      }
    },
    $signature: 6
  };
  A.SqfliteFfiDatabase__handleBatch_addError.prototype = {
    call$2(e, st) {
      var transactionClosed, t3, transactionClosed0, exception, _this = this,
        t1 = _this.$this,
        t2 = new A.SqfliteFfiDatabase__handleBatch_addError_wrap(t1, _this.operation);
      if (_this.continueOnError) {
        if (!_this.noResult) {
          t3 = _this._box_0.results;
          t3.toString;
          B.JSArray_methods.add$1(t3, _this.getErrorMap.call$1(t2.call$1(e)));
        }
        transactionClosed = false;
        try {
          if (t1._currentTransactionId != null) {
            t3 = t1._ffiDb.database;
            transactionClosed0 = A._asInt(A._asDouble(t3.bindings._sqlite3_get_autocommit.call(null, t3.db))) !== 0;
          } else
            transactionClosed0 = false;
          transactionClosed = transactionClosed0;
        } catch (exception) {
        }
        if (A.boolConversionCheck(transactionClosed)) {
          t1._currentTransactionId = null;
          t1 = t2.call$1(e);
          t1._transactionClosed = true;
          throw A.wrapException(t1);
        }
      } else
        throw A.wrapException(t2.call$1(e));
    },
    call$1(e) {
      return this.call$2(e, null);
    },
    $signature: 34
  };
  A.SqfliteFfiDatabase__handleBatch_addError_wrap.prototype = {
    call$1(e) {
      var t1 = this.operation;
      return A._ffiWrapAnyException(e, this.$this, t1.sql, t1.sqlArguments);
    },
    $signature: 35
  };
  A.SqfliteFfiMethodCallHandler__wrapSqlHandler_closure.prototype = {
    call$0() {
      return this.handler.call$1(this.database);
    },
    $signature: 5
  };
  A.SqfliteFfiMethodCallHandler__wrapGlobalHandler_closure.prototype = {
    call$0() {
      return this.handler.call$0();
    },
    $signature: 5
  };
  A.SqfliteFfiMethodCallHandler_get_handleOpenDatabase_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleOpenDatabase(this._this);
    },
    $signature: 22
  };
  A.SqfliteFfiMethodCallHandler_handleOpenDatabase_wrapDbId.prototype = {
    call$1(id) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", id], type$.String, type$.nullable_Object);
    },
    $signature: 37
  };
  A.SqfliteFfiMethodCallHandler_get_handleCloseDatabase_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleCloseDatabase(this._this);
    },
    $signature: 5
  };
  A.SqfliteFfiMethodCallHandler_getOperations_closure.prototype = {
    call$1(operationArgument) {
      var t1, t2;
      type$.Map_dynamic_dynamic._as(operationArgument);
      t1 = new A.SqfliteFfiOperation();
      t1.sql = A._asStringQ(operationArgument.$index(0, "sql"));
      t2 = type$.nullable_List_dynamic._as(operationArgument.$index(0, "arguments"));
      t1.set$sqlArguments(t2 == null ? null : J.cast$1$0$ax(t2, type$.nullable_Object));
      t1.method = A._asString(operationArgument.$index(0, "method"));
      B.JSArray_methods.add$1(this.operations, t1);
    },
    $signature: 38
  };
  A.SqfliteFfiMethodCallHandler_get_handleQuery_closure.prototype = {
    call$1(database) {
      return A.SqfliteFfiMethodCallHandler_handleQuery(this._this, database);
    },
    $signature: 12
  };
  A.SqfliteFfiMethodCallHandler_get_handleQueryCursorNext_closure.prototype = {
    call$1(database) {
      return A.SqfliteFfiMethodCallHandler_handleQueryCursorNext(this._this, database);
    },
    $signature: 12
  };
  A.SqfliteFfiMethodCallHandler_get_handleExecute_closure.prototype = {
    call$1(database) {
      return A.SqfliteFfiMethodCallHandler_handleExecute(this._this, database);
    },
    $signature: 40
  };
  A.SqfliteFfiMethodCallHandler_get_handleOptions_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleOptions(this._this);
    },
    $signature: 5
  };
  A.SqfliteFfiMethodCallHandler_get_handleInsert_closure.prototype = {
    call$1(database) {
      return A.SqfliteFfiMethodCallHandler_handleInsert(this._this, database);
    },
    $signature: 41
  };
  A.SqfliteFfiMethodCallHandler_get_handleUpdate_closure.prototype = {
    call$1(database) {
      return A.SqfliteFfiMethodCallHandler_handleUpdate(this._this, database);
    },
    $signature: 42
  };
  A.SqfliteFfiMethodCallHandler_get_handleBatch_closure.prototype = {
    call$1(database) {
      var noResult, continueOnError,
        t1 = this._this,
        operations = A.SqfliteFfiMethodCallHandler_getOperations(t1);
      t1 = type$.Map_dynamic_dynamic._as(t1.$arguments);
      noResult = A._asBoolQ(t1.$index(0, "noResult"));
      continueOnError = A._asBoolQ(t1.$index(0, "continueOnError"));
      return database.handleBatch$3$continueOnError$noResult$operations(continueOnError === true, noResult === true, operations);
    },
    $signature: 12
  };
  A.SqfliteFfiMethodCallHandler_get_handleGetDatabasesPath_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleGetDatabasesPath(this._this);
    },
    $signature: 5
  };
  A.SqfliteFfiMethodCallHandler_get_handleDeleteDatabase_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleDeleteDatabase(this._this);
    },
    $signature: 2
  };
  A.SqfliteFfiMethodCallHandler_get_handleDatabaseExists_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleDatabaseExists(this._this);
    },
    $signature: 43
  };
  A.SqfliteFfiMethodCallHandler_get_handleReadDatabaseBytes_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleReadDatabaseBytes(this._this);
    },
    $signature: 22
  };
  A.SqfliteFfiMethodCallHandler_get_handleWriteDatabaseBytes_closure.prototype = {
    call$0() {
      return A.SqfliteFfiMethodCallHandler_handleWriteDatabaseBytes(this._this);
    },
    $signature: 2
  };
  A.SqfliteDatabaseFileSystemFfiWeb.prototype = {
    databaseExists$1(path) {
      return this.databaseExists$body$SqfliteDatabaseFileSystemFfiWeb(path);
    },
    databaseExists$body$SqfliteDatabaseFileSystemFfiWeb(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, canAccess, t1, exception, fs;
      var $async$databaseExists$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              fs = $async$self.fs;
              try {
                canAccess = fs.xAccess$2(path, 0);
                t1 = J.$eq$(canAccess, 0);
                $async$returnValue = !t1;
                // goto return
                $async$goto = 1;
                break;
              } catch (exception) {
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$databaseExists$1, $async$completer);
    },
    deleteDatabase$1(path) {
      return this.deleteDatabase$body$SqfliteDatabaseFileSystemFfiWeb(path);
    },
    deleteDatabase$body$SqfliteDatabaseFileSystemFfiWeb(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, exists, fs;
      var $async$deleteDatabase$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              fs = $async$self.fs;
              $async$handler = 2;
              exists = fs.xAccess$2(path, 0) !== 0;
              $async$goto = A.boolConversionCheck(exists) ? 5 : 6;
              break;
            case 5:
              // then
              fs.xDelete$2(path, 0);
              $async$goto = 7;
              return A._asyncAwait($async$self._flush$0(), $async$deleteDatabase$1);
            case 7:
              // returning from await.
            case 6:
              // join
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$deleteDatabase$1, $async$completer);
    },
    readDatabaseBytes$1(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Uint8List),
        $async$returnValue, $async$next = [], $async$self = this, file, size, target;
      var $async$readDatabaseBytes$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._flush$0(), $async$readDatabaseBytes$1);
            case 3:
              // returning from await.
              file = $async$self.fs.xOpen$2(new A.Sqlite3Filename(path), 1)._0;
              try {
                size = file.xFileSize$0();
                target = new Uint8Array(size);
                file.xRead$2(target, 0);
                $async$returnValue = target;
                // goto return
                $async$goto = 1;
                break;
              } finally {
                file.xClose$0();
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readDatabaseBytes$1, $async$completer);
    },
    _flush$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$self = this, exception, fs, $async$exception;
      var $async$_flush$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              fs = $async$self.fs;
              $async$goto = fs instanceof A.IndexedDbFileSystem ? 2 : 3;
              break;
            case 2:
              // then
              $async$handler = 5;
              $async$goto = 8;
              return A._asyncAwait(fs.flush$0(), $async$_flush$0);
            case 8:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$currentError;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 7:
              // after finally
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_flush$0, $async$completer);
    },
    writeDatabaseBytes$2(path, bytes) {
      return this.writeDatabaseBytes$body$SqfliteDatabaseFileSystemFfiWeb(path, bytes);
    },
    writeDatabaseBytes$body$SqfliteDatabaseFileSystemFfiWeb(path, bytes) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, file;
      var $async$writeDatabaseBytes$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._flush$0(), $async$writeDatabaseBytes$2);
            case 2:
              // returning from await.
              file = $async$self.fs.xOpen$2(new A.Sqlite3Filename(path), 6)._0;
              $async$handler = 3;
              file.xTruncate$1(0);
              file.xWrite$2(bytes, 0);
              $async$goto = 6;
              return A._asyncAwait($async$self._flush$0(), $async$writeDatabaseBytes$2);
            case 6:
              // returning from await.
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              file.xClose$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$writeDatabaseBytes$2, $async$completer);
    }
  };
  A.SqfliteFfiHandlerWeb.prototype = {
    get$_dbFs() {
      var t1, _this = this,
        value = _this.__SqfliteFfiHandlerWeb__dbFs_FI;
      if (value === $) {
        t1 = _this._fs;
        if (t1 == null)
          t1 = _this._fs = _this.context.fs;
        value !== $ && A.throwLateFieldADI("_dbFs");
        value = _this.__SqfliteFfiHandlerWeb__dbFs_FI = new A.SqfliteDatabaseFileSystemFfiWeb(t1);
      }
      return value;
    },
    initSqlite3$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$initSqlite3$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._sqlite3 == null)
                $async$self._sqlite3 = $async$self.context.wasmSqlite3;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$initSqlite3$0, $async$completer);
    },
    openPlatform$1(argumentsMap) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CommonDatabase),
        $async$returnValue, $async$self = this, path, t1, mode;
      var $async$openPlatform$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.initSqlite3$0(), $async$openPlatform$1);
            case 3:
              // returning from await.
              path = A._asString(argumentsMap.$index(0, "path"));
              t1 = A._asBoolQ(argumentsMap.$index(0, "readOnly"));
              mode = t1 === true ? B.OpenMode_0 : B.OpenMode_2;
              $async$returnValue = $async$self._sqlite3.open$2$mode(path, mode);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$openPlatform$1, $async$completer);
    },
    deleteDatabasePlatform$1(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$deleteDatabasePlatform$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.get$_dbFs().deleteDatabase$1(path), $async$deleteDatabasePlatform$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$deleteDatabasePlatform$1, $async$completer);
    },
    handleDatabaseExistsPlatform$1(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this;
      var $async$handleDatabaseExistsPlatform$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.get$_dbFs().databaseExists$1(path), $async$handleDatabaseExistsPlatform$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleDatabaseExistsPlatform$1, $async$completer);
    },
    readDatabaseBytesPlatform$1(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Uint8List),
        $async$returnValue, $async$self = this;
      var $async$readDatabaseBytesPlatform$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.get$_dbFs().readDatabaseBytes$1(path), $async$readDatabaseBytesPlatform$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readDatabaseBytesPlatform$1, $async$completer);
    },
    writeDatabaseBytesPlatform$2(path, bytes) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this;
      var $async$writeDatabaseBytesPlatform$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.get$_dbFs().writeDatabaseBytes$2(path, bytes), $async$writeDatabaseBytesPlatform$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$writeDatabaseBytesPlatform$2, $async$completer);
    },
    handleOptionsPlatform$1(argumentMap) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$handleOptionsPlatform$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleOptionsPlatform$1, $async$completer);
    }
  };
  A._SqfliteFfiHandlerWeb_SqfliteFfiHandler_SqfliteFfiHandlerNonImplementedMixin.prototype = {};
  A._handleMessageEvent_postResponse.prototype = {
    call$1(response) {
      var data,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Object),
        t2 = response.__FfiMethodResponse_result_F;
      t2 === $ && A.throwLateFieldNI("result");
      if (t2 != null)
        t1.$indexSet(0, "result", t2);
      else {
        t2 = response.__FfiMethodResponse_error_F;
        t2 === $ && A.throwLateFieldNI("error");
        if (t2 != null)
          t1.$indexSet(0, "error", t2);
      }
      data = t1;
      this.port.postMessage(A.SqfliteWebJsifyExtension_jsifyValueStrict(data));
    },
    $signature: 44
  };
  A.mainSharedWorker_closure.prototype = {
    call$1($event) {
      var t1 = this.zone;
      t1.run$1$1(new A.mainSharedWorker__closure0(type$.JSObject._as($event), t1), type$.Null);
    },
    $signature: 7
  };
  A.mainSharedWorker__closure0.prototype = {
    call$0() {
      var connectEvent = this.event,
        t1 = type$.JSArray_nullable_Object._as(connectEvent.ports),
        port = J.$index$asx(type$.List_JSObject._is(t1) ? t1 : new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("CastList<1,JSObject>")), 0);
      port.onmessage = A._functionToJS1(new A.mainSharedWorker___closure(this.zone));
    },
    $signature: 4
  };
  A.mainSharedWorker___closure.prototype = {
    call$1($event) {
      this.zone.run$1$1(new A.mainSharedWorker____closure(type$.JSObject._as($event)), type$.Null);
    },
    $signature: 7
  };
  A.mainSharedWorker____closure.prototype = {
    call$0() {
      A._handleMessageEvent(this.event);
    },
    $signature: 4
  };
  A.mainSharedWorker_closure0.prototype = {
    call$1($event) {
      this.zone.run$1$1(new A.mainSharedWorker__closure(type$.JSObject._as($event)), type$.Null);
    },
    $signature: 7
  };
  A.mainSharedWorker__closure.prototype = {
    call$0() {
      A._handleMessageEvent(this.event);
    },
    $signature: 4
  };
  A._TypeAdapter.prototype = {};
  A._BigIntAdapter.prototype = {
    decode$1(value) {
      if (typeof value == "string")
        return A._BigIntImpl__tryParse(value, null);
      throw A.wrapException(A.UnsupportedError$("invalid encoding for bigInt " + A.S(value)));
    }
  };
  A._adaptersByTag_closure.prototype = {
    call$2(key, value) {
      A._asInt(key);
      type$._BigIntAdapter._as(value);
      return new A.MapEntry(value.tag, value, type$.MapEntry_String__BigIntAdapter);
    },
    $signature: 46
  };
  A._dataToEncodable_closure.prototype = {
    call$2(key, item) {
      var converted, t1, t2;
      if (typeof key != "string")
        throw A.wrapException(A.ArgumentError$value(key, null, null));
      converted = A._dataToEncodable(item);
      if (converted == null ? item != null : converted !== item) {
        t1 = this._box_0;
        t2 = t1.clone;
        (t2 == null ? t1.clone = A.LinkedHashMap_LinkedHashMap$from(this.map, type$.String, type$.nullable_Object) : t2).$indexSet(0, key, converted);
      }
    },
    $signature: 8
  };
  A._dataFromEncodable_closure.prototype = {
    call$2(key, item) {
      var t1, t2,
        converted = A._dataFromEncodable(item);
      if (converted == null ? item != null : converted !== item) {
        t1 = this._box_0;
        t2 = t1.clone;
        t1 = t2 == null ? t1.clone = A.LinkedHashMap_LinkedHashMap$from(this.map, type$.String, type$.nullable_Object) : t2;
        t1.$indexSet(0, J.toString$0$(key), converted);
      }
    },
    $signature: 8
  };
  A.SqfliteWebJsifyExtension_jsifyValueStrict_closure.prototype = {
    call$2(key, value) {
      var t1;
      A._asString(key);
      t1 = value == null ? null : A.SqfliteWebJsifyExtension_jsifyValueStrict(value);
      this.jsObject[key] = t1;
    },
    $signature: 8
  };
  A.SqfliteFfiWebOptions.prototype = {
    toString$0(_) {
      return "SqfliteFfiWebOptions(inMemory: null, sqlite3WasmUri: null, indexedDbName: null, sharedWorkerUri: null, forceAsBasicWorker: null)";
    }
  };
  A.SqfliteFfiWebContext.prototype = {};
  A.SqfliteFfiWebContextImpl.prototype = {};
  A.SqliteException.prototype = {
    toString$0(_) {
      var t2, _this = this,
        t1 = _this.operation;
      t1 = t1 == null ? "" : "while " + t1 + ", ";
      t1 = "SqliteException(" + _this.extendedResultCode + "): " + t1 + _this.message + ", " + _this.explanation;
      t2 = _this.causingStatement;
      if (t2 != null) {
        t1 = t1 + "\n  Causing statement: " + t2;
        t2 = _this.parametersToStatement;
        if (t2 != null)
          t1 += ", parameters: " + J.map$1$1$ax(t2, new A.SqliteException_toString_closure(), type$.String).join$1(0, ", ");
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.SqliteException_toString_closure.prototype = {
    call$1(e) {
      if (type$.Uint8List._is(e))
        return "blob (" + e.length + " bytes)";
      else
        return J.toString$0$(e);
    },
    $signature: 47
  };
  A.RawSqliteBindings.prototype = {};
  A.SqliteResult.prototype = {};
  A.RawSqliteDatabase.prototype = {};
  A.RawStatementCompiler.prototype = {};
  A.RawSqliteStatement.prototype = {};
  A.RawSqliteContext.prototype = {};
  A.RawSqliteValue.prototype = {};
  A.FinalizableDatabase.prototype = {
    dispose$0() {
      var t1, t2, _i, stmt, t3, code, exception;
      for (t1 = this._statements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        stmt = t1[_i];
        if (!stmt._closed) {
          stmt._closed = true;
          if (!stmt._inResetState) {
            t3 = stmt.statement;
            A._asInt(A._asDouble(t3.bindings._sqlite3_reset.call(null, t3.stmt)));
            stmt._inResetState = true;
          }
          t3 = stmt.statement;
          t3.deallocateArguments$0();
          A._asInt(A._asDouble(t3.bindings._sqlite3_finalize.call(null, t3.stmt)));
        }
      }
      t1 = this.database;
      code = A._asInt(A._asDouble(t1.bindings._sqlite3_close_v2.call(null, t1.db)));
      exception = code !== 0 ? A.createExceptionRaw(this.bindings, t1, code, "closing database", null, null) : null;
      if (exception != null)
        throw A.wrapException(exception);
    }
  };
  A.DatabaseImplementation.prototype = {
    dispose$0() {
      var t1, _i, t2, _this = this;
      if (_this._isClosed)
        return;
      $.$get$disposeFinalizer().detach$1(_this);
      _this._isClosed = true;
      for (t1 = _this._updateListeners, _i = 0; false; ++_i)
        t1[_i].close$0();
      t1 = _this.database;
      t2 = t1.bindings;
      t2.callbacks.set$installedUpdateHook(null);
      t2._update_hooks.call(null, t1.db, -1);
      _this.finalizable.dispose$0();
    },
    execute$1(sql) {
      var stmt, t1, t2, result, _this = this,
        parameters = B.List_empty0;
      if (J.get$length$asx(parameters) === 0) {
        if (_this._isClosed)
          A.throwExpression(A.StateError$("This database has already been closed"));
        t1 = _this.database;
        t2 = t1.bindings;
        stmt = t2.allocateBytes$2$additionalLength(B.C_Utf8Encoder.convert$1(sql), 1);
        result = A._asInt(A.callMethod(t2._sqlite3_exec, "call", [null, t1.db, stmt, 0, 0, 0], type$.double));
        t2._free.call(null, stmt);
        if (result !== 0)
          A.throwException(_this, result, "executing", sql, parameters);
      } else {
        stmt = _this.prepare$2$checkNoTail(sql, true);
        try {
          stmt.executeWith$1(new A.IndexedParameters(type$.List_nullable_Object._as(parameters)));
        } finally {
          stmt.dispose$0();
        }
      }
    },
    _prepareInternal$5$checkNoTail$maxStatements$persistent$vtab(sql, checkNoTail, maxStatements, persistent, vtab) {
      var bytes, t1, t2, ptr, t3, t4, compiler, createdStatements, freeIntermediateResults, offset, result, t5, $length, t6, endOffset, stmt, _i, _this = this;
      if (_this._isClosed)
        A.throwExpression(A.StateError$("This database has already been closed"));
      bytes = B.C_Utf8Encoder.convert$1(sql);
      t1 = _this.database;
      type$.List_int._as(bytes);
      t2 = t1.bindings;
      ptr = t2.allocateBytes$1(bytes);
      t3 = t2._malloc;
      t4 = A._asInt(A._asDouble(t3.call(null, 4)));
      t3 = A._asInt(A._asDouble(t3.call(null, 4)));
      compiler = new A.WasmStatementCompiler(t1, ptr, t4, t3);
      createdStatements = A._setArrayType([], type$.JSArray_StatementImplementation);
      freeIntermediateResults = new A.DatabaseImplementation__prepareInternal_freeIntermediateResults(compiler, createdStatements);
      for (t1 = bytes.length, t2 = t2.memory, t4 = type$.NativeByteBuffer, offset = 0; offset < t1; offset = endOffset) {
        result = compiler.sqlite3_prepare$3(offset, t1 - offset, 0);
        t5 = result.resultCode;
        if (t5 !== 0) {
          freeIntermediateResults.call$0();
          A.throwException(_this, t5, "preparing statement", sql, null);
        }
        t5 = t4._as(t2.buffer);
        $length = B.JSInt_methods._tdivFast$1(t5.byteLength, 4);
        t5 = new Int32Array(t5, 0, $length);
        t6 = B.JSInt_methods._shrOtherPositive$1(t3, 2);
        if (!(t6 < t5.length))
          return A.ioore(t5, t6);
        endOffset = t5[t6] - ptr;
        stmt = result.result;
        if (stmt != null)
          B.JSArray_methods.add$1(createdStatements, new A.StatementImplementation(stmt, _this, new A.FinalizableStatement(stmt), new A._Utf8Decoder(false)._convertGeneral$4(bytes, offset, endOffset, true)));
        if (createdStatements.length === maxStatements) {
          offset = endOffset;
          break;
        }
      }
      if (checkNoTail)
        for (; offset < t1;) {
          result = compiler.sqlite3_prepare$3(offset, t1 - offset, 0);
          t5 = t4._as(t2.buffer);
          $length = B.JSInt_methods._tdivFast$1(t5.byteLength, 4);
          t5 = new Int32Array(t5, 0, $length);
          t6 = B.JSInt_methods._shrOtherPositive$1(t3, 2);
          if (!(t6 < t5.length))
            return A.ioore(t5, t6);
          offset = t5[t6] - ptr;
          stmt = result.result;
          if (stmt != null) {
            B.JSArray_methods.add$1(createdStatements, new A.StatementImplementation(stmt, _this, new A.FinalizableStatement(stmt), ""));
            freeIntermediateResults.call$0();
            throw A.wrapException(A.ArgumentError$value(sql, "sql", "Had an unexpected trailing statement."));
          } else if (result.resultCode !== 0) {
            freeIntermediateResults.call$0();
            throw A.wrapException(A.ArgumentError$value(sql, "sql", "Has trailing data after the first sql statement:"));
          }
        }
      compiler.close$0();
      for (t1 = createdStatements.length, t2 = _this.finalizable._statements, _i = 0; _i < createdStatements.length; createdStatements.length === t1 || (0, A.throwConcurrentModificationError)(createdStatements), ++_i)
        B.JSArray_methods.add$1(t2, createdStatements[_i].finalizable);
      return createdStatements;
    },
    prepare$2$checkNoTail(sql, checkNoTail) {
      var stmts = this._prepareInternal$5$checkNoTail$maxStatements$persistent$vtab(sql, checkNoTail, 1, false, true);
      if (stmts.length === 0)
        throw A.wrapException(A.ArgumentError$value(sql, "sql", "Must contain an SQL statement."));
      return B.JSArray_methods.get$first(stmts);
    },
    prepare$1(sql) {
      return this.prepare$2$checkNoTail(sql, false);
    },
    $isCommonDatabase: 1
  };
  A.DatabaseImplementation__prepareInternal_freeIntermediateResults.prototype = {
    call$0() {
      var t1, t2, _i, stmt, t3, t4;
      this.compiler.close$0();
      for (t1 = this.createdStatements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        stmt = t1[_i];
        t3 = stmt.finalizable;
        if (!t3._closed) {
          t4 = $.$get$disposeFinalizer()._registry;
          if (t4 != null)
            t4.unregister(stmt);
          if (!t3._closed) {
            t3._closed = true;
            if (!t3._inResetState) {
              t4 = t3.statement;
              A._asInt(A._asDouble(t4.bindings._sqlite3_reset.call(null, t4.stmt)));
              t3._inResetState = true;
            }
            t4 = t3.statement;
            t4.deallocateArguments$0();
            A._asInt(A._asDouble(t4.bindings._sqlite3_finalize.call(null, t4.stmt)));
          }
          t4 = stmt.database;
          if (!t4._isClosed)
            B.JSArray_methods.remove$1(t4.finalizable._statements, t3);
        }
      }
    },
    $signature: 0
  };
  A.FinalizablePart.prototype = {};
  A.disposeFinalizer_closure.prototype = {
    call$1(element) {
      type$.FinalizablePart._as(element).dispose$0();
    },
    $signature: 48
  };
  A.Sqlite3Implementation.prototype = {
    open$2$mode(filename, mode) {
      var flags, t1, t2, namePtr, outDb, result, t3, t4, dbPtr, exception, _null = null;
      switch (mode) {
        case B.OpenMode_0:
          flags = 1;
          break;
        case B.OpenMode_1:
          flags = 2;
          break;
        case B.OpenMode_2:
          flags = 6;
          break;
        default:
          flags = _null;
      }
      t1 = this.bindings;
      A._asInt(flags);
      t2 = t1.bindings;
      namePtr = t2.allocateBytes$2$additionalLength(B.C_Utf8Encoder.convert$1(filename), 1);
      outDb = A._asInt(A._asDouble(t2._malloc.call(null, 4)));
      result = A._asInt(A._asDouble(A.callMethod(t2._sqlite3_open_v2, "call", [null, namePtr, outDb, flags, 0], type$.nullable_Object)));
      t3 = A.NativeInt32List_NativeInt32List$view(type$.NativeByteBuffer._as(t2.memory.buffer), 0, _null);
      t4 = B.JSInt_methods._shrOtherPositive$1(outDb, 2);
      if (!(t4 < t3.length))
        return A.ioore(t3, t4);
      dbPtr = t3[t4];
      t4 = t2._free;
      t4.call(null, namePtr);
      t4.call(null, 0);
      t3 = new A.WasmDatabase(t2, dbPtr);
      if (result !== 0) {
        exception = A.createExceptionRaw(t1, t3, result, "opening the database", _null, _null);
        A._asInt(A._asDouble(t2._sqlite3_close_v2.call(null, dbPtr)));
        throw A.wrapException(exception);
      }
      A._asInt(A._asDouble(t2._sqlite3_extended_result_codes.call(null, dbPtr, 1)));
      t2 = A._setArrayType([], type$.JSArray_MultiStreamController_SqliteUpdate);
      t4 = new A.FinalizableDatabase(t1, t3, A._setArrayType([], type$.JSArray_FinalizableStatement));
      t2 = new A.DatabaseImplementation(t1, t3, t4, t2);
      t3 = $.$get$disposeFinalizer();
      t3.$ti._precomputed1._as(t4);
      t1 = t3._registry;
      if (t1 != null)
        t1.register(t2, t4, t2);
      return t2;
    }
  };
  A.FinalizableStatement.prototype = {
    dispose$0() {
      var t1, _this = this;
      if (!_this._closed) {
        _this._closed = true;
        _this._reset$0();
        t1 = _this.statement;
        t1.deallocateArguments$0();
        A._asInt(A._asDouble(t1.bindings._sqlite3_finalize.call(null, t1.stmt)));
      }
    },
    _reset$0() {
      if (!this._inResetState) {
        var t1 = this.statement;
        A._asInt(A._asDouble(t1.bindings._sqlite3_reset.call(null, t1.stmt)));
        this._inResetState = true;
      }
    }
  };
  A.StatementImplementation.prototype = {
    get$_statement$_columnNames() {
      var t3, t4, t5, i, namePtr, t6, t7,
        t1 = this.statement,
        t2 = t1.bindings,
        _this = t1.stmt,
        columnCount = A._asInt(A._asDouble(t2._sqlite3_column_count.call(null, _this)));
      t1 = A._setArrayType([], type$.JSArray_String);
      for (t3 = type$.List_int, t4 = t2._sqlite3_column_name, t2 = t2.memory, t5 = type$.NativeByteBuffer, i = 0; i < columnCount; ++i) {
        namePtr = A._asInt(A._asDouble(t4.call(null, _this, i)));
        t6 = t5._as(t2.buffer);
        t7 = A.WrappedMemory_strlen(t2, namePtr);
        t6 = t3._as(new Uint8Array(t6, namePtr, t7));
        t1.push(new A._Utf8Decoder(false)._convertGeneral$4(t6, 0, null, true));
      }
      return t1;
    },
    get$_tableNames() {
      return null;
    },
    _reset$0() {
      var t1 = this.finalizable;
      t1._reset$0();
      t1.statement.deallocateArguments$0();
      this._currentCursor = null;
    },
    _execute$0() {
      var result, _this = this,
        t1 = _this.finalizable._inResetState = false,
        t2 = _this.statement,
        _this0 = t2.stmt;
      t2 = t2.bindings._sqlite3_step;
      do
        result = A._asInt(A._asDouble(t2.call(null, _this0)));
      while (result === 100);
      if (result !== 0 ? result !== 101 : t1)
        A.throwException(_this.database, result, "executing statement", _this.sql, _this._latestArguments);
    },
    _selectResults$0() {
      var t2, t3, _this0, columnCount, resultCode, t4, i, names, _this = this,
        rows = A._setArrayType([], type$.JSArray_List_nullable_Object),
        t1 = _this.finalizable._inResetState = false;
      for (t2 = _this.statement, t3 = t2.bindings, _this0 = t2.stmt, t2 = t3._sqlite3_step, t3 = t3._sqlite3_column_count, columnCount = -1; resultCode = A._asInt(A._asDouble(t2.call(null, _this0))), resultCode === 100;) {
        if (columnCount === -1)
          columnCount = A._asInt(A._asDouble(t3.call(null, _this0)));
        t4 = [];
        for (i = 0; i < columnCount; ++i)
          t4.push(_this._readValue$1(i));
        B.JSArray_methods.add$1(rows, t4);
      }
      if (resultCode !== 0 ? resultCode !== 101 : t1)
        A.throwException(_this.database, resultCode, "selecting from statement", _this.sql, _this._latestArguments);
      names = _this.get$_statement$_columnNames();
      _this.get$_tableNames();
      t1 = new A.ResultSet(rows, names, B.Map_empty);
      t1._calculateIndexes$0();
      return t1;
    },
    _readValue$1(index) {
      var $length, ptr, list,
        t1 = this.statement,
        t2 = t1.bindings,
        _this = t1.stmt;
      switch (A._asInt(A._asDouble(t2._sqlite3_column_type.call(null, _this, index)))) {
        case 1:
          _this = type$.JavaScriptBigInt._as(t2._sqlite3_column_int64.call(null, _this, index));
          return -9007199254740992 <= _this && _this <= 9007199254740992 ? A._asInt(A._asDouble(self.Number(_this))) : A._BigIntImpl_parse(A._asString(_this.toString()), null);
        case 2:
          return A._asDouble(t2._sqlite3_column_double.call(null, _this, index));
        case 3:
          return A.WrappedMemory_readString(t2.memory, A._asInt(A._asDouble(t2._sqlite3_column_text.call(null, _this, index))));
        case 4:
          $length = A._asInt(A._asDouble(t2._sqlite3_column_bytes.call(null, _this, index)));
          ptr = A._asInt(A._asDouble(t2._sqlite3_column_blob.call(null, _this, index)));
          list = new Uint8Array($length);
          B.NativeUint8List_methods.setAll$2(list, 0, A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(t2.memory.buffer), ptr, $length));
          return list;
        case 5:
        default:
          return null;
      }
    },
    _bindIndexedParams$1(params) {
      var i,
        t1 = J.getInterceptor$asx(params),
        $length = t1.get$length(params),
        t2 = this.statement,
        count = A._asInt(A._asDouble(t2.bindings._sqlite3_bind_parameter_count.call(null, t2.stmt)));
      if ($length !== count)
        A.throwExpression(A.ArgumentError$value(params, "parameters", "Expected " + count + " parameters, got " + $length));
      t2 = t1.get$isEmpty(params);
      if (t2)
        return;
      for (i = 1; i <= t1.get$length(params); ++i)
        this._bindParam$2(t1.$index(params, i - 1), i);
      this._latestArguments = params;
    },
    _bindParam$2(param, i) {
      var t1, t2, encoded, t3, ptr, _this = this;
      $label0$0: {
        t1 = null;
        if (param == null) {
          t2 = _this.statement;
          A._asInt(A._asDouble(t2.bindings._sqlite3_bind_null.call(null, t2.stmt, i)));
          break $label0$0;
        }
        if (A._isInt(param)) {
          t2 = _this.statement;
          A._asInt(A._asDouble(t2.bindings._sqlite3_bind_int64.call(null, t2.stmt, i, type$.JavaScriptBigInt._as(self.BigInt(param)))));
          break $label0$0;
        }
        if (param instanceof A._BigIntImpl) {
          t2 = _this.statement;
          if (param.compareTo$1(0, $.$get$bigIntMinValue64()) < 0 || param.compareTo$1(0, $.$get$bigIntMaxValue64()) > 0)
            A.throwExpression(A.Exception_Exception("BigInt value exceeds the range of 64 bits"));
          _this = param.toString$0(0);
          A._asInt(A._asDouble(t2.bindings._sqlite3_bind_int64.call(null, t2.stmt, i, type$.JavaScriptBigInt._as(self.BigInt(_this)))));
          break $label0$0;
        }
        if (A._isBool(param)) {
          t2 = _this.statement;
          _this = param ? 1 : 0;
          A._asInt(A._asDouble(t2.bindings._sqlite3_bind_int64.call(null, t2.stmt, i, type$.JavaScriptBigInt._as(self.BigInt(_this)))));
          break $label0$0;
        }
        if (typeof param == "number") {
          t2 = _this.statement;
          A._asInt(A._asDouble(t2.bindings._sqlite3_bind_double.call(null, t2.stmt, i, param)));
          break $label0$0;
        }
        if (typeof param == "string") {
          t2 = _this.statement;
          encoded = B.C_Utf8Encoder.convert$1(param);
          t3 = t2.bindings;
          ptr = t3.allocateBytes$1(encoded);
          B.JSArray_methods.add$1(t2._allocatedArguments, ptr);
          A._asInt(A.callMethod(t3._sqlite3_bind_text, "call", [null, t2.stmt, i, ptr, encoded.length, 0], type$.double));
          break $label0$0;
        }
        t2 = type$.List_int;
        if (t2._is(param)) {
          t3 = _this.statement;
          t2._as(param);
          t2 = t3.bindings;
          ptr = t2.allocateBytes$1(param);
          B.JSArray_methods.add$1(t3._allocatedArguments, ptr);
          _this = J.get$length$asx(param);
          A._asInt(A.callMethod(t2._sqlite3_bind_blob64, "call", [null, t3.stmt, i, ptr, type$.JavaScriptBigInt._as(self.BigInt(_this)), 0], type$.double));
          break $label0$0;
        }
        t1 = A.throwExpression(A.ArgumentError$value(param, "params[" + i + "]", "Allowed parameters must either be null or bool, int, num, String or List<int>."));
      }
      return t1;
    },
    _bindParams$1(parameters) {
      $label0$0: {
        this._bindIndexedParams$1(parameters.parameters);
        break $label0$0;
      }
    },
    dispose$0() {
      var t2,
        t1 = this.finalizable;
      if (!t1._closed) {
        $.$get$disposeFinalizer().detach$1(this);
        t1.dispose$0();
        t2 = this.database;
        if (!t2._isClosed)
          B.JSArray_methods.remove$1(t2.finalizable._statements, t1);
      }
    },
    executeWith$1(parameters) {
      var _this = this;
      if (_this.finalizable._closed)
        A.throwExpression(A.StateError$(string$.Tried_));
      _this._reset$0();
      _this._bindParams$1(parameters);
      _this._execute$0();
    }
  };
  A._ActiveCursorIterator.prototype = {
    get$current() {
      var t1 = this.___ActiveCursorIterator_current_A;
      t1 === $ && A.throwLateFieldNI("current");
      return t1;
    },
    moveNext$0() {
      var t2, t3, _this0, result, i, _this = this,
        t1 = _this.statement;
      if (t1.finalizable._closed || t1._currentCursor !== _this)
        return false;
      t2 = t1.statement;
      t3 = t2.bindings;
      _this0 = t2.stmt;
      result = A._asInt(A._asDouble(t3._sqlite3_step.call(null, _this0)));
      if (result === 100) {
        if (!_this._hasReliableColumnNames) {
          _this.columnCount = A._asInt(A._asDouble(t3._sqlite3_column_count.call(null, _this0)));
          _this.set$_columnNames(type$.List_String._as(t1.get$_statement$_columnNames()));
          _this._calculateIndexes$0();
          _this._hasReliableColumnNames = true;
        }
        t2 = [];
        for (i = 0; i < _this.columnCount; ++i)
          t2.push(t1._readValue$1(i));
        _this.___ActiveCursorIterator_current_A = new A.Row(_this, A.List_List$unmodifiable(t2, type$.nullable_Object));
        return true;
      }
      t1._currentCursor = null;
      if (result !== 0 && result !== 101)
        A.throwException(t1.database, result, "iterating through statement", t1.sql, t1._latestArguments);
      return false;
    }
  };
  A.InMemoryFileSystem.prototype = {
    xAccess$2(path, flags) {
      return this.fileData.containsKey$1(path) ? 1 : 0;
    },
    xDelete$2(path, syncDir) {
      this.fileData.remove$1(0, path);
    },
    xFullPathName$1(path) {
      return $.$get$url().normalize$1("/" + path);
    },
    xOpen$2(path, flags) {
      var t1,
        pathStr = path.path;
      if (pathStr == null)
        pathStr = A.GenerateFilename_randomFileName(this.random, "/");
      t1 = this.fileData;
      if (!t1.containsKey$1(pathStr))
        if ((flags & 4) !== 0)
          t1.$indexSet(0, pathStr, new A.Uint8Buffer(new Uint8Array(0), 0));
        else
          throw A.wrapException(A.VfsException$(14));
      return new A._Record_2_file_outFlags(new A._InMemoryFile(this, pathStr, (flags & 8) !== 0), 0);
    },
    xSleep$1(duration) {
    }
  };
  A._InMemoryFile.prototype = {
    readInto$2(buffer, offset) {
      var t1, available,
        file = this.vfs.fileData.$index(0, this.path);
      if (file == null || file._typed_buffer$_length <= offset)
        return 0;
      t1 = file._typed_buffer$_length;
      available = Math.min(buffer.length, t1 - offset);
      B.NativeUint8List_methods.setRange$4(buffer, 0, available, A.NativeUint8List_NativeUint8List$view(file._typed_buffer$_buffer.buffer, 0, t1), offset);
      return available;
    },
    xCheckReservedLock$0() {
      return this._lockMode >= 2 ? 1 : 0;
    },
    xClose$0() {
      if (this.deleteOnClose)
        this.vfs.fileData.remove$1(0, this.path);
    },
    xFileSize$0() {
      return this.vfs.fileData.$index(0, this.path)._typed_buffer$_length;
    },
    xLock$1(mode) {
      this._lockMode = mode;
    },
    xSync$1(flags) {
    },
    xTruncate$1(size) {
      var t1 = this.vfs.fileData,
        t2 = this.path,
        file = t1.$index(0, t2);
      if (file == null) {
        t1.$indexSet(0, t2, new A.Uint8Buffer(new Uint8Array(0), 0));
        t1.$index(0, t2).set$length(0, size);
      } else
        file.set$length(0, size);
    },
    xUnlock$1(mode) {
      this._lockMode = mode;
    },
    xWrite$2(buffer, fileOffset) {
      var endIndex,
        t1 = this.vfs.fileData,
        t2 = this.path,
        file = t1.$index(0, t2);
      if (file == null) {
        file = new A.Uint8Buffer(new Uint8Array(0), 0);
        t1.$indexSet(0, t2, file);
      }
      endIndex = fileOffset + buffer.length;
      if (endIndex > file._typed_buffer$_length)
        file.set$length(0, endIndex);
      file.setRange$3(0, fileOffset, endIndex, buffer);
    }
  };
  A.Cursor.prototype = {
    _calculateIndexes$0() {
      var t2, t3, _i, column,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int);
      for (t2 = this._columnNames, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        column = t2[_i];
        t1.$indexSet(0, column, B.JSArray_methods.lastIndexOf$1(this._columnNames, column));
      }
      this.set$_calculatedIndexes(t1);
    },
    set$_columnNames(_columnNames) {
      this._columnNames = type$.List_String._as(_columnNames);
    },
    set$_calculatedIndexes(_calculatedIndexes) {
      this._calculatedIndexes = type$.Map_String_int._as(_calculatedIndexes);
    }
  };
  A.IteratingCursor.prototype = {$isIterator: 1};
  A.ResultSet.prototype = {
    get$iterator(_) {
      return new A._ResultIterator(this);
    },
    $index(_, index) {
      var t1 = this.rows;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return new A.Row(this, A.List_List$unmodifiable(t1[index], type$.nullable_Object));
    },
    $indexSet(_, index, value) {
      type$.Row._as(value);
      throw A.wrapException(A.UnsupportedError$("Can't change rows from a result set"));
    },
    get$length(_) {
      return this.rows.length;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Row.prototype = {
    $index(_, key) {
      var t1, index;
      if (typeof key != "string") {
        if (A._isInt(key)) {
          t1 = this._data;
          if (key >>> 0 !== key || key >= t1.length)
            return A.ioore(t1, key);
          return t1[key];
        }
        return null;
      }
      index = this._result._calculatedIndexes.$index(0, key);
      if (index == null)
        return null;
      t1 = this._data;
      if (index >>> 0 !== index || index >= t1.length)
        return A.ioore(t1, index);
      return t1[index];
    },
    get$keys() {
      return this._result._columnNames;
    },
    get$values() {
      return this._data;
    },
    $isMap: 1
  };
  A._ResultIterator.prototype = {
    get$current() {
      var t1 = this.result,
        t2 = t1.rows,
        t3 = this.index;
      if (!(t3 >= 0 && t3 < t2.length))
        return A.ioore(t2, t3);
      return new A.Row(t1, A.List_List$unmodifiable(t2[t3], type$.nullable_Object));
    },
    moveNext$0() {
      return ++this.index < this.result.rows.length;
    },
    $isIterator: 1
  };
  A._ResultSet_Cursor_ListMixin.prototype = {};
  A._ResultSet_Cursor_ListMixin_NonGrowableListMixin.prototype = {};
  A._Row_Object_UnmodifiableMapMixin.prototype = {};
  A._Row_Object_UnmodifiableMapMixin_MapMixin.prototype = {};
  A.OpenMode.prototype = {
    _enumToString$0() {
      return "OpenMode." + this._core$_name;
    }
  };
  A.CommonPreparedStatement.prototype = {};
  A.IndexedParameters.prototype = {$isStatementParameters: 1};
  A.VfsException.prototype = {
    toString$0(_) {
      return "VfsException(" + this.returnCode + ")";
    }
  };
  A.Sqlite3Filename.prototype = {};
  A.VirtualFileSystem.prototype = {};
  A.BaseVirtualFileSystem.prototype = {
    xRandomness$1(target) {
      var t1, t2, i;
      for (t1 = target.length, t2 = this.random, i = 0; i < t1; ++i)
        target[i] = t2.nextInt$1(256);
    }
  };
  A.BaseVfsFile.prototype = {
    get$xDeviceCharacteristics() {
      return 0;
    },
    xRead$2(target, fileOffset) {
      var bytesRead = this.readInto$2(target, fileOffset),
        t1 = target.length;
      if (bytesRead < t1) {
        B.NativeUint8List_methods.fillRange$3(target, bytesRead, t1, 0);
        throw A.wrapException(B.VfsException_522);
      }
    },
    $isVirtualFileSystemFile: 1
  };
  A.WasmSqliteBindings.prototype = {};
  A.WasmDatabase.prototype = {};
  A.WasmStatementCompiler.prototype = {
    close$0() {
      var _this = this,
        t1 = _this.database.bindings._free;
      t1.call(null, _this.sql);
      t1.call(null, _this.stmtOut);
      t1.call(null, _this.pzTail);
    },
    sqlite3_prepare$3(byteOffset, $length, prepFlag) {
      var t3, stmt, libraryStatement, _this = this,
        t1 = _this.database,
        t2 = t1.bindings,
        _this0 = _this.stmtOut,
        result = A._asInt(A.callMethod(t2._sqlite3_prepare_v3, "call", [null, t1.db, _this.sql + byteOffset, $length, prepFlag, _this0, _this.pzTail], type$.double));
      t1 = A.NativeInt32List_NativeInt32List$view(type$.NativeByteBuffer._as(t2.memory.buffer), 0, null);
      t3 = B.JSInt_methods._shrOtherPositive$1(_this0, 2);
      if (!(t3 < t1.length))
        return A.ioore(t1, t3);
      stmt = t1[t3];
      libraryStatement = stmt === 0 ? null : new A.WasmStatement(stmt, t2, A._setArrayType([], type$.JSArray_int));
      return new A.SqliteResult(result, libraryStatement, type$.SqliteResult_nullable_RawSqliteStatement);
    }
  };
  A.WasmStatement.prototype = {
    deallocateArguments$0() {
      var t1, t2, t3, _i;
      for (t1 = this._allocatedArguments, t2 = t1.length, t3 = this.bindings._free, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t3.call(null, t1[_i]);
      B.JSArray_methods.clear$0(t1);
    }
  };
  A.WasmContext.prototype = {};
  A.WasmValue.prototype = {};
  A.WasmValueList.prototype = {
    $index(_, index) {
      var t1 = A.NativeInt32List_NativeInt32List$view(type$.NativeByteBuffer._as(this.bindings.memory.buffer), 0, null),
        t2 = B.JSInt_methods._shrOtherPositive$1(this.value + index * 4, 2);
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      return new A.WasmValue();
    },
    $indexSet(_, index, value) {
      type$.WasmValue._as(value);
      throw A.wrapException(A.UnsupportedError$("Setting element in WasmValueList"));
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A._CursorReader.prototype = {
    cancel$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$cancel$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._onSuccess;
              if (t1 != null)
                t1.cancel$0();
              t1 = $async$self._onError;
              if (t1 != null)
                t1.cancel$0();
              $async$self._onError = $async$self._onSuccess = null;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$cancel$0, $async$completer);
    },
    get$current() {
      var t1 = this._cursor;
      return t1 == null ? A.throwExpression(A.StateError$("Await moveNext() first")) : t1;
    },
    moveNext$0() {
      var completer, t2, t3, t4, _this = this,
        t1 = _this._cursor;
      if (t1 != null)
        t1.continue();
      t1 = new A._Future($.Zone__current, type$._Future_bool);
      completer = new A._SyncCompleter(t1, type$._SyncCompleter_bool);
      t2 = _this._cursorRequest;
      t3 = type$.nullable_void_Function_JSObject;
      t4 = type$.JSObject;
      _this._onSuccess = A._EventStreamSubscription$(t2, "success", t3._as(new A._CursorReader_moveNext_closure(_this, completer)), false, t4);
      _this._onError = A._EventStreamSubscription$(t2, "error", t3._as(new A._CursorReader_moveNext_closure0(_this, completer)), false, t4);
      return t1;
    },
    set$_cursor(_cursor) {
      this._cursor = this.$ti._eval$1("1?")._as(_cursor);
    }
  };
  A._CursorReader_moveNext_closure.prototype = {
    call$1($event) {
      var t1 = this.$this;
      t1.cancel$0();
      t1.set$_cursor(t1.$ti._eval$1("1?")._as(t1._cursorRequest.result));
      this.completer.complete$1(t1._cursor != null);
    },
    $signature: 3
  };
  A._CursorReader_moveNext_closure0.prototype = {
    call$1($event) {
      var t1 = this.$this;
      t1.cancel$0();
      t1 = type$.nullable_JSObject._as(t1._cursorRequest.error);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 3
  };
  A.CompleteIdbRequest_complete_closure.prototype = {
    call$1($event) {
      this.completer.complete$1(this.T._as(this._this.result));
    },
    $signature: 3
  };
  A.CompleteIdbRequest_complete_closure0.prototype = {
    call$1($event) {
      var t1 = type$.nullable_JSObject._as(this._this.error);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 3
  };
  A.CompleteOpenIdbRequest_completeOrBlocked_closure.prototype = {
    call$1($event) {
      this.completer.complete$1(this.T._as(this._this.result));
    },
    $signature: 3
  };
  A.CompleteOpenIdbRequest_completeOrBlocked_closure0.prototype = {
    call$1($event) {
      var t1 = type$.nullable_JSObject._as(this._this.error);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 3
  };
  A.CompleteOpenIdbRequest_completeOrBlocked_closure1.prototype = {
    call$1($event) {
      var t1 = type$.nullable_JSObject._as(this._this.error);
      if (t1 == null)
        t1 = $event;
      this.completer.completeError$1(t1);
    },
    $signature: 3
  };
  A.WasmInstance.prototype = {
    WasmInstance$_$1(nativeInstance) {
      var t4, t5, t6, key, value,
        t1 = self,
        t2 = type$.JSObject,
        t3 = type$.JSArray_nullable_Object._as(t1.Object.keys(t2._as(nativeInstance.exports)));
      t3 = B.JSArray_methods.get$iterator(t3);
      t4 = type$.JavaScriptFunction;
      t5 = this.globals;
      t6 = this.functions;
      for (; t3.moveNext$0();) {
        key = A._asString(t3.get$current());
        value = t2._as(nativeInstance.exports)[key];
        if (typeof value === "function")
          t6.$indexSet(0, key, t4._as(value));
        else if (value instanceof t4._as(t1.WebAssembly.Global))
          t5.$indexSet(0, key, t2._as(value));
      }
    }
  };
  A.WasmInstance_load_closure.prototype = {
    call$2(module, moduleImports) {
      var _this;
      A._asString(module);
      type$.Map_of_String_and_nullable_Object._as(moduleImports);
      _this = {};
      this.importsJs[module] = _this;
      moduleImports.forEach$1(0, new A.WasmInstance_load__closure(_this));
    },
    $signature: 50
  };
  A.WasmInstance_load__closure.prototype = {
    call$2($name, value) {
      this.moduleJs[A._asString($name)] = value;
    },
    $signature: 51
  };
  A.WasmSqlite3.prototype = {};
  A.AsynchronousIndexedDbFileSystem.prototype = {
    _rangeOverFile$3$endOffsetInclusive$startOffset(fileId, endOffsetInclusive, startOffset) {
      var t1 = type$.JSArray_double;
      return type$.JSObject._as(self.IDBKeyRange.bound(A._setArrayType([fileId, startOffset], t1), A._setArrayType([fileId, endOffsetInclusive], t1)));
    },
    _rangeOverFile$2$startOffset(fileId, startOffset) {
      return this._rangeOverFile$3$endOffsetInclusive$startOffset(fileId, 9007199254740992, startOffset);
    },
    _rangeOverFile$1(fileId) {
      return this._rangeOverFile$3$endOffsetInclusive$startOffset(fileId, 9007199254740992, 0);
    },
    open$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, openRequest;
      var $async$open$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new A._Future($.Zone__current, type$._Future_JSObject);
              t2 = type$.JSObject;
              openRequest = t2._as(type$.nullable_JSObject._as(self.indexedDB).open($async$self._dbName, 1));
              openRequest.onupgradeneeded = A._functionToJS1(new A.AsynchronousIndexedDbFileSystem_open_closure(openRequest));
              new A._SyncCompleter(t1, type$._SyncCompleter_JSObject).complete$1(A.CompleteOpenIdbRequest_completeOrBlocked(openRequest, t2));
              $async$goto = 2;
              return A._asyncAwait(t1, $async$open$0);
            case 2:
              // returning from await.
              $async$self.set$_database($async$result);
              $async$goto = 3;
              return A._asyncAwait($async$self._supportsStoringBlobs$0(), $async$open$0);
            case 3:
              // returning from await.
              $async$self.set$_storeBlobs($async$result);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$open$0, $async$completer);
    },
    _supportsStoringBlobs$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, transaction, blob, blocks, request, key, t2, t3, exception, t1, $async$exception, $async$exception1;
      var $async$_supportsStoringBlobs$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._database;
              t1.toString;
              t2 = type$.JSArray_String;
              t3 = type$.JSObject;
              transaction = t3._as(t1.transaction(A._setArrayType(["blocks"], t2), "readwrite"));
              blob = null;
              $async$handler = 4;
              blocks = t3._as(transaction.objectStore("blocks"));
              t1 = self.Blob;
              request = t3._as(blocks.add(t3._as(new t1(A._setArrayType([new Uint8Array(4096).buffer], type$.JSArray_NativeByteBuffer))), A._setArrayType(["test"], t2)));
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(request, type$.nullable_Object), $async$_supportsStoringBlobs$0);
            case 7:
              // returning from await.
              key = $async$result;
              $async$goto = 8;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t3._as(blocks.get(key)), t3), $async$_supportsStoringBlobs$0);
            case 8:
              // returning from await.
              blob = $async$result;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              $async$returnValue = false;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              transaction.abort();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
              $async$handler = 10;
              $async$goto = 13;
              return A._asyncAwait(A.ReadBlob_byteBuffer(blob), $async$_supportsStoringBlobs$0);
            case 13:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 12;
              break;
            case 10:
              // catch
              $async$handler = 9;
              $async$exception1 = $async$currentError;
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 12;
              break;
            case 9:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 12:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_supportsStoringBlobs$0, $async$completer);
    },
    listFiles$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_int),
        $async$returnValue, $async$self = this, row, t2, t1, result, iterator, $async$temp1;
      var $async$listFiles$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int);
              iterator = new A._CursorReader(t1._as(t1._as(t1._as(t1._as($async$self._database.transaction("files", "readonly")).objectStore("files")).index("fileName")).openKeyCursor()), type$._CursorReader_JSObject);
            case 3:
              // for condition
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(iterator.moveNext$0(), $async$listFiles$0);
            case 5:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              row = iterator._cursor;
              if (row == null)
                row = A.throwExpression(A.StateError$("Await moveNext() first"));
              t1 = row.key;
              t1.toString;
              A._asString(t1);
              t2 = row.primaryKey;
              t2.toString;
              result.$indexSet(0, t1, A._asInt(A._asDouble(t2)));
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$listFiles$0, $async$completer);
    },
    fileIdForPath$1(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_int),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$fileIdForPath$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t1._as(t1._as(t1._as(t1._as($async$self._database.transaction("files", "readonly")).objectStore("files")).index("fileName")).getKey(path)), type$.double), $async$fileIdForPath$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1._asInt($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$fileIdForPath$1, $async$completer);
    },
    createFile$1(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$createFile$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t1._as(t1._as(t1._as($async$self._database.transaction("files", "readwrite")).objectStore("files")).put({name: path, length: 0})), type$.double), $async$createFile$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1._asInt($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$createFile$1, $async$completer);
    },
    _readFile$2(transaction, fileId) {
      var t1 = type$.JSObject;
      return A.CompleteIdbRequest_complete(t1._as(t1._as(transaction.objectStore("files")).get(fileId)), type$.nullable_JSObject).then$1$1(new A.AsynchronousIndexedDbFileSystem__readFile_closure(fileId), t1);
    },
    readFully$1(fileId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Uint8List),
        $async$returnValue, $async$self = this, t2, transaction, blocks, file, result, readOperations, reader, row, t, rowOffset, t1, $async$temp1;
      var $async$readFully$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = t2._as(t1.transaction($.$get$AsynchronousIndexedDbFileSystem__storesJs(), "readonly"));
              blocks = t2._as(transaction.objectStore("blocks"));
              $async$goto = 3;
              return A._asyncAwait($async$self._readFile$2(transaction, fileId), $async$readFully$1);
            case 3:
              // returning from await.
              file = $async$result;
              t1 = A._asInt(file.length);
              result = new Uint8Array(t1);
              readOperations = A._setArrayType([], type$.JSArray_Future_void);
              reader = new A._CursorReader(t2._as(blocks.openCursor($async$self._rangeOverFile$1(fileId))), type$._CursorReader_JSObject);
              t1 = type$.void, t2 = type$.JSArray_nullable_Object;
            case 4:
              // for condition
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(reader.moveNext$0(), $async$readFully$1);
            case 6:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              row = reader._cursor;
              if (row == null)
                row = A.throwExpression(A.StateError$("Await moveNext() first"));
              t = t2._as(row.key);
              if (1 < 0 || 1 >= t.length) {
                $async$returnValue = A.ioore(t, 1);
                // goto return
                $async$goto = 1;
                break;
              }
              rowOffset = A._asInt(A._asDouble(t[1]));
              B.JSArray_methods.add$1(readOperations, A.Future_Future$sync(new A.AsynchronousIndexedDbFileSystem_readFully_closure(row, result, rowOffset, Math.min(4096, A._asInt(file.length) - rowOffset)), t1));
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              $async$goto = 7;
              return A._asyncAwait(A.Future_wait(readOperations, t1), $async$readFully$1);
            case 7:
              // returning from await.
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readFully$1, $async$completer);
    },
    _write$2(fileId, writes) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, transaction, blocks, file, t3, changedOffsets, fileCursor, t1;
      var $async$_write$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = t2._as(t1.transaction($.$get$AsynchronousIndexedDbFileSystem__storesJs(), "readwrite"));
              blocks = t2._as(transaction.objectStore("blocks"));
              $async$goto = 2;
              return A._asyncAwait($async$self._readFile$2(transaction, fileId), $async$_write$2);
            case 2:
              // returning from await.
              file = $async$result;
              t1 = writes.replacedBlocks;
              t3 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
              changedOffsets = A.List_List$of(new A.LinkedHashMapKeyIterable(t1, t3), true, t3._eval$1("Iterable.E"));
              B.JSArray_methods.sort$0(changedOffsets);
              t3 = A._arrayInstanceType(changedOffsets);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(new A.MappedListIterable(changedOffsets, t3._eval$1("Future<~>(1)")._as(new A.AsynchronousIndexedDbFileSystem__write_closure(new A.AsynchronousIndexedDbFileSystem__write_writeBlock($async$self, blocks, fileId), writes)), t3._eval$1("MappedListIterable<1,Future<~>>")), type$.void), $async$_write$2);
            case 3:
              // returning from await.
              $async$goto = writes.newFileLength !== A._asInt(file.length) ? 4 : 5;
              break;
            case 4:
              // then
              fileCursor = new A._CursorReader(t2._as(t2._as(transaction.objectStore("files")).openCursor(fileId)), type$._CursorReader_JSObject);
              $async$goto = 6;
              return A._asyncAwait(fileCursor.moveNext$0(), $async$_write$2);
            case 6:
              // returning from await.
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t2._as(fileCursor.get$current().update({name: A._asString(file.name), length: writes.newFileLength})), type$.nullable_Object), $async$_write$2);
            case 7:
              // returning from await.
            case 5:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_write$2, $async$completer);
    },
    truncate$2(_, fileId, $length) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, transaction, files, blocks, file, fileCursor, t1;
      var $async$truncate$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = t2._as(t1.transaction($.$get$AsynchronousIndexedDbFileSystem__storesJs(), "readwrite"));
              files = t2._as(transaction.objectStore("files"));
              blocks = t2._as(transaction.objectStore("blocks"));
              $async$goto = 2;
              return A._asyncAwait($async$self._readFile$2(transaction, fileId), $async$truncate$2);
            case 2:
              // returning from await.
              file = $async$result;
              $async$goto = A._asInt(file.length) > $length ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t2._as(blocks.delete($async$self._rangeOverFile$2$startOffset(fileId, B.JSInt_methods._tdivFast$1($length, 4096) * 4096 + 1))), type$.nullable_Object), $async$truncate$2);
            case 5:
              // returning from await.
            case 4:
              // join
              fileCursor = new A._CursorReader(t2._as(files.openCursor(fileId)), type$._CursorReader_JSObject);
              $async$goto = 6;
              return A._asyncAwait(fileCursor.moveNext$0(), $async$truncate$2);
            case 6:
              // returning from await.
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t2._as(fileCursor.get$current().update({name: A._asString(file.name), length: $length})), type$.nullable_Object), $async$truncate$2);
            case 7:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$truncate$2, $async$completer);
    },
    deleteFile$1(id) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, transaction, blocksRange, t1;
      var $async$deleteFile$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._database;
              t1.toString;
              t2 = type$.JSObject;
              transaction = t2._as(t1.transaction(A._setArrayType(["files", "blocks"], type$.JSArray_String), "readwrite"));
              blocksRange = $async$self._rangeOverFile$3$endOffsetInclusive$startOffset(id, 9007199254740992, 0);
              t1 = type$.nullable_Object;
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(A._setArrayType([A.CompleteIdbRequest_complete(t2._as(t2._as(transaction.objectStore("blocks")).delete(blocksRange)), t1), A.CompleteIdbRequest_complete(t2._as(t2._as(transaction.objectStore("files")).delete(id)), t1)], type$.JSArray_Future_void), type$.void), $async$deleteFile$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$deleteFile$1, $async$completer);
    },
    set$_database(_database) {
      this._database = type$.nullable_JSObject._as(_database);
    },
    set$_storeBlobs(_storeBlobs) {
      this._storeBlobs = A._asBool(_storeBlobs);
    }
  };
  A.AsynchronousIndexedDbFileSystem_open_closure.prototype = {
    call$1(change) {
      var database,
        t1 = type$.JSObject;
      t1._as(change);
      database = t1._as(this.openRequest.result);
      if (A._asInt(change.oldVersion) === 0) {
        t1._as(t1._as(database.createObjectStore("files", {autoIncrement: true})).createIndex("fileName", "name", {unique: true}));
        t1._as(database.createObjectStore("blocks"));
      }
    },
    $signature: 7
  };
  A.AsynchronousIndexedDbFileSystem__readFile_closure.prototype = {
    call$1(value) {
      type$.nullable_JSObject._as(value);
      if (value == null)
        throw A.wrapException(A.ArgumentError$value(this.fileId, "fileId", "File not found in database"));
      else
        return value;
    },
    $signature: 52
  };
  A.AsynchronousIndexedDbFileSystem_readFully_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.row;
              $async$goto = A.JSAnyUtilityExtension_instanceOfString(t1.value, "Blob") ? 2 : 4;
              break;
            case 2:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.ReadBlob_byteBuffer(type$.JSObject._as(t1.value)), $async$call$0);
            case 5:
              // returning from await.
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              $async$result = type$.NativeByteBuffer._as(t1.value);
            case 3:
              // join
              data = $async$result;
              B.NativeUint8List_methods.setAll$2($async$self.result, $async$self.rowOffset, A.NativeUint8List_NativeUint8List$view(data, 0, $async$self.length));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A.AsynchronousIndexedDbFileSystem__write_writeBlock.prototype = {
    call$2(blockStart, block) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, _this, t3, t4, cursor, value;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.blocks;
              t2 = self;
              _this = $async$self.fileId;
              t3 = type$.JSArray_double;
              t4 = type$.JSObject;
              $async$goto = 2;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t4._as(t1.openCursor(t4._as(t2.IDBKeyRange.only(A._setArrayType([_this, blockStart], t3))))), type$.nullable_JSObject), $async$call$2);
            case 2:
              // returning from await.
              cursor = $async$result;
              value = $async$self.$this._storeBlobs ? t4._as(new t2.Blob(A._setArrayType([block], type$.JSArray_NativeUint8List))) : block.buffer;
              t2 = type$.nullable_Object;
              $async$goto = cursor == null ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t4._as(t1.put(value, A._setArrayType([_this, blockStart], t3))), t2), $async$call$2);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 7;
              return A._asyncAwait(A.CompleteIdbRequest_complete(t4._as(cursor.update(value)), t2), $async$call$2);
            case 7:
              // returning from await.
            case 4:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 53
  };
  A.AsynchronousIndexedDbFileSystem__write_closure.prototype = {
    call$1(offset) {
      var t1;
      A._asInt(offset);
      t1 = this.writes.replacedBlocks.$index(0, offset);
      t1.toString;
      return this.writeBlock.call$2(offset, t1);
    },
    $signature: 54
  };
  A._FileWriteRequest.prototype = {
    _updateBlock$3(blockOffset, offsetInBlock, data) {
      B.NativeUint8List_methods.setAll$2(this.replacedBlocks.putIfAbsent$2(blockOffset, new A._FileWriteRequest__updateBlock_closure(this, blockOffset)), offsetInBlock, data);
    },
    addWrite$2(offset, data) {
      var t1, offsetInData, offsetInFile, t2, offsetInBlock, t3, bytesToWrite, t4, chunk;
      for (t1 = data.length, offsetInData = 0; offsetInData < t1;) {
        offsetInFile = offset + offsetInData;
        t2 = B.JSInt_methods._tdivFast$1(offsetInFile, 4096);
        offsetInBlock = B.JSInt_methods.$mod(offsetInFile, 4096);
        t3 = t1 - offsetInData;
        if (offsetInBlock !== 0)
          bytesToWrite = Math.min(4096 - offsetInBlock, t3);
        else {
          bytesToWrite = Math.min(4096, t3);
          offsetInBlock = 0;
        }
        t3 = data.buffer;
        t4 = data.byteOffset;
        chunk = new Uint8Array(t3, t4 + offsetInData, bytesToWrite);
        offsetInData += bytesToWrite;
        this._updateBlock$3(t2 * 4096, offsetInBlock, chunk);
      }
      this.set$newFileLength(Math.max(this.newFileLength, offset + t1));
    },
    set$newFileLength(newFileLength) {
      this.newFileLength = A._asInt(newFileLength);
    }
  };
  A._FileWriteRequest__updateBlock_closure.prototype = {
    call$0() {
      var block = new Uint8Array(4096),
        t1 = this.$this.originalContent,
        t2 = t1.length,
        t3 = this.blockOffset;
      if (t2 > t3)
        B.NativeUint8List_methods.setAll$2(block, 0, A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset + t3, A._asIntQ(Math.min(4096, t2 - t3))));
      return block;
    },
    $signature: 55
  };
  A._OffsetAndBuffer.prototype = {};
  A.IndexedDbFileSystem.prototype = {
    _submitWork$1(work) {
      var t1 = this._asynchronous._database;
      if (t1 == null)
        A.throwExpression(A.VfsException$(10));
      if (work.insertInto$1(this._pendingWork)) {
        this._startWorkingIfNeeded$0();
        return work.completer.future;
      } else
        return A.Future_Future$value(type$.void);
    },
    _startWorkingIfNeeded$0() {
      var t1, item, action, t2, t3, result, _this = this;
      if (_this._currentWorkItem == null && !_this._pendingWork.get$isEmpty(0)) {
        t1 = _this._pendingWork;
        item = _this._currentWorkItem = t1.get$first(0);
        t1.remove$1(0, item);
        t1 = A.Future_Future(item.get$run(), type$.void);
        action = type$.dynamic_Function._as(new A.IndexedDbFileSystem__startWorkingIfNeeded_closure(_this));
        t2 = t1.$ti;
        t3 = $.Zone__current;
        result = new A._Future(t3, t2);
        if (t3 !== B.C__RootZone)
          action = t3.registerCallback$1$1(action, type$.dynamic);
        t1._addListener$1(new A._FutureListener(result, 8, action, null, t2._eval$1("_FutureListener<1,1>")));
        item.completer.complete$1(result);
      }
    },
    _fileId$1(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$self = this, t2, t1;
      var $async$_fileId$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._knownFileIds;
              $async$goto = t1.containsKey$1(path) ? 3 : 5;
              break;
            case 3:
              // then
              t1 = t1.$index(0, path);
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = 6;
              return A._asyncAwait($async$self._asynchronous.fileIdForPath$1(path), $async$_fileId$1);
            case 6:
              // returning from await.
              t2 = $async$result;
              t2.toString;
              t1.$indexSet(0, path, t2);
              $async$returnValue = t2;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_fileId$1, $async$completer);
    },
    _readFiles$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t3, t4, t5, $name, fileId, buffer, data, t6, t1, rawFiles;
      var $async$_readFiles$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._asynchronous;
              $async$goto = 2;
              return A._asyncAwait(t1.listFiles$0(), $async$_readFiles$0);
            case 2:
              // returning from await.
              rawFiles = $async$result;
              $async$self._knownFileIds.addAll$1(0, rawFiles);
              t2 = rawFiles.get$entries(), t2 = t2.get$iterator(t2), t3 = $async$self._memory.fileData, t4 = type$.Uint8Buffer._eval$1("Iterable<TypedDataBuffer.E>");
            case 3:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              t5 = t2.get$current();
              $name = t5.key;
              fileId = t5.value;
              buffer = new A.Uint8Buffer(new Uint8Array(0), 0);
              $async$goto = 5;
              return A._asyncAwait(t1.readFully$1(fileId), $async$_readFiles$0);
            case 5:
              // returning from await.
              data = $async$result;
              t5 = data.length;
              buffer.set$length(0, t5);
              t4._as(data);
              t6 = buffer._typed_buffer$_length;
              if (t5 > t6)
                A.throwExpression(A.RangeError$range(t5, 0, t6, null, null));
              B.NativeUint8List_methods.setRange$4(buffer._typed_buffer$_buffer, 0, t5, data, 0);
              t3.$indexSet(0, $name, buffer);
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_readFiles$0, $async$completer);
    },
    flush$0() {
      return this._submitWork$1(new A._FunctionWorkItem(type$.void_Function._as(new A.IndexedDbFileSystem_flush_closure()), new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void)));
    },
    xAccess$2(path, flags) {
      return this._memory.fileData.containsKey$1(path) ? 1 : 0;
    },
    xDelete$2(path, syncDir) {
      var _this = this;
      _this._memory.fileData.remove$1(0, path);
      if (!_this._inMemoryOnlyFiles.remove$1(0, path))
        _this._submitWork$1(new A._DeleteFileWorkItem(_this, path, new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void)));
    },
    xFullPathName$1(path) {
      return $.$get$url().normalize$1("/" + path);
    },
    xOpen$2(path, flags) {
      var t1, t2, inMemoryFile, _this = this,
        pathStr = path.path;
      if (pathStr == null)
        pathStr = A.GenerateFilename_randomFileName(_this.random, "/");
      t1 = _this._memory;
      t2 = t1.fileData.containsKey$1(pathStr) ? 1 : 0;
      inMemoryFile = t1.xOpen$2(new A.Sqlite3Filename(pathStr), flags);
      if (t2 === 0)
        if ((flags & 8) !== 0)
          _this._inMemoryOnlyFiles.add$1(0, pathStr);
        else
          _this._submitWork$1(new A._CreateFileWorkItem(_this, pathStr, new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void)));
      return new A._Record_2_file_outFlags(new A._IndexedDbFile(_this, inMemoryFile._0, pathStr), 0);
    },
    xSleep$1(duration) {
    }
  };
  A.IndexedDbFileSystem__startWorkingIfNeeded_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._currentWorkItem = null;
      t1._startWorkingIfNeeded$0();
    },
    $signature: 4
  };
  A.IndexedDbFileSystem_flush_closure.prototype = {
    call$0() {
    },
    $signature: 4
  };
  A._IndexedDbFile.prototype = {
    xRead$2(target, fileOffset) {
      this.memoryFile.xRead$2(target, fileOffset);
    },
    get$xDeviceCharacteristics() {
      return 0;
    },
    xCheckReservedLock$0() {
      return this.memoryFile._lockMode >= 2 ? 1 : 0;
    },
    xClose$0() {
    },
    xFileSize$0() {
      return this.memoryFile.xFileSize$0();
    },
    xLock$1(mode) {
      this.memoryFile._lockMode = mode;
      return null;
    },
    xSync$1(flags) {
    },
    xTruncate$1(size) {
      var _this = this,
        t1 = _this.vfs,
        t2 = t1._asynchronous._database;
      if (t2 == null)
        A.throwExpression(A.VfsException$(10));
      _this.memoryFile.xTruncate$1(size);
      if (!t1._inMemoryOnlyFiles.contains$1(0, _this.path))
        t1._submitWork$1(new A._FunctionWorkItem(type$.void_Function._as(new A._IndexedDbFile_xTruncate_closure(_this, size)), new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void)));
    },
    xUnlock$1(mode) {
      this.memoryFile._lockMode = mode;
      return null;
    },
    xWrite$2(buffer, fileOffset) {
      var previousContent, previousList, copy, t3, t4, _this = this,
        t1 = _this.vfs,
        t2 = t1._asynchronous._database;
      if (t2 == null)
        A.throwExpression(A.VfsException$(10));
      t2 = _this.path;
      if (t1._inMemoryOnlyFiles.contains$1(0, t2)) {
        _this.memoryFile.xWrite$2(buffer, fileOffset);
        return;
      }
      previousContent = t1._memory.fileData.$index(0, t2);
      if (previousContent == null)
        previousContent = new A.Uint8Buffer(new Uint8Array(0), 0);
      previousList = A.NativeUint8List_NativeUint8List$view(previousContent._typed_buffer$_buffer.buffer, 0, previousContent._typed_buffer$_length);
      _this.memoryFile.xWrite$2(buffer, fileOffset);
      copy = new Uint8Array(buffer.length);
      B.NativeUint8List_methods.setAll$2(copy, 0, buffer);
      t3 = A._setArrayType([], type$.JSArray__OffsetAndBuffer);
      t4 = $.Zone__current;
      B.JSArray_methods.add$1(t3, new A._OffsetAndBuffer(fileOffset, copy));
      t1._submitWork$1(new A._WriteFileWorkItem(t1, t2, previousList, t3, new A._SyncCompleter(new A._Future(t4, type$._Future_void), type$._SyncCompleter_void)));
    },
    $isVirtualFileSystemFile: 1
  };
  A._IndexedDbFile_xTruncate_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.vfs;
              $async$temp1 = t2._asynchronous;
              $async$goto = 3;
              return A._asyncAwait(t2._fileId$1(t1.path), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.truncate$2(0, $async$result, $async$self.size);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A._IndexedDbWorkItem.prototype = {
    insertInto$1(pending) {
      type$.LinkedList__IndexedDbWorkItem._as(pending);
      pending.$ti._precomputed1._as(this);
      pending._insertBefore$3$updateFirst(pending._collection$_first, this, false);
      return true;
    }
  };
  A._FunctionWorkItem.prototype = {
    run$0() {
      return this.work.call$0();
    }
  };
  A._DeleteFileWorkItem.prototype = {
    insertInto$1(pending) {
      var current, t1, previous, t2;
      type$.LinkedList__IndexedDbWorkItem._as(pending);
      if (!pending.get$isEmpty(0)) {
        current = pending.get$last(0);
        for (t1 = this.path; current != null;)
          if (current instanceof A._DeleteFileWorkItem)
            if (current.path === t1)
              return false;
            else
              current = current.get$previous();
          else if (current instanceof A._WriteFileWorkItem) {
            previous = current.get$previous();
            if (current.path === t1) {
              t2 = current._list;
              t2.toString;
              t2._unlink$1(A._instanceType(current)._eval$1("LinkedListEntry.E")._as(current));
            }
            current = previous;
          } else if (current instanceof A._CreateFileWorkItem) {
            if (current.path === t1) {
              t1 = current._list;
              t1.toString;
              t1._unlink$1(A._instanceType(current)._eval$1("LinkedListEntry.E")._as(current));
              return false;
            }
            current = current.get$previous();
          } else
            break;
      }
      pending.$ti._precomputed1._as(this);
      pending._insertBefore$3$updateFirst(pending._collection$_first, this, false);
      return true;
    },
    run$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, id;
      var $async$run$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.fileSystem;
              t2 = $async$self.path;
              $async$goto = 2;
              return A._asyncAwait(t1._fileId$1(t2), $async$run$0);
            case 2:
              // returning from await.
              id = $async$result;
              t1._knownFileIds.remove$1(0, t2);
              $async$goto = 3;
              return A._asyncAwait(t1._asynchronous.deleteFile$1(id), $async$run$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$0, $async$completer);
    }
  };
  A._CreateFileWorkItem.prototype = {
    run$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, $async$temp1, $async$temp2;
      var $async$run$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.fileSystem;
              t2 = $async$self.path;
              $async$temp1 = t1._knownFileIds;
              $async$temp2 = t2;
              $async$goto = 2;
              return A._asyncAwait(t1._asynchronous.createFile$1(t2), $async$run$0);
            case 2:
              // returning from await.
              $async$temp1.$indexSet(0, $async$temp2, $async$result);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$0, $async$completer);
    }
  };
  A._WriteFileWorkItem.prototype = {
    insertInto$1(pending) {
      var current, t1;
      type$.LinkedList__IndexedDbWorkItem._as(pending);
      current = pending._collection$_length === 0 ? null : pending.get$last(0);
      for (t1 = this.path; current != null;)
        if (current instanceof A._WriteFileWorkItem)
          if (current.path === t1) {
            B.JSArray_methods.addAll$1(current.writes, this.writes);
            return false;
          } else
            current = current.get$previous();
        else if (current instanceof A._CreateFileWorkItem) {
          if (current.path === t1)
            break;
          current = current.get$previous();
        } else
          break;
      pending.$ti._precomputed1._as(this);
      pending._insertBefore$3$updateFirst(pending._collection$_first, this, false);
      return true;
    },
    run$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, _i, write, t1, request, $async$temp1;
      var $async$run$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.originalContent;
              request = new A._FileWriteRequest(t1, A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Uint8List), t1.length);
              for (t1 = $async$self.writes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
                write = t1[_i];
                request.addWrite$2(write.offset, write.buffer);
              }
              t1 = $async$self.fileSystem;
              $async$temp1 = t1._asynchronous;
              $async$goto = 3;
              return A._asyncAwait(t1._fileId$1($async$self.path), $async$run$0);
            case 3:
              // returning from await.
              $async$goto = 2;
              return A._asyncAwait($async$temp1._write$2($async$result, request), $async$run$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$0, $async$completer);
    }
  };
  A.WasmBindings.prototype = {
    allocateBytes$2$additionalLength(bytes, additionalLength) {
      var t1, ptr, t2;
      type$.List_int._as(bytes);
      t1 = J.getInterceptor$asx(bytes);
      ptr = A._asInt(A._asDouble(this._malloc.call(null, t1.get$length(bytes) + additionalLength)));
      t2 = A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(this.memory.buffer), 0, null);
      B.NativeUint8List_methods.setRange$3(t2, ptr, ptr + t1.get$length(bytes), bytes);
      B.NativeUint8List_methods.fillRange$3(t2, ptr + t1.get$length(bytes), ptr + t1.get$length(bytes) + additionalLength, 0);
      return ptr;
    },
    allocateBytes$1(bytes) {
      return this.allocateBytes$2$additionalLength(bytes, 0);
    },
    sqlite3_db_config$3(db, op, value) {
      var $function = this._sqlite3_db_config;
      if ($function != null)
        return A._asInt(A._asDouble($function.call(null, db, op, value)));
      else
        return 1;
    }
  };
  A._InjectedValues.prototype = {
    _InjectedValues$0() {
      var t2, _this = this,
        t1 = type$.JSObject,
        memory = t1._as(new self.WebAssembly.Memory({initial: 16}));
      _this.___InjectedValues_memory_A = memory;
      t2 = type$.String;
      _this.set$___InjectedValues_injectedValues_A(type$.Map_of_String_and_Map_String_JSObject._as(A.LinkedHashMap_LinkedHashMap$_literal(["env", A.LinkedHashMap_LinkedHashMap$_literal(["memory", memory], t2, t1), "dart", A.LinkedHashMap_LinkedHashMap$_literal(["error_log", A._functionToJS1(new A._InjectedValues_closure(memory)), "xOpen", A._functionToJS5(new A._InjectedValues_closure0(_this, memory)), "xDelete", A._functionToJS3(new A._InjectedValues_closure1(_this, memory)), "xAccess", A._functionToJS4(new A._InjectedValues_closure2(_this, memory)), "xFullPathname", A._functionToJS4(new A._InjectedValues_closure3(_this, memory)), "xRandomness", A._functionToJS3(new A._InjectedValues_closure4(_this, memory)), "xSleep", A._functionToJS2(new A._InjectedValues_closure5(_this)), "xCurrentTimeInt64", A._functionToJS2(new A._InjectedValues_closure6(_this, memory)), "xDeviceCharacteristics", A._functionToJS1(new A._InjectedValues_closure7(_this)), "xClose", A._functionToJS1(new A._InjectedValues_closure8(_this)), "xRead", A._functionToJS4(new A._InjectedValues_closure9(_this, memory)), "xWrite", A._functionToJS4(new A._InjectedValues_closure10(_this, memory)), "xTruncate", A._functionToJS2(new A._InjectedValues_closure11(_this)), "xSync", A._functionToJS2(new A._InjectedValues_closure12(_this)), "xFileSize", A._functionToJS2(new A._InjectedValues_closure13(_this, memory)), "xLock", A._functionToJS2(new A._InjectedValues_closure14(_this)), "xUnlock", A._functionToJS2(new A._InjectedValues_closure15(_this)), "xCheckReservedLock", A._functionToJS2(new A._InjectedValues_closure16(_this, memory)), "function_xFunc", A._functionToJS3(new A._InjectedValues_closure17(_this)), "function_xStep", A._functionToJS3(new A._InjectedValues_closure18(_this)), "function_xInverse", A._functionToJS3(new A._InjectedValues_closure19(_this)), "function_xFinal", A._functionToJS1(new A._InjectedValues_closure20(_this)), "function_xValue", A._functionToJS1(new A._InjectedValues_closure21(_this)), "function_forget", A._functionToJS1(new A._InjectedValues_closure22(_this)), "function_compare", A._functionToJS5(new A._InjectedValues_closure23(_this, memory)), "function_hook", A._functionToJS5(new A._InjectedValues_closure24(_this, memory))], t2, t1)], t2, type$.Map_String_JSObject)));
    },
    set$___InjectedValues_injectedValues_A(___InjectedValues_injectedValues_A) {
      this.___InjectedValues_injectedValues_A = type$.Map_of_String_and_Map_String_JSObject._as(___InjectedValues_injectedValues_A);
    }
  };
  A._InjectedValues_closure.prototype = {
    call$1(ptr) {
      A.print("[sqlite3] " + A.WrappedMemory_readString(this.memory, A._asInt(ptr)));
    },
    $signature: 9
  };
  A._InjectedValues_closure0.prototype = {
    call$5(vfsId, zName, dartFdPtr, flags, pOutFlags) {
      var t1, t2, t3;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(dartFdPtr);
      A._asInt(flags);
      A._asInt(pOutFlags);
      t1 = this.$this;
      t2 = t1.callbacks.registeredVfs.$index(0, vfsId);
      t2.toString;
      t3 = this.memory;
      return A._runVfs(new A._InjectedValues__closure13(t1, t2, new A.Sqlite3Filename(A.WrappedMemory_readNullableString(t3, zName, null)), flags, t3, dartFdPtr, pOutFlags));
    },
    $signature: 14
  };
  A._InjectedValues__closure13.prototype = {
    call$0() {
      var t2, t3, t4, _this = this,
        result = _this.vfs.xOpen$2(_this.path, _this.flags),
        t1 = _this.$this.callbacks.openedFiles,
        id = t1.__js_helper$_length;
      t1.$indexSet(0, id, result._0);
      t1 = _this.memory;
      t2 = type$.NativeByteBuffer;
      t3 = A.NativeInt32List_NativeInt32List$view(t2._as(t1.buffer), 0, null);
      t4 = B.JSInt_methods._shrOtherPositive$1(_this.dartFdPtr, 2);
      if (!(t4 < t3.length))
        return A.ioore(t3, t4);
      t3[t4] = id;
      t3 = _this.pOutFlags;
      if (t3 !== 0) {
        t1 = A.NativeInt32List_NativeInt32List$view(t2._as(t1.buffer), 0, null);
        t3 = B.JSInt_methods._shrOtherPositive$1(t3, 2);
        if (!(t3 < t1.length))
          return A.ioore(t1, t3);
        t1[t3] = result._1;
      }
    },
    $signature: 0
  };
  A._InjectedValues_closure1.prototype = {
    call$3(vfsId, zName, syncDir) {
      var t1;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(syncDir);
      t1 = this.$this.callbacks.registeredVfs.$index(0, vfsId);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure12(t1, A.WrappedMemory_readString(this.memory, zName), syncDir));
    },
    $signature: 23
  };
  A._InjectedValues__closure12.prototype = {
    call$0() {
      return this.vfs.xDelete$2(this.path, this.syncDir);
    },
    $signature: 0
  };
  A._InjectedValues_closure2.prototype = {
    call$4(vfsId, zName, flags, pResOut) {
      var t1, t2;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(flags);
      A._asInt(pResOut);
      t1 = this.$this.callbacks.registeredVfs.$index(0, vfsId);
      t1.toString;
      t2 = this.memory;
      return A._runVfs(new A._InjectedValues__closure11(t1, A.WrappedMemory_readString(t2, zName), flags, t2, pResOut));
    },
    $signature: 18
  };
  A._InjectedValues__closure11.prototype = {
    call$0() {
      var _this = this,
        res = _this.vfs.xAccess$2(_this.path, _this.flags),
        t1 = A.NativeInt32List_NativeInt32List$view(type$.NativeByteBuffer._as(_this.memory.buffer), 0, null),
        t2 = B.JSInt_methods._shrOtherPositive$1(_this.pResOut, 2);
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = res;
    },
    $signature: 0
  };
  A._InjectedValues_closure3.prototype = {
    call$4(vfsId, zName, nOut, zOut) {
      var t1, t2;
      A._asInt(vfsId);
      A._asInt(zName);
      A._asInt(nOut);
      A._asInt(zOut);
      t1 = this.$this.callbacks.registeredVfs.$index(0, vfsId);
      t1.toString;
      t2 = this.memory;
      return A._runVfs(new A._InjectedValues__closure10(t1, A.WrappedMemory_readString(t2, zName), nOut, t2, zOut));
    },
    $signature: 18
  };
  A._InjectedValues__closure10.prototype = {
    call$0() {
      var t2, t3, _this = this,
        encoded = B.C_Utf8Encoder.convert$1(_this.vfs.xFullPathName$1(_this.path)),
        t1 = encoded.length;
      if (t1 > _this.nOut)
        throw A.wrapException(A.VfsException$(14));
      t2 = A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(_this.memory.buffer), 0, null);
      t3 = _this.zOut;
      B.NativeUint8List_methods.setAll$2(t2, t3, encoded);
      t1 = t3 + t1;
      if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
      t2[t1] = 0;
    },
    $signature: 0
  };
  A._InjectedValues_closure4.prototype = {
    call$3(vfsId, nByte, zOut) {
      var t1;
      A._asInt(vfsId);
      A._asInt(nByte);
      A._asInt(zOut);
      t1 = this.$this.callbacks.registeredVfs.$index(0, vfsId);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure9(t1, this.memory, zOut, nByte));
    },
    $signature: 23
  };
  A._InjectedValues__closure9.prototype = {
    call$0() {
      var _this = this;
      _this.vfs.xRandomness$1(A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(_this.memory.buffer), _this.zOut, _this.nByte));
    },
    $signature: 0
  };
  A._InjectedValues_closure5.prototype = {
    call$2(vfsId, micros) {
      var t1;
      A._asInt(vfsId);
      A._asInt(micros);
      t1 = this.$this.callbacks.registeredVfs.$index(0, vfsId);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure8(t1, micros));
    },
    $signature: 1
  };
  A._InjectedValues__closure8.prototype = {
    call$0() {
      this.vfs.xSleep$1(new A.Duration(this.micros));
    },
    $signature: 0
  };
  A._InjectedValues_closure6.prototype = {
    call$2(vfsId, target) {
      var t1, t2;
      A._asInt(vfsId);
      A._asInt(target);
      this.$this.callbacks.registeredVfs.$index(0, vfsId).toString;
      t1 = Date.now();
      t1 = type$.JavaScriptBigInt._as(self.BigInt(t1));
      t2 = type$.NativeByteBuffer._as(this.memory.buffer);
      A._checkViewArguments(t2, 0, null);
      t2 = new DataView(t2, 0);
      A.JSObjectUnsafeUtilExtension__callMethod(t2, "setBigInt64", target, t1, true, null);
    },
    $signature: 60
  };
  A._InjectedValues_closure7.prototype = {
    call$1(fd) {
      return this.$this.callbacks.openedFiles.$index(0, A._asInt(fd)).get$xDeviceCharacteristics();
    },
    $signature: 11
  };
  A._InjectedValues_closure8.prototype = {
    call$1(fd) {
      var t1, t2;
      A._asInt(fd);
      t1 = this.$this;
      t2 = t1.callbacks.openedFiles.$index(0, fd);
      t2.toString;
      return A._runVfs(new A._InjectedValues__closure7(t1, t2, fd));
    },
    $signature: 11
  };
  A._InjectedValues__closure7.prototype = {
    call$0() {
      this.file.xClose$0();
      this.$this.callbacks.openedFiles.remove$1(0, this.fd);
    },
    $signature: 0
  };
  A._InjectedValues_closure9.prototype = {
    call$4(fd, target, amount, offset) {
      var t1;
      A._asInt(fd);
      A._asInt(target);
      A._asInt(amount);
      type$.JavaScriptBigInt._as(offset);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure6(t1, this.memory, target, amount, offset));
    },
    $signature: 15
  };
  A._InjectedValues__closure6.prototype = {
    call$0() {
      var _this = this;
      _this.file.xRead$2(A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(_this.memory.buffer), _this.target, _this.amount), A._asInt(A._asDouble(self.Number(_this.offset))));
    },
    $signature: 0
  };
  A._InjectedValues_closure10.prototype = {
    call$4(fd, source, amount, offset) {
      var t1;
      A._asInt(fd);
      A._asInt(source);
      A._asInt(amount);
      type$.JavaScriptBigInt._as(offset);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure5(t1, this.memory, source, amount, offset));
    },
    $signature: 15
  };
  A._InjectedValues__closure5.prototype = {
    call$0() {
      var _this = this;
      _this.file.xWrite$2(A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(_this.memory.buffer), _this.source, _this.amount), A._asInt(A._asDouble(self.Number(_this.offset))));
    },
    $signature: 0
  };
  A._InjectedValues_closure11.prototype = {
    call$2(fd, size) {
      var t1;
      A._asInt(fd);
      type$.JavaScriptBigInt._as(size);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure4(t1, size));
    },
    $signature: 62
  };
  A._InjectedValues__closure4.prototype = {
    call$0() {
      return this.file.xTruncate$1(A._asInt(A._asDouble(self.Number(this.size))));
    },
    $signature: 0
  };
  A._InjectedValues_closure12.prototype = {
    call$2(fd, flags) {
      var t1;
      A._asInt(fd);
      A._asInt(flags);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure3(t1, flags));
    },
    $signature: 1
  };
  A._InjectedValues__closure3.prototype = {
    call$0() {
      return this.file.xSync$1(this.flags);
    },
    $signature: 0
  };
  A._InjectedValues_closure13.prototype = {
    call$2(fd, sizePtr) {
      var t1;
      A._asInt(fd);
      A._asInt(sizePtr);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure2(t1, this.memory, sizePtr));
    },
    $signature: 1
  };
  A._InjectedValues__closure2.prototype = {
    call$0() {
      var size = this.file.xFileSize$0(),
        t1 = A.NativeInt32List_NativeInt32List$view(type$.NativeByteBuffer._as(this.memory.buffer), 0, null),
        t2 = B.JSInt_methods._shrOtherPositive$1(this.sizePtr, 2);
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = size;
    },
    $signature: 0
  };
  A._InjectedValues_closure14.prototype = {
    call$2(fd, flags) {
      var t1;
      A._asInt(fd);
      A._asInt(flags);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure1(t1, flags));
    },
    $signature: 1
  };
  A._InjectedValues__closure1.prototype = {
    call$0() {
      return this.file.xLock$1(this.flags);
    },
    $signature: 0
  };
  A._InjectedValues_closure15.prototype = {
    call$2(fd, flags) {
      var t1;
      A._asInt(fd);
      A._asInt(flags);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure0(t1, flags));
    },
    $signature: 1
  };
  A._InjectedValues__closure0.prototype = {
    call$0() {
      return this.file.xUnlock$1(this.flags);
    },
    $signature: 0
  };
  A._InjectedValues_closure16.prototype = {
    call$2(fd, pResOut) {
      var t1;
      A._asInt(fd);
      A._asInt(pResOut);
      t1 = this.$this.callbacks.openedFiles.$index(0, fd);
      t1.toString;
      return A._runVfs(new A._InjectedValues__closure(t1, this.memory, pResOut));
    },
    $signature: 1
  };
  A._InjectedValues__closure.prototype = {
    call$0() {
      var $status = this.file.xCheckReservedLock$0(),
        t1 = A.NativeInt32List_NativeInt32List$view(type$.NativeByteBuffer._as(this.memory.buffer), 0, null),
        t2 = B.JSInt_methods._shrOtherPositive$1(this.pResOut, 2);
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = $status;
    },
    $signature: 0
  };
  A._InjectedValues_closure17.prototype = {
    call$3(ctx, args, value) {
      var t1, t2;
      A._asInt(ctx);
      A._asInt(args);
      A._asInt(value);
      t1 = this.$this;
      t2 = t1.___InjectedValues_bindings_A;
      t2 === $ && A.throwLateFieldNI("bindings");
      t1.callbacks.functions.$index(0, A._asInt(A._asDouble(t2._sqlite3_user_data.call(null, ctx)))).get$xFunc().call$2(new A.WasmContext(), new A.WasmValueList(t1.___InjectedValues_bindings_A, args, value));
    },
    $signature: 13
  };
  A._InjectedValues_closure18.prototype = {
    call$3(ctx, args, value) {
      var t1, t2;
      A._asInt(ctx);
      A._asInt(args);
      A._asInt(value);
      t1 = this.$this;
      t2 = t1.___InjectedValues_bindings_A;
      t2 === $ && A.throwLateFieldNI("bindings");
      t1.callbacks.functions.$index(0, A._asInt(A._asDouble(t2._sqlite3_user_data.call(null, ctx)))).get$xStep().call$2(new A.WasmContext(), new A.WasmValueList(t1.___InjectedValues_bindings_A, args, value));
    },
    $signature: 13
  };
  A._InjectedValues_closure19.prototype = {
    call$3(ctx, args, value) {
      var t1, t2;
      A._asInt(ctx);
      A._asInt(args);
      A._asInt(value);
      t1 = this.$this;
      t2 = t1.___InjectedValues_bindings_A;
      t2 === $ && A.throwLateFieldNI("bindings");
      t1.callbacks.functions.$index(0, A._asInt(A._asDouble(t2._sqlite3_user_data.call(null, ctx)))).get$xInverse().call$2(new A.WasmContext(), new A.WasmValueList(t1.___InjectedValues_bindings_A, args, value));
    },
    $signature: 13
  };
  A._InjectedValues_closure20.prototype = {
    call$1(ctx) {
      var t1, t2;
      A._asInt(ctx);
      t1 = this.$this;
      t2 = t1.___InjectedValues_bindings_A;
      t2 === $ && A.throwLateFieldNI("bindings");
      t1.callbacks.functions.$index(0, A._asInt(A._asDouble(t2._sqlite3_user_data.call(null, ctx)))).get$xFinal().call$1(new A.WasmContext());
    },
    $signature: 9
  };
  A._InjectedValues_closure21.prototype = {
    call$1(ctx) {
      var t1, t2;
      A._asInt(ctx);
      t1 = this.$this;
      t2 = t1.___InjectedValues_bindings_A;
      t2 === $ && A.throwLateFieldNI("bindings");
      t1.callbacks.functions.$index(0, A._asInt(A._asDouble(t2._sqlite3_user_data.call(null, ctx)))).get$xValue().call$1(new A.WasmContext());
    },
    $signature: 9
  };
  A._InjectedValues_closure22.prototype = {
    call$1(ctx) {
      this.$this.callbacks.functions.remove$1(0, A._asInt(ctx));
    },
    $signature: 9
  };
  A._InjectedValues_closure23.prototype = {
    call$5(ctx, lengthA, a, lengthB, b) {
      var t1, aStr, bStr;
      A._asInt(ctx);
      A._asInt(lengthA);
      A._asInt(a);
      A._asInt(lengthB);
      A._asInt(b);
      t1 = this.memory;
      aStr = A.WrappedMemory_readNullableString(t1, a, lengthA);
      bStr = A.WrappedMemory_readNullableString(t1, b, lengthB);
      return this.$this.callbacks.functions.$index(0, ctx).get$collation().call$2(aStr, bStr);
    },
    $signature: 14
  };
  A._InjectedValues_closure24.prototype = {
    call$5(id, kind, _, table, rowId) {
      A._asInt(id);
      A._asInt(kind);
      A._asInt(_);
      A._asInt(table);
      type$.JavaScriptBigInt._as(rowId);
      A.WrappedMemory_readString(this.memory, table);
    },
    $signature: 64
  };
  A.DartCallbacks.prototype = {
    set$installedUpdateHook(installedUpdateHook) {
      this.installedUpdateHook = type$.nullable_void_Function_int_String_int._as(installedUpdateHook);
    }
  };
  A.BasicLock.prototype = {
    synchronized$1$2$timeout(func, timeout, $T) {
      return this.synchronized$body$BasicLock($T._eval$1("0/()")._as(func), timeout, $T, $T);
    },
    synchronized$1$1(func, $T) {
      return this.synchronized$1$2$timeout(func, null, $T);
    },
    synchronized$body$BasicLock(func, timeout, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, result, complete, t1, prev, completer;
      var $async$synchronized$1$2$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              prev = $async$self.last;
              completer = new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void);
              $async$self.last = completer.future;
              $async$handler = 3;
              $async$goto = prev != null ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return A._asyncAwait(prev, $async$synchronized$1$2$timeout);
            case 8:
              // returning from await.
            case 7:
              // join
              result = func.call$0();
              $async$goto = result instanceof A._Future ? 9 : 11;
              break;
            case 9:
              // then
              t1 = result;
              $async$goto = 12;
              return A._asyncAwait($T._eval$1("Future<0>")._is(t1) ? t1 : A._Future$value($T._as(t1), $T), $async$synchronized$1$2$timeout);
            case 12:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              // goto join
              $async$goto = 10;
              break;
            case 11:
              // else
              $async$returnValue = result;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
            case 10:
              // join
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              complete = new A.BasicLock_synchronized_complete($async$self, completer);
              complete.call$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$synchronized$1$2$timeout, $async$completer);
    },
    toString$0(_) {
      return "Lock[" + A.objectHashCode(this) + "]";
    },
    $isLock: 1
  };
  A.BasicLock_synchronized_complete.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.completer;
      if (t1.last === t2.future)
        t1.last = null;
      t2.complete$0();
    },
    $signature: 0
  };
  A.TypedDataBuffer.prototype = {
    get$length(_) {
      return this._typed_buffer$_length;
    },
    $index(_, index) {
      var t1;
      if (index >= this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, this));
      t1 = this._typed_buffer$_buffer;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $indexSet(_, index, value) {
      var _this = this;
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      if (index >= _this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, _this));
      B.NativeUint8List_methods.$indexSet(_this._typed_buffer$_buffer, index, value);
    },
    set$length(_, newLength) {
      var t2, t3, i, newBuffer, _this = this,
        t1 = _this._typed_buffer$_length;
      if (newLength < t1)
        for (t2 = _this._typed_buffer$_buffer, t3 = t2.length, i = newLength; i < t1; ++i) {
          if (!(i >= 0 && i < t3))
            return A.ioore(t2, i);
          t2[i] = 0;
        }
      else {
        t1 = _this._typed_buffer$_buffer.length;
        if (newLength > t1) {
          if (t1 === 0)
            newBuffer = new Uint8Array(newLength);
          else
            newBuffer = _this._createBiggerBuffer$1(newLength);
          B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
          _this.set$_typed_buffer$_buffer(newBuffer);
        }
      }
      _this._typed_buffer$_length = newLength;
    },
    _createBiggerBuffer$1(requiredCapacity) {
      var newLength = this._typed_buffer$_buffer.length * 2;
      if (requiredCapacity != null && newLength < requiredCapacity)
        newLength = requiredCapacity;
      else if (newLength < 8)
        newLength = 8;
      return new Uint8Array(newLength);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t2,
        t1 = A._instanceType(this);
      t1._eval$1("Iterable<TypedDataBuffer.E>")._as(iterable);
      t2 = this._typed_buffer$_length;
      if (end > t2)
        throw A.wrapException(A.RangeError$range(end, 0, t2, null, null));
      t2 = this._typed_buffer$_buffer;
      if (t1._eval$1("TypedDataBuffer<TypedDataBuffer.E>")._is(iterable))
        B.NativeUint8List_methods.setRange$4(t2, start, end, iterable._typed_buffer$_buffer, skipCount);
      else
        B.NativeUint8List_methods.setRange$4(t2, start, end, iterable, skipCount);
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    set$_typed_buffer$_buffer(_buffer) {
      this._typed_buffer$_buffer = A._instanceType(this)._eval$1("TypedDataList<TypedDataBuffer.E>")._as(_buffer);
    }
  };
  A._IntBuffer.prototype = {};
  A.Uint8Buffer.prototype = {};
  A.EventStreamProvider.prototype = {};
  A._EventStream.prototype = {};
  A._EventStreamSubscription.prototype = {
    cancel$0() {
      var _this = this,
        emptyFuture = A.Future_Future$value(type$.void);
      if (_this._target == null)
        return emptyFuture;
      _this._unlisten$0();
      _this._onData = _this._target = null;
      return emptyFuture;
    },
    _tryResume$0() {
      var _this = this,
        t1 = _this._onData;
      if (t1 != null && _this._pauseCount <= 0)
        _this._target.addEventListener(_this._eventType, t1, false);
    },
    _unlisten$0() {
      var t1 = this._onData;
      if (t1 != null)
        this._target.removeEventListener(this._eventType, t1, false);
    },
    $isStreamSubscription: 1
  };
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.JSObject._as(e));
    },
    $signature: 3
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.DatabaseException.prototype;
    _.super$DatabaseException$toString = _.toString$0;
    _ = A.SqfliteDatabaseException.prototype;
    _.super$SqfliteDatabaseException$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_u = hunkHelpers._instance_0u;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 65);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 10);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 10);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 10);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static(A, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 49, 0);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 45);
    _instance_0_u(A._FunctionWorkItem.prototype, "get$run", "run$0", 0);
    _instance_0_u(A._DeleteFileWorkItem.prototype, "get$run", "run$0", 2);
    _instance_0_u(A._CreateFileWorkItem.prototype, "get$run", "run$0", 2);
    _instance_0_u(A._WriteFileWorkItem.prototype, "get$run", "run$0", 2);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Iterable, A.CastIterator, A.MapBase, A.Closure, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.SkipIterator, A.EmptyIterator, A.WhereTypeIterator, A.IndexedIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A._Record, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.Stream, A._StreamIterator, A._ZoneFunction, A._Zone, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._LinkedListIterator, A.LinkedListEntry, A._MapBaseValueIterator, A._UnmodifiableMapMixin, A.Codec, A.Converter, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A._FinalizationRegistryWrapper, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.Expando, A.NullRejectionException, A._JSSecureRandom, A.NonGrowableListMixin, A.UnmodifiableMapMixin, A.Context, A.Style, A.ParsedPath, A.DatabaseException, A.DatabaseTracker, A.FfiMethodCall, A.FfiMethodResponse, A.SqfliteFfiHandler, A.SqfliteFfiHandlerNonImplementedMixin, A.SqfliteFfiOperation, A._SqfliteFfiCursorInfo, A._QueuedHandler, A.SqfliteFfiDatabase, A.SqfliteDatabaseFileSystemFfiWeb, A._TypeAdapter, A.SqfliteFfiWebOptions, A.SqfliteFfiWebContext, A.SqliteException, A.RawSqliteBindings, A.SqliteResult, A.RawSqliteDatabase, A.RawStatementCompiler, A.RawSqliteStatement, A.RawSqliteContext, A.RawSqliteValue, A.FinalizablePart, A.DatabaseImplementation, A.Sqlite3Implementation, A.CommonPreparedStatement, A.Cursor, A.VirtualFileSystem, A.BaseVfsFile, A._Row_Object_UnmodifiableMapMixin, A._ResultIterator, A.IndexedParameters, A.VfsException, A.Sqlite3Filename, A._CursorReader, A.WasmInstance, A.AsynchronousIndexedDbFileSystem, A._FileWriteRequest, A._OffsetAndBuffer, A._IndexedDbFile, A.WasmBindings, A._InjectedValues, A.DartCallbacks, A.BasicLock, A.EventStreamProvider, A._EventStreamSubscription]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.SkipIterable, A.WhereTypeIterable, A.IndexedIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.LinkedList]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.MapBase, [A.CastMap, A.UnmodifiableMapBase, A.JsLinkedHashMap]);
    _inheritMany(A.Closure, [A.Closure2Args, A.CastMap_entries_closure, A.Closure0Args, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A.Future_wait_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_length_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A.MapBase_entries_closure, A._BigIntImpl_hashCode_finish, A._createTables_setChars, A._createTables_setRange, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.Context_joinAll_closure, A._validateArgList_closure, A.argumentsToString_closure, A.SqfliteDatabaseException_getResultCode_closure_findCode, A.SqfliteFfiDatabase__handleBatch_getErrorMap, A.SqfliteFfiDatabase__handleBatch_addResult, A.SqfliteFfiDatabase__handleBatch_addError, A.SqfliteFfiDatabase__handleBatch_addError_wrap, A.SqfliteFfiMethodCallHandler_handleOpenDatabase_wrapDbId, A.SqfliteFfiMethodCallHandler_getOperations_closure, A.SqfliteFfiMethodCallHandler_get_handleQuery_closure, A.SqfliteFfiMethodCallHandler_get_handleQueryCursorNext_closure, A.SqfliteFfiMethodCallHandler_get_handleExecute_closure, A.SqfliteFfiMethodCallHandler_get_handleInsert_closure, A.SqfliteFfiMethodCallHandler_get_handleUpdate_closure, A.SqfliteFfiMethodCallHandler_get_handleBatch_closure, A._handleMessageEvent_postResponse, A.mainSharedWorker_closure, A.mainSharedWorker___closure, A.mainSharedWorker_closure0, A.SqliteException_toString_closure, A.disposeFinalizer_closure, A._CursorReader_moveNext_closure, A._CursorReader_moveNext_closure0, A.CompleteIdbRequest_complete_closure, A.CompleteIdbRequest_complete_closure0, A.CompleteOpenIdbRequest_completeOrBlocked_closure, A.CompleteOpenIdbRequest_completeOrBlocked_closure0, A.CompleteOpenIdbRequest_completeOrBlocked_closure1, A.AsynchronousIndexedDbFileSystem_open_closure, A.AsynchronousIndexedDbFileSystem__readFile_closure, A.AsynchronousIndexedDbFileSystem__write_closure, A._InjectedValues_closure, A._InjectedValues_closure0, A._InjectedValues_closure1, A._InjectedValues_closure2, A._InjectedValues_closure3, A._InjectedValues_closure4, A._InjectedValues_closure7, A._InjectedValues_closure8, A._InjectedValues_closure9, A._InjectedValues_closure10, A._InjectedValues_closure17, A._InjectedValues_closure18, A._InjectedValues_closure19, A._InjectedValues_closure20, A._InjectedValues_closure21, A._InjectedValues_closure22, A._InjectedValues_closure23, A._InjectedValues_closure24, A._EventStreamSubscription_closure]);
    _inheritMany(A.Closure2Args, [A.CastMap_forEach_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A._Future__chainForeignFuture_closure0, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A._BigIntImpl_hashCode_combine, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._createTables_build, A._adaptersByTag_closure, A._dataToEncodable_closure, A._dataFromEncodable_closure, A.SqfliteWebJsifyExtension_jsifyValueStrict_closure, A.WasmInstance_load_closure, A.WasmInstance_load__closure, A.AsynchronousIndexedDbFileSystem__write_writeBlock, A._InjectedValues_closure5, A._InjectedValues_closure6, A._InjectedValues_closure11, A._InjectedValues_closure12, A._InjectedValues_closure13, A._InjectedValues_closure14, A._InjectedValues_closure15, A._InjectedValues_closure16]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A.AssertionError, A._Error, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inheritMany(A.ListBase, [A.UnmodifiableListBase, A.WasmValueList, A.TypedDataBuffer]);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A._ListIndicesIterable, A.ReversedListIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.EfficientLengthIndexedIterable, A.IndexedIterable);
    _inherit(A.ListMapView, A.UnmodifiableMapBase);
    _inherit(A._Record2, A._Record);
    _inheritMany(A._Record2, [A._Record_2, A._Record_2_file_outFlags]);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A.Future_Future_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__chainCoreFutureAsync_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_length_closure0, A._rootHandleError_closure, A._RootZone_bindCallback_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A.SqfliteDatabaseException_getResultCode_closure, A.SqfliteFfiDatabase_handleExecute_closure, A.SqfliteFfiDatabase__runQueuedHandlers_closure, A.SqfliteFfiDatabase__cancelQueuedHandlers_closure, A.SqfliteFfiDatabase_handleInsert_closure, A.SqfliteFfiDatabase_handleUpdate_closure, A.SqfliteFfiDatabase_handleQuery_closure, A.SqfliteFfiDatabase_handleQueryCursorNext_closure, A.SqfliteFfiDatabase_handleBatch_closure, A.SqfliteFfiMethodCallHandler__wrapSqlHandler_closure, A.SqfliteFfiMethodCallHandler__wrapGlobalHandler_closure, A.SqfliteFfiMethodCallHandler_get_handleOpenDatabase_closure, A.SqfliteFfiMethodCallHandler_get_handleCloseDatabase_closure, A.SqfliteFfiMethodCallHandler_get_handleOptions_closure, A.SqfliteFfiMethodCallHandler_get_handleGetDatabasesPath_closure, A.SqfliteFfiMethodCallHandler_get_handleDeleteDatabase_closure, A.SqfliteFfiMethodCallHandler_get_handleDatabaseExists_closure, A.SqfliteFfiMethodCallHandler_get_handleReadDatabaseBytes_closure, A.SqfliteFfiMethodCallHandler_get_handleWriteDatabaseBytes_closure, A.mainSharedWorker__closure0, A.mainSharedWorker____closure, A.mainSharedWorker__closure, A.DatabaseImplementation__prepareInternal_freeIntermediateResults, A.AsynchronousIndexedDbFileSystem_readFully_closure, A._FileWriteRequest__updateBlock_closure, A.IndexedDbFileSystem__startWorkingIfNeeded_closure, A.IndexedDbFileSystem_flush_closure, A._IndexedDbFile_xTruncate_closure, A._InjectedValues__closure13, A._InjectedValues__closure12, A._InjectedValues__closure11, A._InjectedValues__closure10, A._InjectedValues__closure9, A._InjectedValues__closure8, A._InjectedValues__closure7, A._InjectedValues__closure6, A._InjectedValues__closure5, A._InjectedValues__closure4, A._InjectedValues__closure3, A._InjectedValues__closure2, A._InjectedValues__closure1, A._InjectedValues__closure0, A._InjectedValues__closure, A.BasicLock_synchronized_complete]);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._SetBase, A.SetBase);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.Codec, [A.Base64Codec, A.Encoding]);
    _inheritMany(A.Converter, [A.Base64Encoder, A.Utf8Encoder]);
    _inherit(A.Utf8Codec, A.Encoding);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inherit(A.SqfliteDatabaseException, A.DatabaseException);
    _inherit(A.SqfliteFfiException, A.SqfliteDatabaseException);
    _inherit(A._SqfliteFfiHandlerWeb_SqfliteFfiHandler_SqfliteFfiHandlerNonImplementedMixin, A.SqfliteFfiHandler);
    _inherit(A.SqfliteFfiHandlerWeb, A._SqfliteFfiHandlerWeb_SqfliteFfiHandler_SqfliteFfiHandlerNonImplementedMixin);
    _inherit(A._BigIntAdapter, A._TypeAdapter);
    _inherit(A.SqfliteFfiWebContextImpl, A.SqfliteFfiWebContext);
    _inheritMany(A.FinalizablePart, [A.FinalizableDatabase, A.FinalizableStatement]);
    _inherit(A.StatementImplementation, A.CommonPreparedStatement);
    _inheritMany(A.Cursor, [A.IteratingCursor, A._ResultSet_Cursor_ListMixin]);
    _inherit(A._ActiveCursorIterator, A.IteratingCursor);
    _inherit(A.BaseVirtualFileSystem, A.VirtualFileSystem);
    _inheritMany(A.BaseVirtualFileSystem, [A.InMemoryFileSystem, A.IndexedDbFileSystem]);
    _inherit(A._InMemoryFile, A.BaseVfsFile);
    _inherit(A._ResultSet_Cursor_ListMixin_NonGrowableListMixin, A._ResultSet_Cursor_ListMixin);
    _inherit(A.ResultSet, A._ResultSet_Cursor_ListMixin_NonGrowableListMixin);
    _inherit(A._Row_Object_UnmodifiableMapMixin_MapMixin, A._Row_Object_UnmodifiableMapMixin);
    _inherit(A.Row, A._Row_Object_UnmodifiableMapMixin_MapMixin);
    _inherit(A.OpenMode, A._Enum);
    _inherit(A.WasmSqliteBindings, A.RawSqliteBindings);
    _inherit(A.WasmDatabase, A.RawSqliteDatabase);
    _inherit(A.WasmStatementCompiler, A.RawStatementCompiler);
    _inherit(A.WasmStatement, A.RawSqliteStatement);
    _inherit(A.WasmContext, A.RawSqliteContext);
    _inherit(A.WasmValue, A.RawSqliteValue);
    _inherit(A.WasmSqlite3, A.Sqlite3Implementation);
    _inherit(A._IndexedDbWorkItem, A.LinkedListEntry);
    _inheritMany(A._IndexedDbWorkItem, [A._FunctionWorkItem, A._DeleteFileWorkItem, A._CreateFileWorkItem, A._WriteFileWorkItem]);
    _inherit(A._IntBuffer, A.TypedDataBuffer);
    _inherit(A.Uint8Buffer, A._IntBuffer);
    _inherit(A._EventStream, A.Stream);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A.UnmodifiableMapBase, A._UnmodifiableMapMixin);
    _mixin(A._SqfliteFfiHandlerWeb_SqfliteFfiHandler_SqfliteFfiHandlerNonImplementedMixin, A.SqfliteFfiHandlerNonImplementedMixin);
    _mixin(A._ResultSet_Cursor_ListMixin, A.ListBase);
    _mixin(A._ResultSet_Cursor_ListMixin_NonGrowableListMixin, A.NonGrowableListMixin);
    _mixin(A._Row_Object_UnmodifiableMapMixin, A.UnmodifiableMapMixin);
    _mixin(A._Row_Object_UnmodifiableMapMixin_MapMixin, A.MapBase);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["~()", "int(int,int)", "Future<~>()", "~(JSObject)", "Null()", "Future<@>()", "~(@)", "Null(JSObject)", "~(@,@)", "Null(int)", "~(~())", "int(int)", "Future<@>(SqfliteFfiDatabase)", "Null(int,int,int)", "int(int,int,int,int,int)", "int(int,int,int,JavaScriptBigInt)", "Null(@)", "~(Uint8List,String,int)", "int(int,int,int,int)", "Future<Null>()", "Future<Object?>()", "@()", "Future<Map<@,@>>()", "int(int,int,int)", "Map<String,Object?>(SqfliteFfiException)", "int?()", "int?(String)", "Null(@,StackTrace)", "~(String,int?)", "Future<int?>()", "Future<int>()", "Uint8List(@,@)", "~(int,@)", "@(String)", "~(@[@])", "SqfliteFfiException(@)", "bool(String)", "Map<@,@>(int)", "~(Map<@,@>)", "~(Object,StackTrace)", "Future<Object?>(SqfliteFfiDatabase)", "Future<int?>(SqfliteFfiDatabase)", "Future<int>(SqfliteFfiDatabase)", "Future<bool>()", "~(FfiMethodResponse)", "String(String)", "MapEntry<String,_BigIntAdapter>(int,_BigIntAdapter)", "String(Object?)", "~(FinalizablePart)", "~(Zone?,ZoneDelegate?,Zone,~())", "~(String,Map<String,Object?>)", "~(String,Object?)", "JSObject(JSObject?)", "Future<~>(int,Uint8List)", "Future<~>(int)", "Uint8List()", "_Future<@>(@)", "String(String?)", "~(String,int)", "Null(~())", "Null(int,int)", "String?(Object?)", "int(int,JavaScriptBigInt)", "@(@,String)", "Null(int,int,int,int,JavaScriptBigInt)", "int(@,@)", "~(Object?,Object?)", "@(@)", "Null(Object,StackTrace)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1),
      "2;file,outFlags": (t1, t2) => o => o instanceof A._Record_2_file_outFlags && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"TrustedGetRuntimeType":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"CastMap":{"MapBase":["3","4"],"Map":["3","4"],"MapBase.K":"3","MapBase.V":"4"},"LateError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"IndexedIterable":{"Iterable":["+(int,1)"],"Iterable.E":"+(int,1)"},"EfficientLengthIndexedIterable":{"IndexedIterable":["1"],"EfficientLengthIterable":["+(int,1)"],"Iterable":["+(int,1)"],"Iterable.E":"+(int,1)"},"IndexedIterator":{"Iterator":["+(int,1)"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListIterable.E":"int","Iterable.E":"int"},"ListMapView":{"MapBase":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"],"MapBase.K":"int","MapBase.V":"1"},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"_Record_2":{"_Record2":[],"_Record":[]},"_Record_2_file_outFlags":{"_Record2":[],"_Record":[]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"_Record2":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"NativeUint8List":{"NativeTypedArrayOfInt":[],"Uint8List":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeTypedData":{"JSObject":[]},"NativeByteData":{"ByteData":[],"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSObject":[]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"ListBase":["double"],"TypedDataList":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"ListBase":["double"],"TypedDataList":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"Uint16List":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"TypedDataList":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedHashSet":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"LinkedList":{"Iterable":["1"],"Iterable.E":"1"},"_LinkedListIterator":{"Iterator":["1"]},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Base64Codec":{"Codec":["List<int>","String"]},"Encoding":{"Codec":["String","List<int>"]},"Utf8Codec":{"Codec":["String","List<int>"]},"BigInt":{"Comparable":["BigInt"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"IntegerDivisionByZeroException":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"_JSSecureRandom":{"Random":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"_BigIntAdapter":{"_TypeAdapter":["BigInt"],"_TypeAdapter.T":"BigInt"},"SqfliteFfiWebContextImpl":{"SqfliteFfiWebContext":[]},"FinalizableDatabase":{"FinalizablePart":[]},"DatabaseImplementation":{"CommonDatabase":[]},"FinalizableStatement":{"FinalizablePart":[]},"StatementImplementation":{"CommonPreparedStatement":[]},"_ActiveCursorIterator":{"IteratingCursor":[],"Cursor":[],"Iterator":["Row"]},"InMemoryFileSystem":{"VirtualFileSystem":[]},"_InMemoryFile":{"VirtualFileSystemFile":[]},"Row":{"UnmodifiableMapMixin":["String","@"],"MapBase":["String","@"],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"IteratingCursor":{"Cursor":[],"Iterator":["Row"]},"ResultSet":{"ListBase":["Row"],"NonGrowableListMixin":["Row"],"List":["Row"],"EfficientLengthIterable":["Row"],"Cursor":[],"Iterable":["Row"],"ListBase.E":"Row"},"_ResultIterator":{"Iterator":["Row"]},"IndexedParameters":{"StatementParameters":[]},"BaseVirtualFileSystem":{"VirtualFileSystem":[]},"BaseVfsFile":{"VirtualFileSystemFile":[]},"WasmSqliteBindings":{"RawSqliteBindings":[]},"WasmDatabase":{"RawSqliteDatabase":[]},"WasmStatement":{"RawSqliteStatement":[]},"WasmValueList":{"ListBase":["WasmValue"],"List":["WasmValue"],"EfficientLengthIterable":["WasmValue"],"Iterable":["WasmValue"],"ListBase.E":"WasmValue"},"IndexedDbFileSystem":{"VirtualFileSystem":[]},"_IndexedDbWorkItem":{"LinkedListEntry":["_IndexedDbWorkItem"]},"_IndexedDbFile":{"VirtualFileSystemFile":[]},"_FunctionWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"_DeleteFileWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"_CreateFileWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"_WriteFileWorkItem":{"_IndexedDbWorkItem":[],"LinkedListEntry":["_IndexedDbWorkItem"],"LinkedListEntry.E":"_IndexedDbWorkItem"},"BasicLock":{"Lock":[]},"Uint8Buffer":{"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","TypedDataBuffer.E":"int"},"TypedDataBuffer":{"ListBase":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IntBuffer":{"TypedDataBuffer":["int"],"ListBase":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"_EventStream":{"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"Int8List":{"TypedDataList":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8List":{"TypedDataList":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedList":{"TypedDataList":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16List":{"TypedDataList":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16List":{"TypedDataList":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32List":{"TypedDataList":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32List":{"TypedDataList":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32List":{"TypedDataList":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64List":{"TypedDataList":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"UnmodifiableMapBase":2,"_SetBase":1,"Converter":2,"AggregateContext":1}'));
  var string$ = {
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Tried_: "Tried to operate on a released prepared statement"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      AggregateContext_nullable_Object: findType("AggregateContext<Object?>"),
      AsyncError: findType("AsyncError"),
      BigInt: findType("BigInt"),
      ByteBuffer: findType("ByteBuffer"),
      CommonDatabase: findType("CommonDatabase"),
      Comparable_dynamic: findType("Comparable<@>"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      FinalizablePart: findType("FinalizablePart"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Future_dynamic_Function: findType("Future<@>()"),
      IndexedDbFileSystem: findType("IndexedDbFileSystem"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_FinalizableStatement: findType("JSArray<FinalizableStatement>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_List_nullable_Object: findType("JSArray<List<Object?>>"),
      JSArray_Map_of_String_and_nullable_Object: findType("JSArray<Map<String,Object?>>"),
      JSArray_MultiStreamController_SqliteUpdate: findType("JSArray<MultiStreamController<SqliteUpdate>>"),
      JSArray_NativeByteBuffer: findType("JSArray<NativeByteBuffer>"),
      JSArray_NativeUint8List: findType("JSArray<NativeUint8List>"),
      JSArray_SqfliteFfiOperation: findType("JSArray<SqfliteFfiOperation>"),
      JSArray_StatementImplementation: findType("JSArray<StatementImplementation>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray__OffsetAndBuffer: findType("JSArray<_OffsetAndBuffer>"),
      JSArray__QueuedHandler: findType("JSArray<_QueuedHandler>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptBigInt: findType("JavaScriptBigInt"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      LinkedList__IndexedDbWorkItem: findType("LinkedList<_IndexedDbWorkItem>"),
      List_JSObject: findType("List<JSObject>"),
      List_SqfliteFfiOperation: findType("List<SqfliteFfiOperation>"),
      List_String: findType("List<String>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_Object: findType("List<Object?>"),
      MapEntry_String__BigIntAdapter: findType("MapEntry<String,_BigIntAdapter>"),
      Map_String_JSObject: findType("Map<String,JSObject>"),
      Map_String_int: findType("Map<String,int>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_String_and_Map_String_JSObject: findType("Map<String,Map<String,JSObject>>"),
      Map_of_String_and_nullable_Object: findType("Map<String,Object?>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      RegExpMatch: findType("RegExpMatch"),
      RegisteredFunctionSet: findType("RegisteredFunctionSet"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      Row: findType("Row"),
      SqfliteFfiWebContext: findType("SqfliteFfiWebContext"),
      SqfliteFfiWebContextImpl: findType("SqfliteFfiWebContextImpl"),
      SqliteResult_nullable_RawSqliteStatement: findType("SqliteResult<RawSqliteStatement?>"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      TypeError: findType("TypeError"),
      Uint8Buffer: findType("Uint8Buffer"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      Uri: findType("Uri"),
      VirtualFileSystem: findType("VirtualFileSystem"),
      VirtualFileSystemFile: findType("VirtualFileSystemFile"),
      WasmBindings: findType("WasmBindings"),
      WasmInstance: findType("WasmInstance"),
      WasmSqlite3: findType("WasmSqlite3"),
      WasmValue: findType("WasmValue"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      Zone: findType("Zone"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _BigIntAdapter: findType("_BigIntAdapter"),
      _BigIntImpl: findType("_BigIntImpl"),
      _CursorReader_JSObject: findType("_CursorReader<JSObject>"),
      _Future_JSObject: findType("_Future<JSObject>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_void: findType("_Future<~>"),
      _SqfliteFfiCursorInfo: findType("_SqfliteFfiCursorInfo"),
      _SyncCompleter_JSObject: findType("_SyncCompleter<JSObject>"),
      _SyncCompleter_bool: findType("_SyncCompleter<bool>"),
      _SyncCompleter_void: findType("_SyncCompleter<~>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_List_nullable_Object: findType("List<Object?>?"),
      nullable_Map_of_String_and_nullable_Object: findType("Map<String,Object?>?"),
      nullable_Object: findType("Object?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_Uint8Buffer: findType("Uint8Buffer?"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_int: findType("int?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_JSObject: findType("~(JSObject)?"),
      nullable_void_Function_int_String_int: findType("~(int,String,int)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.Duration_0 = new A.Duration(0);
    B.List_2jN = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_42A = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_4AN = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_GVy = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.List_M2I = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_VOY = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_nullable_Object);
    B.List_piR = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.Object_empty = {};
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,int>"));
    B.OpenMode_0 = new A.OpenMode("readOnly");
    B.OpenMode_1 = new A.OpenMode("readWrite");
    B.OpenMode_2 = new A.OpenMode("readWriteCreate");
    B.Type_ByteBuffer_EOZ = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_mF8 = A.typeLiteral("ByteData");
    B.Type_Float32List_Ymk = A.typeLiteral("Float32List");
    B.Type_Float64List_Ymk = A.typeLiteral("Float64List");
    B.Type_Int16List_cot = A.typeLiteral("Int16List");
    B.Type_Int32List_m1p = A.typeLiteral("Int32List");
    B.Type_Int8List_woc = A.typeLiteral("Int8List");
    B.Type_JSObject_0ua = A.typeLiteral("JSObject");
    B.Type_Object_QJv = A.typeLiteral("Object");
    B.Type_Uint16List_2mh = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2mh = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_9Bb = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_CSc = A.typeLiteral("Uint8List");
    B.VfsException_522 = new A.VfsException(522);
    B._ZoneFunction__RootZone__rootScheduleMicrotask = new A._ZoneFunction(B.C__RootZone, A.async___rootScheduleMicrotask$closure(), A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.printToZone = null;
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $.Uri__cachedBaseString = "";
    $.Uri__cachedBaseUri = null;
    $._tracker = null;
    $._isRelease = null;
    $.ffiDbs = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, A.findType("SqfliteFfiDatabase"));
    $.ffiSingleInstanceDbs = A.LinkedHashMap_LinkedHashMap$_empty(A.findType("String?"), A.findType("SqfliteFfiDatabase"));
    $._lastFfiId = 0;
    $.logLevel = 0;
    $._sqfliteFfiHandler = null;
    $.swGlobals = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Object);
    $._swContext = null;
    $._shw = "/shw2";
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => new Int8Array(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false));
    _lazyFinal($, "_FinalizationRegistryWrapper__finalizationRegistryConstructor", "$get$_FinalizationRegistryWrapper__finalizationRegistryConstructor", () => typeof FinalizationRegistry == "function" ? FinalizationRegistry : null);
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_QJv));
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => {
      var t1 = new A._JSSecureRandom(new DataView(new ArrayBuffer(A._checkLength(8))));
      t1._JSSecureRandom$0();
      return t1;
    });
    _lazyFinal($, "url", "$get$url", () => {
      var style = $.$get$Style_url();
      return new A.Context(style);
    });
    _lazyFinal($, "context", "$get$context", () => new A.Context($.$get$Style_platform()));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("[^/]$", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true), A.RegExp_RegExp("[^/\\\\]$", true), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "_globalHandlerLock", "$get$_globalHandlerLock", () => A.Lock_Lock());
    _lazy($, "_adapters", "$get$_adapters", () => A._setArrayType([new A._BigIntAdapter("BigInt")], A.findType("JSArray<_BigIntAdapter>")));
    _lazy($, "_adaptersByTag", "$get$_adaptersByTag", () => {
      var t1 = $.$get$_adapters();
      return A.ListMapView$(t1, A._arrayInstanceType(t1)._precomputed1).map$2$1(0, new A._adaptersByTag_closure(), type$.String, type$._BigIntAdapter);
    });
    _lazy($, "_defaultSqlite3WasmUri", "$get$_defaultSqlite3WasmUri", () => A.Uri_parse("sqlite3.wasm"));
    _lazyFinal($, "bigIntMinValue64", "$get$bigIntMinValue64", () => A.BigInt_parse("-9223372036854775808"));
    _lazyFinal($, "bigIntMaxValue64", "$get$bigIntMaxValue64", () => A.BigInt_parse("9223372036854775807"));
    _lazyFinal($, "disposeFinalizer", "$get$disposeFinalizer", () => {
      var t1 = $.$get$_FinalizationRegistryWrapper__finalizationRegistryConstructor();
      t1 = t1 == null ? null : new t1(A.convertDartClosureToJS(A.wrapZoneUnaryCallback(new A.disposeFinalizer_closure(), type$.FinalizablePart), 1));
      return new A._FinalizationRegistryWrapper(t1, A.findType("_FinalizationRegistryWrapper<FinalizablePart>"));
    });
    _lazyFinal($, "AsynchronousIndexedDbFileSystem__storesJs", "$get$AsynchronousIndexedDbFileSystem__storesJs", () => A.ListToJSArray_get_toJS(A._setArrayType(["files", "blocks"], type$.JSArray_String), type$.String));
    _lazyFinal($, "DartCallbacks_sqliteVfsPointer", "$get$DartCallbacks_sqliteVfsPointer", () => new A.Expando(new WeakMap(), A.findType("Expando<int>")));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = function(args) {
      return A.main(A.convertMainArgumentList(args));
    };
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=sqflite_sw.js.map
